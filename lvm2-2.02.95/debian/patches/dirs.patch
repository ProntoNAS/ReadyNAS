--- a/doc/example.conf.in
+++ b/doc/example.conf.in
@@ -86,7 +86,7 @@
     # It is safe to delete the contents: the tools regenerate it.
     # (The old setting 'cache' is still respected if neither of
     # these new ones is present.)
-    cache_dir = "@DEFAULT_SYS_DIR@/@DEFAULT_CACHE_SUBDIR@"
+    cache_dir = "/run/lvm"
     cache_file_prefix = ""
 
     # You can turn off writing this cache file by setting this to 0.
@@ -405,7 +405,7 @@
     # Full pathnames can be given.
 
     # Search this directory first for shared libraries.
-    #   library_dir = "/lib"
+    #   library_dir = "/lib/lvm2"
 
     # The external locking library to load if locking_type is set to 2.
     #   locking_library = "liblvm2clusterlock.so"
--- a/lib/commands/toolcontext.c
+++ b/lib/commands/toolcontext.c
@@ -827,10 +827,8 @@
 
 	if (cache_dir || cache_file_prefix) {
 		if (dm_snprintf(cache_file, sizeof(cache_file),
-		    "%s%s%s/%s.cache",
-		    cache_dir ? "" : cmd->system_dir,
-		    cache_dir ? "" : "/",
-		    cache_dir ? : DEFAULT_CACHE_SUBDIR,
+		    "%s/%s.cache",
+		    cache_dir ? : DEFAULT_RUN_DIR,
 		    cache_file_prefix ? : DEFAULT_CACHE_FILE_PREFIX) < 0) {
 			log_error("Persistent cache filename too long.");
 			f3->destroy(f3);
@@ -838,8 +836,8 @@
 		}
 	} else if (!(dev_cache = find_config_tree_str(cmd, "devices/cache", NULL)) &&
 		   (dm_snprintf(cache_file, sizeof(cache_file),
-				"%s/%s/%s.cache",
-				cmd->system_dir, DEFAULT_CACHE_SUBDIR,
+				"%s/%s.cache",
+				DEFAULT_RUN_DIR,
 				DEFAULT_CACHE_FILE_PREFIX) < 0)) {
 		log_error("Persistent cache filename too long.");
 		f3->destroy(f3);
--- a/daemons/dmeventd/dmeventd.c
+++ b/daemons/dmeventd/dmeventd.c
@@ -912,8 +912,17 @@
 {
 	void *dl;
 	struct dso_data *ret = NULL;
+	char dso_name[PATH_MAX];
 
-	if (!(dl = dlopen(data->dso_name, RTLD_NOW))) {
+	if (strchr(data->dso_name, '/') == NULL) {
+		strcpy(dso_name, PLUGIN_PATH);
+		strncat(dso_name, data->dso_name, sizeof(dso_name));
+	} else {
+		strncpy(dso_name, data->dso_name, sizeof(dso_name));
+	}
+	dso_name[sizeof(dso_name) - 1] = 0;
+
+	if (!(dl = dlopen(dso_name, RTLD_NOW))) {
 		const char *dlerr = dlerror();
 		syslog(LOG_ERR, "dmeventd %s dlopen failed: %s", data->dso_name,
 		       dlerr);
--- a/daemons/dmeventd/Makefile.in
+++ b/daemons/dmeventd/Makefile.in
@@ -58,6 +58,7 @@
 
 LIBS += -ldevmapper
 LVMLIBS += -ldevmapper-event $(PTHREAD_LIBS)
+CFLAGS += -DPLUGIN_PATH=\"$(libdir)/device-mapper/\"
 
 dmeventd: $(LIB_SHARED) dmeventd.o
 	$(CC) $(CFLAGS) $(LDFLAGS) $(ELDFLAGS) -L. -o $@ dmeventd.o \
