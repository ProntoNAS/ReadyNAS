Description: Second part. (see no_sprintf_chdk-c.patch)
             Error at compiling:
             ptp2/chdk.c:1131:2: error: format not a string literal and no
              format arguments [-Werror=format-security]
Author: Marcus Meissner <marcus@jet.franken.de> (upstream)
Reviwed-by: Herbert Parentes Fortes Neto <hpfn@ig.com.br>
Last-Update: 2015-07-12

Index: libgphoto2-2.5.8/camlibs/ptp2/chdk_ptp.h
===================================================================
--- libgphoto2-2.5.8.orig/camlibs/ptp2/chdk_ptp.h
+++ libgphoto2-2.5.8/camlibs/ptp2/chdk_ptp.h
@@ -198,10 +198,92 @@ function serialize(v,opts)\n\
 	return table.concat(r)\n\
 end\n"
 
+#define PTP_CHDK_LUA_SERIALIZE_SIMPLEQUOTE "\n\
+serialize_r = function(v,opts,r,seen,depth)\n\
+	local vt = type(v)\n\
+	if vt == 'nil' or  vt == 'boolean' or vt == 'number' then\n\
+		table.insert(r,tostring(v))\n\
+		return\n\
+	end\n\
+	if vt == 'string' then\n\
+		table.insert(r,string.format('%q',v))\n\
+		return\n\
+	end\n\
+	if vt == 'table' then\n\
+		if not depth then\n\
+			depth = 1\n\
+		end\n\
+		if depth >= opts.maxdepth then\n\
+			error('serialize: max depth')\n\
+		end\n\
+		if not seen then\n\
+			seen={}\n\
+		elseif seen[v] then\n\
+			if opts.err_cycle then\n\
+				error('serialize: cycle')\n\
+			else\n\
+				table.insert(r,'\"cycle:'..tostring(v)..'\"')\n\
+				return\n\
+			end\n\
+		end\n\
+		seen[v] = true;\n\
+		table.insert(r,'{')\n\
+		for k,v1 in pairs(v) do\n\
+			if opts.pretty then\n\
+				table.insert(r,'\\n'..string.rep(' ',depth))\n\
+			end\n\
+			if type(k) == 'string' and string.match(k,'^[_%a][%a%d_]*$') then\n\
+				table.insert(r,k)\n\
+			else\n\
+				table.insert(r,'[')\n\
+				serialize_r(k,opts,r,seen,depth+1)\n\
+				table.insert(r,']')\n\
+			end\n\
+			table.insert(r,'=')\n\
+			serialize_r(v1,opts,r,seen,depth+1)\n\
+			table.insert(r,',')\n\
+		end\n\
+		if opts.pretty then\n\
+			table.insert(r,'\\n'..string.rep(' ',depth-1))\n\
+		end\n\
+		table.insert(r,'}')\n\
+		return\n\
+	end\n\
+	if opts.err_type then\n\
+		error('serialize: unsupported type ' .. vt, 2)\n\
+	else\n\
+		table.insert(r,'\"'..tostring(v)..'\"')\n\
+	end\n\
+end\n\
+serialize_defaults = {\n\
+	maxdepth=10,\n\
+	err_type=true,\n\
+	err_cycle=true,\n\
+	pretty=false,\n\
+}\n\
+function serialize(v,opts)\n\
+	if opts then\n\
+		for k,v in pairs(serialize_defaults) do\n\
+			if not opts[k] then\n\
+				opts[k]=v\n\
+			end\n\
+		end\n\
+	else\n\
+		opts=serialize_defaults\n\
+	end\n\
+	local r={}\n\
+	serialize_r(v,opts,r)\n\
+	return table.concat(r)\n\
+end\n"
+
 #define PTP_CHDK_LUA_SERIALIZE_MSGS \
 PTP_CHDK_LUA_SERIALIZE\
 "usb_msg_table_to_string=serialize\n"
 
+#define PTP_CHDK_LUA_SERIALIZE_MSGS_SIMPLEQUOTE \
+PTP_CHDK_LUA_SERIALIZE_SIMPLEQUOTE\
+"usb_msg_table_to_string=serialize\n"
+
 #define PTP_CHDK_LUA_EXTEND_TABLE \
 "function extend_table(target,source,deep)\n\
 	if type(target) ~= 'table' then\n\
