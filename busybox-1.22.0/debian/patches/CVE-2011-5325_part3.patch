From: Markus Koschany <apo@debian.org>
Date: Thu, 12 Jul 2018 17:50:57 +0200
Subject: CVE-2011-5325_part3

Bug-Debian: https://bugs.debian.org/802702
Bug-Upstream: https://bugs.busybox.net/show_bug.cgi?id=8411
Origin: https://git.busybox.net/busybox/commit/?id=a84db18fc71d09e801df0ebca048d82e90b32c6a
---
 archival/libarchive/data_extract_all.c      | 26 ++++---------
 archival/libarchive/unsafe_symlink_target.c | 59 +++++++++++++----------------
 archival/tar.c                              |  2 +
 include/bb_archive.h                        | 23 ++++++-----
 testsuite/tar.tests                         |  6 +--
 5 files changed, 52 insertions(+), 64 deletions(-)

diff --git a/archival/libarchive/data_extract_all.c b/archival/libarchive/data_extract_all.c
index d4296ff..8cd6aa8 100644
--- a/archival/libarchive/data_extract_all.c
+++ b/archival/libarchive/data_extract_all.c
@@ -69,9 +69,7 @@ void FAST_FUNC data_extract_all(archive_handle_t *archive_handle)
 			}
 		}
 		else if (existing_sb.st_mtime >= file_header->mtime) {
-			if (!(archive_handle->ah_flags & ARCHIVE_EXTRACT_QUIET)
-			 && !S_ISDIR(file_header->mode)
-			) {
+			if (!S_ISDIR(file_header->mode)) {
 				bb_error_msg("%s not created: newer or "
 					"same age file exists", file_header->name);
 			}
@@ -92,7 +90,7 @@ void FAST_FUNC data_extract_all(archive_handle_t *archive_handle)
 	) {
 		/* hard link */
 		res = link(file_header->link_target, file_header->name);
-		if ((res == -1) && !(archive_handle->ah_flags & ARCHIVE_EXTRACT_QUIET)) {
+		if (res != 0) {
 			bb_perror_msg("can't create %slink "
 					"from '%s' to '%s'", "hard",
 					file_header->name,
@@ -132,10 +130,9 @@ void FAST_FUNC data_extract_all(archive_handle_t *archive_handle)
 	}
 	case S_IFDIR:
 		res = mkdir(file_header->name, file_header->mode);
-		if ((res == -1)
+		if ((res != 0)
 		 && (errno != EISDIR) /* btw, Linux doesn't return this */
 		 && (errno != EEXIST)
-		 && !(archive_handle->ah_flags & ARCHIVE_EXTRACT_QUIET)
 		) {
 			bb_perror_msg("can't make dir %s", file_header->name);
 		}
@@ -165,25 +162,16 @@ void FAST_FUNC data_extract_all(archive_handle_t *archive_handle)
 		 *
 		 * Untarring bug.tar would otherwise place evil.py in '/tmp'.
 		 */
-		if (!unsafe_symlink_target(file_header->link_target)) {
-			res = symlink(file_header->link_target, file_header->name);
-			if (res != 0)
-			 && !(archive_handle->ah_flags & ARCHIVE_EXTRACT_QUIET)
-			) {
-			bb_perror_msg("can't create %slink "
-				"from '%s' to '%s'", "sym",
-				file_header->name,
-				file_header->link_target);
-			}
-		}
+		create_or_remember_symlink(&archive_handle->symlink_placeholders,
+				file_header->link_target,
+				file_header->name);
 		break;
 	case S_IFSOCK:
 	case S_IFBLK:
 	case S_IFCHR:
 	case S_IFIFO:
 		res = mknod(file_header->name, file_header->mode, file_header->device);
-		if ((res == -1)
-		 && !(archive_handle->ah_flags & ARCHIVE_EXTRACT_QUIET)
+		if ((res != 0)
 		) {
 			bb_perror_msg("can't create node %s", file_header->name);
 		}
diff --git a/archival/libarchive/unsafe_symlink_target.c b/archival/libarchive/unsafe_symlink_target.c
index 441ba8b..8dcafea 100644
--- a/archival/libarchive/unsafe_symlink_target.c
+++ b/archival/libarchive/unsafe_symlink_target.c
@@ -5,44 +5,37 @@
 #include "libbb.h"
 #include "bb_archive.h"
 
-int FAST_FUNC unsafe_symlink_target(const char *target)
+void FAST_FUNC create_or_remember_symlink(llist_t **symlink_placeholders,
+		const char *target,
+		const char *linkname)
 {
-	const char *dot;
-
-	if (target[0] == '/') {
-		const char *var;
- unsafe:
-		var = getenv("EXTRACT_UNSAFE_SYMLINKS");
-		if (var) {
-			if (LONE_CHAR(var, '1'))
-				return 0; /* pretend it's safe */
-			return 1; /* "UNSAFE!" */
-		}
-		bb_error_msg("skipping unsafe symlink to '%s' in archive,"
-			" set %s=1 to extract",
-			target,
-			"EXTRACT_UNSAFE_SYMLINKS"
+	if (target[0] == '/' || strstr(target, "..")) {
+		llist_add_to(symlink_placeholders,
+			xasprintf("%s%c%s", linkname, '\0', target)
+		);
+		return;
+	}
+	if (symlink(target, linkname) != 0) {
+		/* shared message */
+		bb_perror_msg_and_die("can't create %slink '%s' to '%s'",
+			"sym", linkname, target
 		);
-		/* Prevent further messages */
-		setenv("EXTRACT_UNSAFE_SYMLINKS", "0", 0);
-		return 1; /* "UNSAFE!" */
 	}
+}
 
-	dot = target;
-	for (;;) {
-		dot = strchr(dot, '.');
-		if (!dot)
-			return 0; /* safe target */
+void FAST_FUNC create_symlinks_from_list(llist_t *list)
+{
+	while (list) {
+		char *target;
 
-		/* Is it a path component starting with ".."? */
-		if ((dot[1] == '.')
-		 && (dot == target || dot[-1] == '/')
-		    /* Is it exactly ".."? */
-		 && (dot[2] == '/' || dot[2] == '\0')
-		) {
-			goto unsafe;
+		target = list->data + strlen(list->data) + 1;
+		if (symlink(target, list->data)) {
+			/* shared message */
+			bb_error_msg_and_die("can't create %slink '%s' to '%s'",
+				"sym",
+				list->data, target
+			);
 		}
-		/* NB: it can even be trailing ".", should only add 1 */
-		dot += 1;
+		list = list->link;
 	}
 }
diff --git a/archival/tar.c b/archival/tar.c
index 648f090..1ebadf7 100644
--- a/archival/tar.c
+++ b/archival/tar.c
@@ -1187,6 +1187,8 @@ int tar_main(int argc UNUSED_PARAM, char **argv)
 	while (get_header_tar(tar_handle) == EXIT_SUCCESS)
 		bb_got_signal = EXIT_SUCCESS; /* saw at least one header, good */
 
+	create_symlinks_from_list(tar_handle->symlink_placeholders);
+
 	/* Check that every file that should have been extracted was */
 	while (tar_handle->accept) {
 		if (!find_list_entry(tar_handle->reject, tar_handle->accept->data)
diff --git a/include/bb_archive.h b/include/bb_archive.h
index 494f01c..bc47672 100644
--- a/include/bb_archive.h
+++ b/include/bb_archive.h
@@ -64,6 +64,9 @@ typedef struct archive_handle_t {
 	/* Currently processed file's header */
 	file_header_t *file_header;
 
+	/* List of symlink placeholders */
+	llist_t *symlink_placeholders;
+
 	/* Process the header component, e.g. tar -t */
 	void FAST_FUNC (*action_header)(const file_header_t *);
 
@@ -115,15 +118,14 @@ typedef struct archive_handle_t {
 #define ARCHIVE_RESTORE_DATE        (1 << 0)
 #define ARCHIVE_CREATE_LEADING_DIRS (1 << 1)
 #define ARCHIVE_UNLINK_OLD          (1 << 2)
-#define ARCHIVE_EXTRACT_QUIET       (1 << 3)
-#define ARCHIVE_EXTRACT_NEWER       (1 << 4)
-#define ARCHIVE_DONT_RESTORE_OWNER  (1 << 5)
-#define ARCHIVE_DONT_RESTORE_PERM   (1 << 6)
-#define ARCHIVE_NUMERIC_OWNER       (1 << 7)
-#define ARCHIVE_O_TRUNC             (1 << 8)
-#define ARCHIVE_REMEMBER_NAMES      (1 << 9)
+#define ARCHIVE_EXTRACT_NEWER       (1 << 3)
+#define ARCHIVE_DONT_RESTORE_OWNER  (1 << 4)
+#define ARCHIVE_DONT_RESTORE_PERM   (1 << 5)
+#define ARCHIVE_NUMERIC_OWNER       (1 << 6)
+#define ARCHIVE_O_TRUNC             (1 << 7)
+#define ARCHIVE_REMEMBER_NAMES      (1 << 8)
 #if ENABLE_RPM
-#define ARCHIVE_REPLACE_VIA_RENAME  (1 << 10)
+#define ARCHIVE_REPLACE_VIA_RENAME  (1 << 9)
 #endif
 
 
@@ -190,7 +192,10 @@ void seek_by_jump(int fd, off_t amount) FAST_FUNC;
 void seek_by_read(int fd, off_t amount) FAST_FUNC;
 
 const char *strip_unsafe_prefix(const char *str) FAST_FUNC;
-int unsafe_symlink_target(const char *target) FAST_FUNC;
+void create_or_remember_symlink(llist_t **symlink_placeholders,
+		const char *target,
+		const char *linkname) FAST_FUNC;
+void create_symlinks_from_list(llist_t *list) FAST_FUNC;
 
 void data_align(archive_handle_t *archive_handle, unsigned boundary) FAST_FUNC;
 const llist_t *find_list_entry(const llist_t *list, const char *filename) FAST_FUNC;
diff --git a/testsuite/tar.tests b/testsuite/tar.tests
index 6064296..692de90 100755
--- a/testsuite/tar.tests
+++ b/testsuite/tar.tests
@@ -269,7 +269,7 @@ optional UUDECODE FEATURE_TAR_AUTODETECT FEATURE_SEAMLESS_BZ2
 testing "tar does not extract into symlinks" "\
 >>/tmp/passwd && uudecode -o input && tar xf input 2>&1 && rm passwd; cat /tmp/passwd; echo \$?
 " "\
-tar: skipping unsafe symlink to '/tmp/passwd' in archive, set EXTRACT_UNSAFE_SYMLINKS=1 to extract
+tar: can't create symlink 'passwd' to '/tmp/passwd'
 0
 " \
 "" "\
@@ -294,9 +294,9 @@ ls symlink/bb_test_evilfile
 ' "\
 anything.txt
 symlink
-tar: skipping unsafe symlink to '/tmp' in archive, set EXTRACT_UNSAFE_SYMLINKS=1 to extract
 symlink/bb_test_evilfile
-0
+tar: can't create symlink 'symlink' to '/tmp'
+1
 ls: /tmp/bb_test_evilfile: No such file or directory
 ls: bb_test_evilfile: No such file or directory
 symlink/bb_test_evilfile
