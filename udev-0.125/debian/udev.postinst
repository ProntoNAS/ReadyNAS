#!/bin/sh -e

supported_kernel() {
  case "$(uname -r)" in
    2.[012345].*|2.6.[0-9]|2.6.[0-9][!0-9]*) return 1 ;;
    2.6.1[0-7]|2.6.1[0-7][!0-9]*) return 1 ;;
  esac
  return 0
}

tempdir() {
  local dir=$(tempfile --prefix=udev.)
  rm $dir
  mkdir $dir
  echo $dir
}

chrooted() {
  if [ "$(stat -c %d/%i /)" = "$(stat -Lc %d/%i /proc/1/root 2>/dev/null)" ];
  then
    # the devicenumber/inode pair of / is the same as that of /sbin/init's
    # root, so we're *not* in a chroot and hence return false.
    return 1
  fi
  echo "A chroot environment has been detected, udev not started."
  return 0
}

restart_udevd() {
  start-stop-daemon --stop --name udevd --oknodo --quiet --retry 5

  local rc=0
  udevd --daemon || rc=$?
  if [ $rc -ne 0 ]; then
    echo "Cannot start udevd. (rc=$rc)"
    return $rc
  fi
}

can_start_udevd() {
  if ! supported_kernel; then
    echo "udev requires a kernel >= 2.6.18, not started."
    return 1
  fi

  if [ ! -d /sys/class/ ]; then
    echo "udev requires a mounted sysfs, not started."
    return 1
  fi

  if [ ! -e /proc/sys/kernel/hotplug ]; then
    echo "udev requires hotplug support, not started."
    return 1
  fi

  if ! grep -q '[[:space:]]tmpfs$' /proc/filesystems; then
    echo "udev requires tmpfs support, not started."
    return 1
  fi

  if [ -e /etc/udev/disabled ]; then
    echo "/etc/udev/disabled has been detected, udev not started."
    return 1
  fi

  return 0
}

enable_udev() {
  can_start_udevd || return 0

  echo > /proc/sys/kernel/hotplug

  # create the directory which will hold our new /dev
  TEMPDEV=$(tempdir)

  export UDEV_ROOT=$TEMPDEV
  UDEV_RUN=no restart_udevd

  if ! mount -n -o size=10M,mode=0755 -t tmpfs tmpfs $TEMPDEV; then
    echo "Not enabling udev because the system lacks tmpfs support!"
    rm -f $TEMPDEV/.udev/uevent_seqnum
    rmdir $TEMPDEV/.udev/ 2> /dev/null || true
    return
  fi

  echo "Populating the new /dev filesystem temporarily mounted on $TEMPDEV/..."
  mkdir -p $TEMPDEV/.udev/db/ $TEMPDEV/.udev/queue/
  /lib/udev/create_static_nodes $TEMPDEV
  udevadm trigger

  # wait for the udevd children to finish
  udevadm settle || true

  for dir in pts shm; do
    [ -d /dev/$dir ] || continue
    mkdir -p $TEMPDEV/$dir
    if mountpoint -q /dev/$dir; then
      mount -n --move /dev/$dir $TEMPDEV/$dir
    fi
  done

  mount -n --move $TEMPDEV /dev

  # start the final daemon with the normal configuration
  unset UDEV_ROOT
  restart_udevd

  # XXX Some people reported that the directory was not empty.
  # This should fix the issue (udevd reopens the file for each event):
  rm -f $TEMPDEV/.udev/uevent_seqnum
  rmdir $TEMPDEV/.udev/ 2> /dev/null || true

  if ! rmdir $TEMPDEV; then
    echo "WARNING: $TEMPDEV is not empty!"
    ls -laR $TEMPDEV
  fi

  # restart some daemons because their /dev sockets have been hidden by
  # the tmpfs
  kill -s HUP 1
  local sysloginits="inetutils-syslogd metalog socklog-run sysklogd syslog-ng"
  for script in $sysloginits; do
    [ -x /etc/init.d/$script ] && invoke-rc.d $script restart || true
  done
}

update_initramfs() {
  [ -x /usr/sbin/update-initramfs -a -e /etc/initramfs-tools/initramfs.conf ] \
    || return 0
  update-initramfs -u
}

write_interfaces_rules() {
  local devpath
  for devpath in /sys/class/net/*; do
    INTERFACE=${devpath##*/} \
    udevadm test --action=add --subsystem=net $devpath > /dev/null || true
  done
}

case "$1" in
    configure)
    if [ -z "$2" ]; then # first install
      write_interfaces_rules
      if ! chrooted; then
	enable_udev
      fi
    else # upgrades
      if [ -e /etc/udev/run-write_net_rules ]; then
	[ -e /etc/udev/rules.d/70-persistent-net.rules ] ||
	  write_interfaces_rules
	rm /etc/udev/run-write_net_rules
      fi
      if ! chrooted; then
	if [ -e /etc/udev/kernel-upgrade ]; then
	  echo "Kernel upgrade mode, udevd has not been restarted."
	  echo "Please reboot the system as soon as possible."
	  rm /etc/udev/kernel-upgrade
	elif can_start_udevd; then
	  restart_udevd
	fi
      fi
    fi

    update_initramfs
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    interfaces)
    write_interfaces_rules
    ;;

    *)
    echo "$0 called with unknown argument '$1'" >&2
    exit 1
    ;;
esac

#DEBHELPER#

