#!/usr/bin/perl
# Bugger, we need to do some things like generate password hashes that
# we can't do from a shell without adding extra dependencies

use Debconf::Client::ConfModule ':all';
version("2.0");

$slapdconf	= "/etc/ldap/slapd.conf";

########################################################################
# Utility stuff

sub GenRandom {
	local ($len) = @_;
	local ($char, $data, @chars);
	@chars=split(//, "abcdefghijklmnopqrstuvwxyzaABCDEFGHIJKLMNOPQRSTUVWXYZA01234567890");

	open(RD, "</dev/urandom") or die "Failed to open random source";
	$data="";
	while ($len--) {
		die "Failed to read random data" if (read(RD, $char, 1)!=1);
		$data.=$chars[ord($char)%($#chars+1)];
	}

	close(RD);
	return $data;
}

########################################################################
# Initialize the database using a user supplied LDIF file

sub InitializeFromLdif() {
	local($file, $ok);

	$ok=0;
	while ($ok!=30) {
		beginblock;
		$ok=(input("medium", "slapd/ldif_file"))[0];
		input("medium", "slapd/internal/dn");
		input("medium", "slapd/internal/admin");
		endblock;
		go;
		$file=get("slapd/ldif_file");
		if ($ok!=30 and not -f $file) {
			fset("slapd/ldif_noexist", "seen", "false");
			subst("slapd/ldif_noexist", "ldif", $file);
			input("medium", "slapd/ldif_noexist");
			go;
		} else {
			$ok=30;
		}
	}
}


########################################################################
# Initialize the database using user input

sub InitializeFromInput() {
	local($type,$domain,$dn,$admin,$ret);

	input("medium", "slapd/suffix_type");
	go;
	$type=get("slapd/suffix_type");

	if ($type eq "domain or host") {
		if (fget("slapd/domain", "seen") eq "false") {
			chomp($domain=`hostname -f`);
			$domain=~s/[^.]+\.(.*)/\1/;
			set("slapd/domain", $domain);
		}
		input("medium", "slapd/domain");
		go;
		$dn="dc=" . join(",dc=", split(/\./, get("slapd/domain")));
		$admin="cn=admin,$dn";
	} elsif ($type eq "location") {
		beginblock;
		input("medium", "shared/locale/countrycode");
		input("medium", "shared/organization");
		endblock;
		go;
		$dn=sprintf("o=%s,c=%s",
			(get("shared/organization"))[1],
			(get("shared/locale/countrycode"))[1]);
		$admin="cn=admin,$dn";
	} else {
		input("medium", "slapd/custom_suffix");
		go;
		$dn=get("slapd/custom_suffix");
	}
	set("slapd/internal/dn", $dn);
	set("slapd/internal/admin", $admin);

	if (get("slapd/internal/adminpw") eq "") {
		beginblock;
		$ret=input("critical", "slapd/password1");
		input("critical", "slapd/password2");
		endblock;
		go;

		$pw1=get("slapd/password1");
		$pw2=get("slapd/password2");

		while ($ret!=30 and $pw1 ne $pw2) {
			fset("slapd/password_mismatch", "seen", "false");
			fset("slapd/password1", "seen", "false");
			fset("slapd/password2", "seen", "false");

			beginblock;
			input("critical", "slapd/password_mismatch");
			$ret=input("critical", "slapd/password1");
			input("critical", "slapd/password2");
			endblock;
			go;

			$pw1=get("slapd/password1");
			$pw2=get("slapd/password2");
		}

		set("slapd/password1", "");
		set("slapd/password2", "");

		if ($pw1 eq "") {
			$pw1=GenRandom(8);
			fset("slapd/no_password", "seen", "false");
			subst("slapd/no_password", "password", $pw1);
			input("critical", "slapd/no_password");
			go;
		}

		$pw1="{CRYPT}" . crypt($pw1, GenRandom(2));
		set("slapd/internal/adminpw", $pw1);
	}
}

########################################################################
# Configure replication via slurp
#

sub InitializeSlurp() {
	local ($do);

	input("medium", "slapd/replicate");
	go;

	$do=get("slapd/replicate");

	return if ($do ne "true");
	
	beginblock;
	input("medium", "slapd/slurpd/host");
	input("low", "slapd/slurpd/port");
	input("medium", "slapd/slurpd/binddn");
	input("medium", "slapd/slurpd/credentials");
	endblock;
	go;
}

########################################################################
# Main loop

if (-f $slapdconf) {
	subst("slapd/conf_exists", "conf", $slapdconf);
	input("low", "slapd/conf_exists");
	go;
	exit 0;
}

title("OpenLDAP configuration");
input("medium", "slapd/fill_method");
go;

$tst=get("slapd/fill_method");
if ($tst eq "auto") {
	InitializeFromInput();
} else {
	InitializeFromLdif();
}

InitializeSlurp();
stop;

