From 4ca48b2b688b135c0390f54ea9077ef10aedd52c Mon Sep 17 00:00:00 2001
From: uros <uros@138bc75d-0d04-0410-961f-82ee72b054a4>
Date: Thu, 25 Jan 2018 19:39:01 +0000
Subject: [PATCH] Use INVALID_REGNUM in indirect thunk processing

	Backport from mainline
	2018-01-17  Uros Bizjak  <ubizjak@gmail.com>

	* config/i386/i386.c (indirect_thunk_name): Declare regno
	as unsigned int.  Compare regno with INVALID_REGNUM.
	(output_indirect_thunk): Ditto.
	(output_indirect_thunk_function): Ditto.
	(ix86_code_end): Declare regno as unsigned int.  Use INVALID_REGNUM
	in the call to output_indirect_thunk_function.

git-svn-id: svn+ssh://gcc.gnu.org/svn/gcc/branches/gcc-7-branch@257067 138bc75d-0d04-0410-961f-82ee72b054a4
---
 gcc/config/i386/i386.c | 26 +++++++++++++-------------
 1 file changed, 13 insertions(+), 13 deletions(-)

diff --git a/src/gcc/config/i386/i386.c b/src/gcc/config/i386/i386.c
index 0231ef838db..b6f2f6090d7 100644
--- a/src/gcc/config/i386/i386.c
+++ b/src/gcc/config/i386/i386.c
@@ -9216,14 +9216,14 @@ static int indirect_thunks_used;
 /* Fills in the label name that should be used for the indirect thunk.  */
 
 static void
-indirect_thunk_name (char name[32], int regno, bool ret_p)
+indirect_thunk_name (char name[32], unsigned int regno, bool ret_p)
 {
-  if (regno >= 0 && ret_p)
+  if (regno != INVALID_REGNUM && ret_p)
     gcc_unreachable ();
 
   if (USE_HIDDEN_LINKONCE)
     {
-      if (regno >= 0)
+      if (regno != INVALID_REGNUM)
 	{
 	  const char *reg_prefix;
 	  if (!REX_INT_REGNO_P (regno))
@@ -9241,7 +9241,7 @@ indirect_thunk_name (char name[32], int regno, bool ret_p)
     }
   else
     {
-      if (regno >= 0)
+      if (regno != INVALID_REGNUM)
 	ASM_GENERATE_INTERNAL_LABEL (name, "LITR", regno);
       else
 	{
@@ -9278,7 +9278,7 @@ indirect_thunk_name (char name[32], int regno, bool ret_p)
  */
 
 static void
-output_indirect_thunk (int regno)
+output_indirect_thunk (unsigned int regno)
 {
   char indirectlabel1[32];
   char indirectlabel2[32];
@@ -9305,7 +9305,7 @@ output_indirect_thunk (int regno)
 
   ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, indirectlabel2);
 
-  if (regno >= 0)
+  if (regno != INVALID_REGNUM)
     {
       /* MOV.  */
       rtx xops[2];
@@ -9326,11 +9326,11 @@ output_indirect_thunk (int regno)
 }
 
 /* Output a funtion with a call and return thunk for indirect branch.
-   If REGNO != -1,  the function address is in REGNO.  Otherwise, the
-   function address is on the top of stack.  */
+   If REGNO != INVALID_REGNUM, the function address is in REGNO.
+   Otherwise, the function address is on the top of stack.  */
 
 static void
-output_indirect_thunk_function (int regno)
+output_indirect_thunk_function (unsigned int regno)
 {
   char name[32];
   tree decl;
@@ -9379,7 +9379,7 @@ output_indirect_thunk_function (int regno)
 	ASM_OUTPUT_LABEL (asm_out_file, name);
       }
 
-  if (regno < 0)
+  if (regno == INVALID_REGNUM)
     {
       /* Create alias for __x86_return_thunk.  */
       char alias[32];
@@ -9453,14 +9453,14 @@ static void
 ix86_code_end (void)
 {
   rtx xops[2];
-  int regno;
+  unsigned int regno;
 
   if (indirect_thunk_needed)
-    output_indirect_thunk_function (-1);
+    output_indirect_thunk_function (INVALID_REGNUM);
 
   for (regno = FIRST_REX_INT_REG; regno <= LAST_REX_INT_REG; regno++)
     {
-      int i = regno - FIRST_REX_INT_REG + SP_REG + 1;
+      unsigned int i = regno - FIRST_REX_INT_REG + SP_REG + 1;
       if ((indirect_thunks_used & (1 << i)))
 	output_indirect_thunk_function (regno);
     }
-- 
2.11.0

