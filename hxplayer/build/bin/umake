#!/usr/bin/env python
# -*- Mode: Python -*-
# 
# ***** BEGIN LICENSE BLOCK *****
# Source last modified: $Id: umake,v 1.1.1.1 2006/03/29 16:45:39 hagi Exp $
# 
# Portions Copyright (c) 1995-2004 RealNetworks, Inc. All Rights Reserved.
# 
# The contents of this file, and the files included with this file,
# are subject to the current version of the RealNetworks Public
# Source License (the "RPSL") available at
# http://www.helixcommunity.org/content/rpsl unless you have licensed
# the file under the current version of the RealNetworks Community
# Source License (the "RCSL") available at
# http://www.helixcommunity.org/content/rcsl, in which case the RCSL
# will apply. You may also obtain the license terms directly from
# RealNetworks.  You may not use this file except in compliance with
# the RPSL or, if you have a valid RCSL with RealNetworks applicable
# to this file, the RCSL.  Please see the applicable RPSL or RCSL for
# the rights, obligations and limitations governing use of the
# contents of the file.
# 
# Alternatively, the contents of this file may be used under the
# terms of the GNU General Public License Version 2 or later (the
# "GPL") in which case the provisions of the GPL are applicable
# instead of those above. If you wish to allow use of your version of
# this file only under the terms of the GPL, and not to allow others
# to use your version of this file under the terms of either the RPSL
# or RCSL, indicate your decision by deleting the provisions above
# and replace them with the notice and other provisions required by
# the GPL. If you do not delete the provisions above, a recipient may
# use your version of this file under the terms of any one of the
# RPSL, the RCSL or the GPL.
# 
# This file is part of the Helix DNA Technology. RealNetworks is the
# developer of the Original Code and owns the copyrights in the
# portions it created.
# 
# This file, and the files included with this file, is distributed
# and made available on an 'AS IS' basis, WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESS OR IMPLIED, AND REALNETWORKS HEREBY DISCLAIMS
# ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET
# ENJOYMENT OR NON-INFRINGEMENT.
# 
# Technology Compatibility Kit Test Suite(s) Location:
#    http://www.helixcommunity.org/content/tck
# 
# Contributor(s):
# 
# ***** END LICENSE BLOCK *****
# 

"""Bootstrap script for Umake."""

import os
import sys
import getopt

## Bootstrap the Macintosh
if sys.platform == 'mac':
    import macfs
    import MACFS

    ## execute the RMA Build Prefs file
    vrefnum, curdir = macfs.FindFolder(
                MACFS.kOnAppropriateDisk,
                MACFS.kPreferencesFolderType,
                0)
    fss = macfs.FSSpec((vrefnum, curdir, 'RMA Build Prefs'))
    filename = fss.as_pathname()
    execfile(filename, globals(), locals())

    ## Change to the right directory
    (path, junk) = os.path.split(sys.argv[len(sys.argv)-1])
    os.chdir(path)

    buildtype = '0' 
    x = ''
    
    if os.environ.has_key('DEFAULT_UMAKECHOICE'):
            buildtype = os.environ['DEFAULT_UMAKECHOICE']
            
    if buildtype == '0':
            print 'UMAKE Mac'
            print 'Please choose from one of the following command lines.  Or just hit enter to build as debug.'
            print '1. Release'
            print '2. Debug'
            print '3. Uber-Debug (does not build project)'
            x = raw_input('>')
            
    if x == '1':
        buildtype = '1'
    if x == '3':
        buildtype = '3'
            
    if buildtype=='1':
            sys.argv.insert(1,'-t')
            sys.argv.insert(2,'release')

    if buildtype=='3':
            sys.argv.insert(1,'-t')
            sys.argv.insert(2,'uber')

## CHECK ENVIRONMENT VARIABLES
## BUILD_ROOT
if not os.environ.has_key('BUILD_ROOT'):
    print 'You need to add BUILD_ROOT to your environment.'
    sys.exit(1)

if not os.path.isdir(os.environ['BUILD_ROOT']):
    print 'Invalid BUILD_ROOT %s' % (os.environ['BUILD_ROOT'])


## add Python import paths
build_root = os.environ['BUILD_ROOT']
sys.path.insert(0, os.path.join(build_root, 'lib'))
sys.path.insert(0, os.path.join(build_root, 'umake'))

if sys.platform == 'darwin':
   import string
   if string.find(os.environ.get("SYSTEM_ID",""),"-cw") != -1:
       import macemu

# Turn on new-style logging.
# Places logs into build_logs folder under the working directory
# from where umake is called.
import log
logdir     = os.path.join(os.getcwd(),'build_logs')
identifier = 'umake'
log.initLogging(logdir, identifier)

## run the build system
import umakeui

umakeui.run()

#import profile
#profile.run('umakeui.run()', 'umakeprof')
#import pstats
#p = pstats.Stats('umakeprof')
#p.sort_stats('time').print_stats(30)


