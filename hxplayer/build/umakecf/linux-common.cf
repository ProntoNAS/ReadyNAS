# -*- python -*-
# 
# ***** BEGIN LICENSE BLOCK *****
# Source last modified: $Id: linux-common.cf,v 1.1.1.1 2006/03/29 16:45:39 hagi Exp $
# 
# Portions Copyright (c) 1995-2004 RealNetworks, Inc. All Rights Reserved.
# 
# The contents of this file, and the files included with this file,
# are subject to the current version of the RealNetworks Public
# Source License (the "RPSL") available at
# http://www.helixcommunity.org/content/rpsl unless you have licensed
# the file under the current version of the RealNetworks Community
# Source License (the "RCSL") available at
# http://www.helixcommunity.org/content/rcsl, in which case the RCSL
# will apply. You may also obtain the license terms directly from
# RealNetworks.  You may not use this file except in compliance with
# the RPSL or, if you have a valid RCSL with RealNetworks applicable
# to this file, the RCSL.  Please see the applicable RPSL or RCSL for
# the rights, obligations and limitations governing use of the
# contents of the file.
# 
# Alternatively, the contents of this file may be used under the
# terms of the GNU General Public License Version 2 or later (the
# "GPL") in which case the provisions of the GPL are applicable
# instead of those above. If you wish to allow use of your version of
# this file only under the terms of the GPL, and not to allow others
# to use your version of this file under the terms of either the RPSL
# or RCSL, indicate your decision by deleting the provisions above
# and replace them with the notice and other provisions required by
# the GPL. If you do not delete the provisions above, a recipient may
# use your version of this file under the terms of any one of the
# RPSL, the RCSL or the GPL.
# 
# This file is part of the Helix DNA Technology. RealNetworks is the
# developer of the Original Code and owns the copyrights in the
# portions it created.
# 
# This file, and the files included with this file, is distributed
# and made available on an 'AS IS' basis, WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESS OR IMPLIED, AND REALNETWORKS HEREBY DISCLAIMS
# ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET
# ENJOYMENT OR NON-INFRINGEMENT.
# 
# Technology Compatibility Kit Test Suite(s) Location:
#    http://www.helixcommunity.org/content/tck
# 
# Contributor(s):
# 
# ***** END LICENSE BLOCK *****
# 
"""Common base for libc6 GNU/Linux systems."""

exec_config_file('unix.cf')
exec_config_file('gcc.cf')

## change platform.name to linux2 in cases of broken Python
platform.name = 'linux2'

## platform defines 
project.AddDefines('_LINUX', '_REENTRANT', '_RED_HAT_5_X_')

## Add XVideo overlay define by default. This is only used in the X11 based
## video sitelib.
project.AddDefines('HELIX_CONFIG_XVIDEO')

if project.build_choices.count("use_iostreams"):
    project.AddDefines("_HAS_IOSTREAMS")

##Overriding FD_SETSIZE this way isn't supported on Linux:
for define in project.defines[:]:
    if define[:10] == 'FD_SETSIZE':
        project.RemoveDefines(define)

make_toc = platform.make_toc
make_toc.cmd = 'ranlib'
make_toc.make_var = 'RANLIB'

make_lib = platform.make_lib
make_lib.cmd = '%s cr ' % os.path.join(os.environ["BUILD_ROOT"],"bin","pyar")
make_lib.make_var = 'MAKE_LIB'
make_lib.make_flags = 'MAKE_LIB_FLAGS'

## include path for X11R6 on Linux
project.AddIncludes('/usr/X11R6/include')
project.AddSystemPaths('-L/usr/X11R6/lib')

## LessTif/Motif root defined with environment variable XMROOT
if os.environ.has_key('XMROOT'):
    project.AddIncludes('%s/include' % (os.environ['XMROOT']))
    project.AddSystemPaths('-L%s/lib' % (os.environ['XMROOT']))


def compile_mkdepend():
     x=os.path.join(BUILD_ROOT,"bin","mkdepend.bin")
     s=os.path.join(BUILD_ROOT,"lib","mkdepend.c")
     if umake_lib.mtime(x) < umake_lib.mtime(s):
         import shell
         cmd="%s -O2 -o %s %s" % (cc.cmd, x, s)
         print "Recompling mkdepend: %s" % cmd
         print shell.run(cmd)[1]
     else:
         print "mkdepend.bin is up to date"

AddIdentifyCallback(compile_mkdepend)

class LinuxMakeDepend(MakeDepend):
    def execute(self, sources, output_dir):
        list = []
        if project.object_dir:
            list.append("-t%s" % (project.object_dir))
        list.append("-m%s" % (project.makefile_name))

        cmd = "%s --gnumake %s %s %s" % (
            os.path.join(os.environ["BUILD_ROOT"],"bin","mkdepend.bin"),
            string.join(list),
            platform.form_var("INCLUDES"),
            sources)

        return cmd      

    def setup_flags_var(self):
        return ""

platform.make_dep = LinuxMakeDepend()
