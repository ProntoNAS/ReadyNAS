# 
# ***** BEGIN LICENSE BLOCK *****
# Source last modified: $Id: hpux-11.0-parisc-client.cf,v 1.1.1.1 2006/03/29 16:45:39 hagi Exp $
# 
# Portions Copyright (c) 1995-2004 RealNetworks, Inc. All Rights Reserved.
# 
# The contents of this file, and the files included with this file,
# are subject to the current version of the RealNetworks Public
# Source License (the "RPSL") available at
# http://www.helixcommunity.org/content/rpsl unless you have licensed
# the file under the current version of the RealNetworks Community
# Source License (the "RCSL") available at
# http://www.helixcommunity.org/content/rcsl, in which case the RCSL
# will apply. You may also obtain the license terms directly from
# RealNetworks.  You may not use this file except in compliance with
# the RPSL or, if you have a valid RCSL with RealNetworks applicable
# to this file, the RCSL.  Please see the applicable RPSL or RCSL for
# the rights, obligations and limitations governing use of the
# contents of the file.
# 
# Alternatively, the contents of this file may be used under the
# terms of the GNU General Public License Version 2 or later (the
# "GPL") in which case the provisions of the GPL are applicable
# instead of those above. If you wish to allow use of your version of
# this file only under the terms of the GPL, and not to allow others
# to use your version of this file under the terms of either the RPSL
# or RCSL, indicate your decision by deleting the provisions above
# and replace them with the notice and other provisions required by
# the GPL. If you do not delete the provisions above, a recipient may
# use your version of this file under the terms of any one of the
# RPSL, the RCSL or the GPL.
# 
# This file is part of the Helix DNA Technology. RealNetworks is the
# developer of the Original Code and owns the copyrights in the
# portions it created.
# 
# This file, and the files included with this file, is distributed
# and made available on an 'AS IS' basis, WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESS OR IMPLIED, AND REALNETWORKS HEREBY DISCLAIMS
# ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET
# ENJOYMENT OR NON-INFRINGEMENT.
# 
# Technology Compatibility Kit Test Suite(s) Location:
#    http://www.helixcommunity.org/content/tck
# 
# Contributor(s):
# 
# ***** END LICENSE BLOCK *****
# 
"""HP/UX 11.0 using native compier aCC: HP ANSI C++ B3910B A.03.25, and
special settings for building the RealPlayer client."""

exec_config_file('unix.cf')

## list of PCF files to run
platform.pcf_prefix_list = ['unix', 'hp-uxB']

## defines
project.AddDefines("_HPUX")
project.AddDefines("_NO_SETENV")
project.AddDefines("_REENTRANT")
project.AddDefines("_STRICT_ALIGNMENT")
project.AddDefines("__inline=inline")

## HP/UX defines _BIG_ENDIAN in its header files, so keep this
## commented out
## project.AddDefines("_BIG_ENDIAN")

## Turn on Threaded Network IO 
project.AddDefines('_UNIX_THREADED_NETWORK_IO')

## This define enables compiling of the UnixThreads file.
## It means that that platform has a working threads lib
## that does everything we need.
project.AddDefines('_UNIX_THREADS_SUPPORTED')

## compiler
platform.cc = Compiler()
platform.cxx = Compiler()

cc = platform.cc
cc.cmd = '/bin/cc'
cc.args['default'] = '+Z -z -w +inline_level3 -Wp,-H,30000 +DAportable'
cc.args['debug'] = '+Oinfo -g -DDEBUG -D_DEBUG +W925 -H30000'
cc.args['release'] = '+O2 -s'
cc.args['exe'] = ''
cc.source_arg = '-c'
cc.define_arg = '-D'
cc.include_arg = '-I'
cc.source_arg = '-c'
cc.target_arg = '-o '
cc.make_var = 'CC'
cc.make_flags = 'CCFLAGS'

cxx = platform.cxx
cxx.cmd = '/opt/aCC/bin/aCC'
cxx.args['default'] = '+Z -z -w +DA2.0 +DS2.0'
cxx.args['release'] = '+O2 -s'
cxx.args['debug'] = '+Oinfo +Onoinline -g0 +d -DDEBUG -D_DEBUG +W925'
cxx.args['exe'] = ''
cxx.define_arg = '-D'
cxx.include_arg = '-I'
cxx.source_arg = '-c'
cxx.target_arg = '-o '
cxx.make_var = 'CXX'
cxx.make_flags = 'CXXFLAGS'

## compile assembly files
platform.build_rules[".s"] = BuildRule(".s", ".o", platform.cc)

make_toc = platform.make_toc
make_toc.cmd = 'ranlib'
make_toc.make_var = 'RANLIB'

make_lib = platform.make_lib
make_lib.cmd = '/usr/ccs/bin/ar cr '
make_lib.make_var = 'MAKE_LIB'
make_lib.make_flags = 'MAKE_LIB_FLAGS'


class GXXLinker(Linker):
        def __init__(self):
                Linker.__init__(self)
                self.make_var = 'LD'
                self.make_flags = 'LDFLAGS'
                self.args['default'] = '-L' + \
                                       os.path.join(platform.x_root_dir, 'lib')
                self.args['profile'] = '-G'
                self.args['static'] = ''
                self.args['debug'] = '-g0'
                self.args['release'] = ''
                self.target_arg = '-o'
                self.ldcmd = 'aCC'
                self.ldargs = '+DA2.0'
                self.system_paths = ""
        def execute(self, target, objects, static_libs, dynamic_libs):
                if (project.target_type != 'dll'):
                        link_str = platform.form_var(self.make_var) + ' ' + \
                                   platform.form_var(self.make_flags) + ' ' + \
                                   self.target_arg + ' ' + target + ' ' + \
                                   objects + ' ' + dynamic_libs + ' ' + \
                                   static_libs + \
                                   ' -ldld '
                else:
                        if project.target_type == "dll" and \
                                len(project.exported_func) == 0:
                                umake_lib.fatal("no exported symbols for target %s" % (project.target_name)) 
                        project.exported_func.append("_shlInit")
                        project.exported_func.append("__shlInit")
                        project.exported_func.append("__shlinit")
                        project.exported_func.append("noshlibs")

                        link_str = platform.form_var(self.make_var) + ' ' + \
                                   platform.form_var(self.make_flags) + ' ' + \
                                   self.target_arg + ' ' + target + ' ' + \
                                   objects + ' ' + dynamic_libs + \
                                   static_libs
                                   #string.join(map(lambda x: " -Wl,+e" + x, project.exported_func)) + " " + \
                return link_str
        def set_type(self):
                ## in order to specify non-system library paths use the
                ## project.system_paths list
                for item in project.system_paths:
                    self.system_paths = self.system_paths + ' ' + item
                if (project.target_type != 'dll'):
                        self.cmd = 'aCC'
                        self.args['default'] = self.ldargs + ' ' + self.system_paths
                else:
                        self.cmd = self.ldcmd
                        self.args['default'] = self.ldargs + ' -b -Wl,-Bsymbolic ' \
                                               + self.system_paths

platform.link = GXXLinker()


