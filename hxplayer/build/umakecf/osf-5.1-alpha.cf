# 
# ***** BEGIN LICENSE BLOCK *****
# Source last modified: $Id: osf-5.1-alpha.cf,v 1.1.1.1 2006/03/29 16:45:39 hagi Exp $
# 
# Portions Copyright (c) 1995-2004 RealNetworks, Inc. All Rights Reserved.
# 
# The contents of this file, and the files included with this file,
# are subject to the current version of the RealNetworks Public
# Source License (the "RPSL") available at
# http://www.helixcommunity.org/content/rpsl unless you have licensed
# the file under the current version of the RealNetworks Community
# Source License (the "RCSL") available at
# http://www.helixcommunity.org/content/rcsl, in which case the RCSL
# will apply. You may also obtain the license terms directly from
# RealNetworks.  You may not use this file except in compliance with
# the RPSL or, if you have a valid RCSL with RealNetworks applicable
# to this file, the RCSL.  Please see the applicable RPSL or RCSL for
# the rights, obligations and limitations governing use of the
# contents of the file.
# 
# Alternatively, the contents of this file may be used under the
# terms of the GNU General Public License Version 2 or later (the
# "GPL") in which case the provisions of the GPL are applicable
# instead of those above. If you wish to allow use of your version of
# this file only under the terms of the GPL, and not to allow others
# to use your version of this file under the terms of either the RPSL
# or RCSL, indicate your decision by deleting the provisions above
# and replace them with the notice and other provisions required by
# the GPL. If you do not delete the provisions above, a recipient may
# use your version of this file under the terms of any one of the
# RPSL, the RCSL or the GPL.
# 
# This file is part of the Helix DNA Technology. RealNetworks is the
# developer of the Original Code and owns the copyrights in the
# portions it created.
# 
# This file, and the files included with this file, is distributed
# and made available on an 'AS IS' basis, WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESS OR IMPLIED, AND REALNETWORKS HEREBY DISCLAIMS
# ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET
# ENJOYMENT OR NON-INFRINGEMENT.
# 
# Technology Compatibility Kit Test Suite(s) Location:
#    http://www.helixcommunity.org/content/tck
# 
# Contributor(s):
# 
# ***** END LICENSE BLOCK *****
# 
"""Compaq Tru64 UNIX (formerly Digital UNIX) 5.1, using the native
compiler."""

exec_config_file('unix.cf')

## list of PCF files to run
platform.pcf_prefix_list = ['unix', 'osf1V5']

project.AddDefines(
        '_OSF1',
        '_NATIVE_COMPILER',
        '_LITTLE_ENDIAN',
        '_LONG_IS_64',
        '_STRICT_ALIGNMENT',
        '_REENTRANT')

platform.cc = Compiler()
platform.cxx = Compiler()
cc = platform.cc
cc.cmd = 'cc'
cc.args['release'] = ' -arch ev56 -fast'
cc.args['default'] = ' -O2 '
cc.args['debug'] = '-gall -DDEBUG -D_DEBUG '
cc.args['dll'] = ''
cc.source_arg
cc.define_arg = '-D'
cc.include_arg = '-I'
cc.source_arg = '-c'
cc.target_arg = '-o '
cc.make_var = 'CC'
cc.make_flags = 'CCFLAGS'
platform.command_list.append(cc)

cxx = platform.cxx
cxx.cmd = 'cxx'
cxx.args['default'] = ' -O2 '
cxx.args['release'] = ' -arch ev56'
cxx.args['debug'] = ' -gall -DDEBUG  -D_DEBUG '
cxx.args['dll'] = ''
cxx.define_arg = '-D'
cxx.include_arg = '-I'
cxx.source_arg = '-c'
cxx.target_arg = '-o '
cxx.make_var = 'CXX'
cxx.make_flags = 'CXXFLAGS'
platform.command_list.append(cxx)

class GXXLinker(Linker):
        def __init__(self):
                Linker.__init__(self)
                self.make_var = 'LD'
                self.make_flags = 'LDFLAGS'
                self.args['static'] = '-static'
                self.target_arg = '-o '

        #
        # XXXPSH This isn't handling static_libs and dynammic_libs
        # correctly
        #
        def execute(self, target, objects, static_libs, dynamic_libs):
                if (project.target_type != 'dll'):
                        link_str = platform.form_var(self.make_var) + ' ' + \
                                   platform.form_var(self.make_flags) + ' ' + \
                                   self.target_arg + target + ' ' + \
                                   objects + ' ' + dynamic_libs + ' ' + \
                                   static_libs
                else:
                        link_str = platform.form_var(self.make_var) + ' ' + \
                                   platform.form_var(self.make_flags) + ' ' + \
                                   self.target_arg + ' ' + target + ' ' + \
                                   objects + ' ' + dynamic_libs + " " +\
                                   static_libs
                return link_str
        def set_type(self):
                if (project.target_type != 'dll'):
                        self.cmd = 'cxx -O2 '
                else:
                        self.cmd = 'cxx -shared -O2 '
                        #self.args['default'] = ' -B symbolic '


platform.link = GXXLinker()

make_lib = platform.make_lib
make_lib.cmd = 'ar cr '
make_lib.make_var = 'MAKE_LIB'
make_lib.make_flags = 'MAKE_LIB_FLAGS'


