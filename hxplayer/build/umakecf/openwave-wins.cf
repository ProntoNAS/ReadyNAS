# -*- python -*-
#
# ***** BEGIN LICENSE BLOCK *****
# Source last modified: $Id: openwave-wins.cf,v 1.1.1.1 2006/03/29 16:45:39 hagi Exp $
# 
# Portions Copyright (c) 1995-2004 RealNetworks, Inc. All Rights Reserved.
# 
# The contents of this file, and the files included with this file,
# are subject to the current version of the RealNetworks Public
# Source License (the "RPSL") available at
# http://www.helixcommunity.org/content/rpsl unless you have licensed
# the file under the current version of the RealNetworks Community
# Source License (the "RCSL") available at
# http://www.helixcommunity.org/content/rcsl, in which case the RCSL
# will apply. You may also obtain the license terms directly from
# RealNetworks.  You may not use this file except in compliance with
# the RPSL or, if you have a valid RCSL with RealNetworks applicable
# to this file, the RCSL.  Please see the applicable RPSL or RCSL for
# the rights, obligations and limitations governing use of the
# contents of the file.
# 
# Alternatively, the contents of this file may be used under the
# terms of the GNU General Public License Version 2 or later (the
# "GPL") in which case the provisions of the GPL are applicable
# instead of those above. If you wish to allow use of your version of
# this file only under the terms of the GPL, and not to allow others
# to use your version of this file under the terms of either the RPSL
# or RCSL, indicate your decision by deleting the provisions above
# and replace them with the notice and other provisions required by
# the GPL. If you do not delete the provisions above, a recipient may
# use your version of this file under the terms of any one of the
# RPSL, the RCSL or the GPL.
# 
# This file is part of the Helix DNA Technology. RealNetworks is the
# developer of the Original Code and owns the copyrights in the
# portions it created.
# 
# This file, and the files included with this file, is distributed
# and made available on an 'AS IS' basis, WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESS OR IMPLIED, AND REALNETWORKS HEREBY DISCLAIMS
# ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET
# ENJOYMENT OR NON-INFRINGEMENT.
# 
# Technology Compatibility Kit Test Suite(s) Location:
#    http://www.helixcommunity.org/content/tck
# 
# Contributor(s):
# 
# ***** END LICENSE BLOCK *****
# 
"""Openwave Client7.0 SDK Win32 Simulator using VC++ 6.0 VC Service pack 5."""

##exec_config_file('win32.cf')
##
#### list of PCF files to run
##platform.pcf_prefix_list = ['openwave', 'win', 'win32', 'win32-vc6']
##
#### WIN32 Defines
###project.AddDefines( "THREADS_SUPPORTED", "_M_IX86", "_LITTLE_ENDIAN")
##project.AddDefines("_M_IX86", "_LITTLE_ENDIAN", "_OPENWAVE", "_OPENWAVE_SIMULATOR")
##
#### additional includes
##project.AddModuleIncludes("stlport")
##project.AddModuleIncludes("common/import/stlport")

exec_config_file('openwave.cf')
exec_config_file('win-versioning.cf')
exec_config_file('win32-msvc.cf')

## list of PCF files to run
platform.pcf_prefix_list = platform.pcf_prefix_list + ['openwave-wins']

# NOTE: Openwave-required defines are generated using
#       their jam-based build tools and put in a
#       "op_predefined.h" file in their include/ dir.
project.AddDefines('_OPENWAVE_SIMULATOR')

# we cannot define _M_IX86 because it implies MMX
# optimization in some of our codes, particularly, 
# codec module. When some WINDOWS header needs, 
# define it _M_IX86=500 in the corresponding wrapper
# header file. 
# project.AddDefines('_M_IX86=300')

## We'll tell the compiler to not define its pre-defined symbols, but we
## need SOMETHING to tell that we're using MSVC..
project.AddDefines('_MSC_VER=1200')     # MS Dev Studio 6.0

## Palm Defines
if project.BuildOption("debug"):
    project.AddDefines("_DEBUG", "DEBUG")

## instance Window compiler object
platform.cc = WinCompiler()
platform.cxx = WinCompiler()

cc = platform.cc
cxx = platform.cxx

cxx.cmd = cc.cmd = 'cl'
cxx.source_arg = cc.source_arg = '/c '
cxx.target_arg = cc.target_arg = '/Fo'
cxx.make_var = cc.make_var = 'CC'
cxx.make_flags = 'CXXFLAGS'
cc.make_flags = 'CCFLAGS'
cxx.include_arg = cc.include_arg = '/I'

## Assumes we have a recent enough MSVC to support this.
## Major speedup (don't ask me why it's so much faster...)
cc.prefix_include_arg = '/FI'
cxx.prefix_include_arg = '/FI'

## additional includes
project.AddIncludes('%s' % os.path.join(GetSDKPath('OPENWAVE_SDK'),
                                          'include'))

## define base arguments for build modes

# It's important not to accidentally get the standard MSVC includes in
# here, so we ought to add /X to make sure we don't get MS include dirs,
# but the Openwave .h files need some of them.  So, we don't put /X here
# and make sure that we include our own wrapper headers that define
# whatever's needed to successfully include the MSVC headers
# (e.g. _WIN32).

cxx.args['default'] = '/nologo /u /Zp1 /Zm200 /W3 /GX- /GR-'
cc.args['default'] = '/nologo /u /Zp1 /Zm200 /W3 /GX- /GR-'
cxx.args['debug'] = cc.args['debug'] = '/Od /GZ'

if not project.BuildOption('disable_op_predefined'):
    cxx.args['default'] = '%s /FI%s' % (cxx.args['default'],
                                        os.path.join(GetSDKPath('OPENWAVE_SDK'),
                                                     'include', 'op_predefined.h'))
    cc.args['default'] = '%s /FI%s' % (cc.args['default'],
                                       os.path.join(GetSDKPath('OPENWAVE_SDK'),
                                                    'include', 'op_predefined.h'))

## no_optimize: no optimization on release builds
if project.BuildOption('no_optimize'):
    cc.args['release'] = ''
else:
    cc.args['release'] = '/O2'

## no_optimize: no optimization on release builds
if project.BuildOption('nt_stackframe'):
    cc.args['release'] = ''
else:
    cc.args['release'] = '/O2 /Oy-'

if project.IsDefined('BUILD_MFCDLL'):
    project.AddDefines('_AFXDLL')
    cc.args['release'] = cc.args['release'] + ' /MD'
    cc.args['debug'] = cc.args['debug'] + ' /MDd'

## symbols: add symbols to release builds
if project.BuildOption('symbols') and not project.BuildOption('pdb'):
    cc.args['release'] = '%s /Z7' % (cc.args['release'])

cxx.args['release'] = cc.args['release']

## symbols: keep symbols in release builds
if project.BuildOption('symbols'):
    platform.link.args['release'] = platform.link.args['release'] + ' /debug'

## target paths
project.target_dir = os.path.join(project.target_dir, 'sim')
project.output_dir = '%ssim' % project.output_dir
