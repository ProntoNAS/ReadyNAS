# -*- python -*-
#
# ***** BEGIN LICENSE BLOCK *****
# Source last modified: $Id: symbian-armv5.cf,v 1.1.1.1 2006/03/29 16:45:39 hagi Exp $
# 
# Portions Copyright (c) 1995-2004 RealNetworks, Inc. All Rights Reserved.
# 
# The contents of this file, and the files included with this file,
# are subject to the current version of the RealNetworks Public
# Source License (the "RPSL") available at
# http://www.helixcommunity.org/content/rpsl unless you have licensed
# the file under the current version of the RealNetworks Community
# Source License (the "RCSL") available at
# http://www.helixcommunity.org/content/rcsl, in which case the RCSL
# will apply. You may also obtain the license terms directly from
# RealNetworks.  You may not use this file except in compliance with
# the RPSL or, if you have a valid RCSL with RealNetworks applicable
# to this file, the RCSL.  Please see the applicable RPSL or RCSL for
# the rights, obligations and limitations governing use of the
# contents of the file.
# 
# Alternatively, the contents of this file may be used under the
# terms of the GNU General Public License Version 2 or later (the
# "GPL") in which case the provisions of the GPL are applicable
# instead of those above. If you wish to allow use of your version of
# this file only under the terms of the GPL, and not to allow others
# to use your version of this file under the terms of either the RPSL
# or RCSL, indicate your decision by deleting the provisions above
# and replace them with the notice and other provisions required by
# the GPL. If you do not delete the provisions above, a recipient may
# use your version of this file under the terms of any one of the
# RPSL, the RCSL or the GPL.
# 
# This file is part of the Helix DNA Technology. RealNetworks is the
# developer of the Original Code and owns the copyrights in the
# portions it created.
# 
# This file, and the files included with this file, is distributed
# and made available on an 'AS IS' basis, WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESS OR IMPLIED, AND REALNETWORKS HEREBY DISCLAIMS
# ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET
# ENJOYMENT OR NON-INFRINGEMENT.
# 
# Technology Compatibility Kit Test Suite(s) Location:
#    http://www.helixcommunity.org/content/tck
# 
# Contributor(s):
# 
# ***** END LICENSE BLOCK *****
# 
"""Generic symbian armv5 .cf file. Common stuff to all symbian armv5 builds."""

exec_config_file('symbian.cf')

platform.include_arg = '-I'
platform.define_arg = '-D'
platform.object_suffix = 'o'
platform.shared_object_suffix = 'o'
platform.path_sep = '/'

## Symbian PCF file list
platform.pcf_prefix_list[-1:-1] = ['symbian-armv5']

## Turn these on for device builds.
project.AddDefines( '__MARM_ARMV5__',
                    '__MARM_INTERWORK__',
                    '__ARMCC__',
                    '__EPOC32__',
                    '__MARM__',
                    '_EPOC',
                    '__EABI__',
                    'ARM_ADS',
                    '_ARM_',
                    '__ARMCC_2__',
                    '__ARMCC_2_2__',
                    '_RVCT_',
                    'VA_LIST_IS_STRUCT'	
                    )
                    






## Compiler Class
class SymbianARMV5Compiler(Compiler):
    def __init__(self):
        Compiler.__init__(self)

    def execute(self, target_file, src_file):
        extra_args = ''

        return form_string(
            platform.form_var(self.make_var),
            platform.form_var(self.make_flags),
            extra_args,
            self.target_arg + target_file,
            self.source_arg,
            src_file)

class ARMAssembler(Compiler):
    def __init__(self):
        Compiler.__init__(self)

    def setup_flags_var(self):
        def_str = form_string('')
        return form_string(self.make_flags, '=', self.form_args(), def_str)


platform.cc = SymbianARMV5Compiler()
platform.cxx = SymbianARMV5Compiler()
platform.asm = ARMAssembler()

cc = platform.cc
cxx = platform.cxx

cc.cmd = 'armcc'
cxx.cmd = 'armcc'

cxx.source_arg = cc.source_arg = '-c'
cxx.target_arg = cc.target_arg = '-o '
cxx.make_var = cc.make_var = 'CC'
cxx.make_flags = 'CXXFLAGS'
cc.make_flags = 'CCFLAGS'
cxx.include_arg = cc.include_arg = '-I'

asm = platform.asm
asm.cmd = 'armasm'
asm.source_arg = ' '
asm.make_var = 'ARMASM'
asm.make_flags = 'ARMASMFLAGS'
asm.target_arg = '-o'
asm.include_arg = '-I'
asm.args['default'] = '--keep --fpu softvfp --apcs /interwork --cpu 5T'
asm.args['debug'] = '-G -PD "_DEBUG SETA 0"'
platform.build_rules['.s'] = BuildRule('.s', '.obj', asm)

## Compiler option --no_parse_template is for disabling parsing of non-class template 
##                  if they are not actually instantiated.
if project.BuildOption("release"):
     cc.args['default'] = '--no_parse_templates -c --diag_suppress 3161,611,654,997,1152,1300 --diag_error 1267 --cpu 5T --gnu --enum_is_int -Ono_known_library --fpu softvfp --exceptions --exceptions_unwind --fpmode ieee_no_fenv --export_all_vtbl --friend_injection --no_vfe --apcs /interwork -W -g- -O2 --cpp --preinclude RVCT2_2.h -D__SUPPORT_CPP_EXCEPTIONS__'       
     cc.args['armi'] = '-c --diag_suppress 3161,611,654,997,1152,1300 --diag_error 1267  --cpu 5T --enum_is_int -Ono_known_library --fpu softvfp --exceptions --fpmode ieee_full --export_all_vtbl --no_vfe --apcs /interwork -W -g- -O2 --cpp --preinclude RVCT2_2.h -D__SUPPORT_CPP_EXCEPTIONS__'
else:
     cc.args['default'] = '--no_parse_templates -c --diag_suppress 3161,611,654,997,1152,1300 --diag_error 1267 --cpu 5T --gnu --enum_is_int -Ono_known_library --fpu softvfp --exceptions --exceptions_unwind --fpmode ieee_no_fenv --export_all_vtbl --friend_injection --no_vfe --apcs /interwork -W -g -O2 -D__PRODUCT_INCLUDE__=\"\\EPOC32\\include\\oem\\bldvariant.hrh\" --cpp --preinclude RVCT2_2.h -D__SUPPORT_CPP_EXCEPTIONS__'

product_include = " -D__PRODUCT_INCLUDE__=\\\"%s\\epoc32\\include\\oem\\bldvariant.hrh\\\"" % ( GetSDKPath('SYMBIANSDK') )
cc.args['default'] += ' %s' % product_include

system_includes=""

for inc in ['EPOC32\INCLUDE',
            'EPOC32\INCLUDE\RVCT2_2',
            'EPOC32\INCLUDE\oem',
            'EPOC32\INCLUDE\internal',
            'EPOC32\INCLUDE\mmf',
            'EPOC32\INCLUDE\mmf\common',
            'EPOC32\INCLUDE\mmf\server']:
    system_includes += ('-J%s ' % os.path.join(GetSDKPath('SYMBIANSDK'), inc))


cc.args['default'] += ' %s' % system_includes

cxx.args['default'] = cc.args['default']
cxx.args['debug'] = cc.args['debug'] = ''
asm.args['debug'] = ''

## no_optimize: no optimization on release builds
if project.BuildOption('no_optimize'):
    cc.args['release'] = ''
else:
    cc.args['release'] = '-O2'

cxx.args['release'] = cc.args['release']
asm.args['release'] = ''



class SymbianARMILinker(Linker2):

    def link_script_path(self):
        return "%s.lnk" % (project.TargetName())

    def write_link_script(self):
        ## if there are no exported functions, die here
        if len(project.exported_func) == 0:
            umake_lib.fatal("dll target without exported functions") 

        path=self.link_script_path()
        ## create a gcc link script
        fil = open(path, "w")

        for export in project.exported_func:
            fil.write("EXTERN(%s);\n" % (export))

        fil.close()

        return path

    def __init__(self):
        Linker2.__init__(self)

        ## these are here to emulate the old linker class
        ## for Umakefil/*.pcf files which do direct modification
        ## of this class
        self.def_file = ""
        self.implib_file = ""

        self.args = {}
        self.args["default"] = ""
        self.args["debug"] = "/debug"
        self.args["release"] = "/OPT:REF"
        self.args["dll"] = ""

    def read_ordinal_file(self, path):
        fil = open(path, "r")

        sym_ord_list = []
        for line in fil.readlines():
            field_list = string.split(line)
            symbol = string.strip(field_list[1])
            ordinal = string.strip(field_list[0])

            sym_ord_list.append((symbol, ordinal))

        return sym_ord_list

    def write_def_file(self, path):
        fil = open(path, 'w')
        
        ordinalFilename = "%s_ordinal.dat" % project.target_name
        
        if project.target_type == "dll":
            ## exported functions
            fil.write("EXPORTS\n")

            ## check for the data file which defines ordinally-exported
            ## methods/functions
            if project.BuildOption("ordinal") and \
               os.path.isfile(ordinalFilename):
                for (symbol, ordinal) in self.read_ordinal_file(ordinalFilename):
                    fil.write("\t%s @ %s R3UNUSED\n" % (symbol, ordinal))

        fil.close()

    def LinkLIB(self, target_path, objects):
        cmd_list = []

        cmd = '-rm %s' % target_path
        cmd_list.append(cmd)
        
        arg_list = ["-r -v", target_path, objects]
        cmd = '"armar.exe " %s' % (string.join(arg_list))
        cmd_list.append(cmd)

        cmd = '"armar.exe -s" %s' % (target_path)
        cmd_list.append(cmd)

        return cmd_list

    def CleanLIB(self, target_path):
        return [target_path]

    def LinkDLL(self, target_path, objects, static_libs, dynamic_libs):
        cmd_list = []

        baseName = re.match("^(.+)\.dll$", target_path).group(1)

        # Generate .def file for this DLL
        defFileName = "%s{000a0000}.def" % project.target_name
        self.write_def_file(defFileName)


        # First link pass
	#------------------------------------
	#--- armlink -- generate .in file ---
	#------------------------------------
        arg_list = ["--diag_suppress 6331,6780",  
        	    "--partial", 
        	    "--output %s.in" % baseName,
        	    objects]
      	        
        cmd = "armlink %s" % (
            string.join(arg_list))

        cmd_list.append(cmd)

	#------------------------------------
	#--- armlink -- generate .dll from .def file ---
	#------------------------------------        
        arg_list = ["--absent _E32Dll",
                    "--path=%s" % project.output_dir,
                    "--export=%s{000a0000}" % project.target_name,
                    "--deffile=%s" % defFileName,
                    "--linkAs=%s{000a0000}.DLL" % project.target_name,
                    "--inter"]
        
        cmd = "def2dll %s" % (
            string.join(arg_list))
        cmd_list.append(cmd)

        if project.BuildOption("release"):
              EpocUrelUdebDir = "%s\EPOC32\Release\ARMV5\UREL" % GetSDKPath('SYMBIANSDK')
        else:
              EpocUrelUdebDir = "%s\EPOC32\Release\ARMV5\UDEB" % GetSDKPath('SYMBIANSDK')
        EpocLibDir  = "%s\EPOC32\Release\ARMV5\LIB" % GetSDKPath('SYMBIANSDK')
        EpocLibs    = "efsrv.lib EUSER.LIB(VtblExports.o) EDLL.LIB ESTLIB.LIB(VtblExports.o) drtrvct2_2.lib usrt2_2.lib dfpaeabi.lib  drtaeabi.lib(VtblExports.o)"
	
 # Second link pass
        arg_list = ["--diag_suppress 6331,6239,6780",
        	          "--shl",
        	          "--reloc",
        	          "--split",
        	          "--rw-base 0x400000",
        	          "--entry _E32Dll %s" % GetSymbianLibPath("EDLL.LIB(UC_DLL_.o)"),
        	          "%s{000a0000}.exp" % baseName,
        	          "--output %s" % target_path,
        	          "--symbols --list %s.map" % target_path,
        	          "%s.in" % baseName,
        	          "--userlibpath %s,%s" % (EpocUrelUdebDir, EpocLibDir),
        	          static_libs,
        	          dynamic_libs,
        	          EpocLibs
        	          ]
 
        cmd = "armlink %s" % (
            string.join(arg_list))
        cmd_list.append(cmd)

# Create correpsonding .sym file in debug mode
        if project.BuildOption("debug"):
             arg_list = ["%s" % target_path,
                         "%s.sym" % baseName
                         ]
        	  
             cmd = "copy %s" % (
                 string.join(arg_list))
             cmd_list.append(cmd)

# Translate DLL for use on the device
        arg_list = ["-version 10.0",
                    "-nocall",
                    "-uid1 0x%x" % project.PlatformDependentUtil.uid1,
                    "-uid2 0x%x" % project.PlatformDependentUtil.uid2,
                    "-uid3 0x%x" % project.PlatformDependentUtil.uid3,
                    "-capability ALL-Tcb ",
                    target_path,
                    target_path
                    ]
                    
        cmd = "elftran %s" % (
            string.join(arg_list))
        cmd_list.append(cmd)

        return cmd_list

    def CleanDLL(self, target_path):
        list = []
        list.append(target_path)
        return list

    def LinkEXE(self, target_path, objects, static_libs, dynamic_libs):
        
        cmd_list = []

        if (project.BuildOption('make-app')):
            self.LinkSymbianPolyDll(target_path, "app", cmd_list, objects,
                                static_libs, dynamic_libs)
        elif (project.BuildOption('make-mdl')):
            self.LinkSymbianPolyDll(target_path, "mdl", cmd_list, objects,
                                static_libs, dynamic_libs)
        elif (project.BuildOption('make-mmf')):
            self.LinkSymbianPolyDll(target_path, "dll", cmd_list, objects,
                                static_libs, dynamic_libs)
        else:
           self.LinkSymbianExe(target_path, cmd_list, objects,
	                        static_libs, dynamic_libs)


        return cmd_list

    def LinkSymbianPolyDll(self, target_path, dllExt, cmd_list, objects, static_libs, dynamic_libs):
        
        baseName = re.match("^(.+)\.%s$" % dllExt, target_path).group(1)

        # Create .def file
        if( dllExt == "app"):
            exportLine = "_Z14NewApplicationv @ 1 R3UNUSED ; NewApplication(void)\n"
        elif( dllExt == "mdl"):
            exportLine = "_Z16CreateRecognizerv @ 1 R3UNUSED ; CreateRecognizer(void)\n"
        elif( dllExt == "dll" ):
            exportLine = "\t_Z24ImplementationGroupProxyRi @ 1 NONAME\n\n"
        else:
            raise "don't know what to export for dll type '%s'" % dllExt

        defFileName = "%s{000a0000}.def" % project.target_name
        defFile = open(defFileName, "w")
        defFile.write("EXPORTS\n")
        defFile.write(exportLine)
        defFile.close()

	#------------------------------------
	#--- armlink -- generate .in file ---
	#------------------------------------
        arg_list = ["--diag_suppress 6331,6780",  
        	          "--partial", 
        	          "--output %s.in" % baseName,
        	          objects
        	          ]
      	        
        cmd = "armlink %s" % (
            string.join(arg_list)) 
        cmd_list.append(cmd)

	#-----------------------------------------------
	#--- armlink -- generate DLL from DEF file ---
	#-----------------------------------------------        
        arg_list = ["--absent _E32Dll",
                    "--path=%s" % project.output_dir,
                    "--export=%s{000a0000}" % project.target_name,
                    "--deffile=%s" % defFileName,
                    "--linkAs=%s{000a0000}[%x].%s" % (project.target_name, project.PlatformDependentUtil.uid3, dllExt),
                    "--inter"]
        
        cmd = "def2dll %s" % (
            string.join(arg_list))
        cmd_list.append(cmd)

        if project.BuildOption("release"):
              EpocUrelUdebDir = "%s\EPOC32\Release\ARMV5\UREL" % GetSDKPath('SYMBIANSDK')
        else:
              EpocUrelUdebDir = "%s\EPOC32\Release\ARMV5\UDEB" % GetSDKPath('SYMBIANSDK')
        EpocLibDir  = "%s\EPOC32\Release\ARMV5\LIB" % GetSDKPath('SYMBIANSDK')
	EpocLibs    = "usrt2_2.lib dfpaeabi.lib dfprvct2_2.lib drtaeabi.lib \"drtaeabi.lib(VtblExports.o)\" scppnwdl.lib drtrvct2_2.lib efsrv.lib APMIME.LIB(VtblExports.o) EUSER.LIB(VtblExports.o) EDLL.LIB ESTLIB.LIB(VtblExports.o) "
# preelf_target_path is the output of armlink and will be the input to elftran
	preelf_target_path = "%s_preelf.dll" % target_path

 # Second link pass
        arg_list = ["--diag_suppress 6331,6239,6780",
        	          "--shl",
        	          "--reloc",
        	          "--split",
        	          "--rw-base 0x400000",
        	          "--entry _E32Dll %s" % GetSymbianLibPath("EDLL.LIB(UC_DLL_.o)"),
        	          "%s{000a0000}.exp" % baseName,
           	    	  "--output %s" % preelf_target_path,
        	          "--symbols --list %s.map" % target_path,
        	          "%s.in" % baseName,
        	          "--userlibpath %s,%s" % (EpocUrelUdebDir, EpocLibDir),
        	          static_libs,
        	          dynamic_libs,
        	          EpocLibs
        	          ]
 
        cmd = "armlink %s" % (
            string.join(arg_list))
        cmd_list.append(cmd)

# Create correpsonding .sym file in debug mode
        if project.BuildOption("debug"):
             arg_list = ["%s" % preelf_target_path,
                         "%s.sym" % baseName
                         ]
        	  
             cmd = "copy %s" % (
                 string.join(arg_list))
             cmd_list.append(cmd)

# Translate DLL for use on the device
        arg_list = ["-version 10.0",
                    "-sid 0x%x" % project.PlatformDependentUtil.uid3,
                    "-nocall",
                    "-uid1 0x%x" % project.PlatformDependentUtil.uid1,
                    "-uid2 0x%x" % project.PlatformDependentUtil.uid2,
                    "-uid3 0x%x" % project.PlatformDependentUtil.uid3,
                    "-vid 0x101fb657",
                    "-capability ALL-Tcb ",
                    preelf_target_path,
                    target_path]
                    
        cmd = "elftran %s" % (
            string.join(arg_list))
        cmd_list.append(cmd)

        return cmd_list
    
    
    def LinkSymbianExe(self, target_path, cmd_list, objects,
                       static_libs, dynamic_libs):

        baseName = re.match("^(.+)\.exe$", target_path).group(1)

        if project.BuildOption("release"):
              EpocUrelUdebDir = "%s\EPOC32\Release\ARMV5\UREL" % GetSDKPath('SYMBIANSDK')
        else:
              EpocUrelUdebDir = "%s\EPOC32\Release\ARMV5\UDEB" % GetSDKPath('SYMBIANSDK')
        EpocLibDir = "%s\EPOC32\Release\ARMV5\LIB" % GetSDKPath('SYMBIANSDK')
	EpocLibs    = "usrt2_2.lib dfpaeabi.lib dfprvct2_2.lib drtaeabi.lib \"drtaeabi.lib(VtblExports.o)\" scppnwdl.lib drtrvct2_2.lib efsrv.lib APMIME.LIB(VtblExports.o) EUSER.LIB(VtblExports.o) EDLL.LIB ESTLIB.LIB(VtblExports.o) AVKON.LIB(VtblExports.o) CONE.LIB(VtblExports.o) EEXE.LIB EFSRV.LIB(VtblExports.o)"

        arg_list = ["--diag_suppress 6331,6239,6780",
                    "--shl",
                    "--reloc",
                    "--split",
                    "--entry _E32Startup %s" % GetSymbianLibPath("EEXE.LIB(UC_EXE_.o)"),
                    "--output %s" % target_path,
                    "--symbols --list %s.map" % target_path,
                    "--userlibpath %s,%s" % (EpocUrelUdebDir, EpocLibDir),
                    static_libs,
                    dynamic_libs,
                    EpocLibs
                    ]
        arg_list.append(objects)
        cmd = "armlink %s" % (string.join(arg_list))
        cmd_list.append(cmd)

# Create correpsonding .sym file in debug mode
        if project.BuildOption("debug"):
             arg_list = ["%s" % target_path,
                         "%s.sym" % baseName
                         ]
        	  
             cmd = "copy %s" % (
                 string.join(arg_list))
             cmd_list.append(cmd)

# Translate EXE for use on the device
        arg_list = ["-nocall ",
                    "-uid1 0x%x" % project.PlatformDependentUtil.uid1,
                    "-uid2 0x%x" % project.PlatformDependentUtil.uid2,
                    "-uid3 0x%x" % project.PlatformDependentUtil.uid3,
                    "-capability \"NetworkServices LocalServices Location ReadUserData WriteUserData ReadDeviceData WriteDeviceData SwEvent UserEnvironment\"",
                    "-vid 0x101FB657",
                    "-capability ALL-Tcb ",
                    target_path,
                    target_path
                    ]

        cmd = "elftran %s" % (
            string.join(arg_list))
        cmd_list.append(cmd)
        
        return cmd_list
    
    def CleanEXE(self, target_path):
        list = []
        list.append(target_path)
        return list

platform.link = SymbianARMILinker()

## Output directory setup
if project.BuildOption("debug"):
    project.output_dir = "armv5-dbg32"
else:
    project.output_dir = "armv5-rel32"


def GetSymbianLibPath(libName):
        if project.BuildOption("release"):
            return os.path.join(GetSDKPath('SYMBIANSDK'),
                                'EPOC32\Release\ARMV5\UREL',
                                libName)
        else:
            return os.path.join(GetSDKPath('SYMBIANSDK'),
                                'EPOC32\Release\ARMV5\UDEB',
                                libName)

def HandleSymbianARMIStuff(args):
    new_sys_libraries = []
    for x in project.sys_libraries:
        new_path = GetSymbianLibPath(x)

        if (os.path.isfile(new_path)):
            new_sys_libraries.append("\"%s\"" % new_path)
        else:
            new_sys_libraries.append(x)
            
    project.sys_libraries = new_sys_libraries
        
AddUmakeCallback(HandleSymbianARMIStuff, None)

platform.build_rules['.s'] = BuildRule('.s', '.obj', asm)




