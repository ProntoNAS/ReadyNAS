# 
# ***** BEGIN LICENSE BLOCK *****
# Source last modified: $Id: macos-carbon-powerpc-darwin-cw7.cf,v 1.1.1.1 2006/03/29 16:45:39 hagi Exp $
# 
# Portions Copyright (c) 1995-2004 RealNetworks, Inc. All Rights Reserved.
# 
# The contents of this file, and the files included with this file,
# are subject to the current version of the RealNetworks Public
# Source License (the "RPSL") available at
# http://www.helixcommunity.org/content/rpsl unless you have licensed
# the file under the current version of the RealNetworks Community
# Source License (the "RCSL") available at
# http://www.helixcommunity.org/content/rcsl, in which case the RCSL
# will apply. You may also obtain the license terms directly from
# RealNetworks.  You may not use this file except in compliance with
# the RPSL or, if you have a valid RCSL with RealNetworks applicable
# to this file, the RCSL.  Please see the applicable RPSL or RCSL for
# the rights, obligations and limitations governing use of the
# contents of the file.
# 
# Alternatively, the contents of this file may be used under the
# terms of the GNU General Public License Version 2 or later (the
# "GPL") in which case the provisions of the GPL are applicable
# instead of those above. If you wish to allow use of your version of
# this file only under the terms of the GPL, and not to allow others
# to use your version of this file under the terms of either the RPSL
# or RCSL, indicate your decision by deleting the provisions above
# and replace them with the notice and other provisions required by
# the GPL. If you do not delete the provisions above, a recipient may
# use your version of this file under the terms of any one of the
# RPSL, the RCSL or the GPL.
# 
# This file is part of the Helix DNA Technology. RealNetworks is the
# developer of the Original Code and owns the copyrights in the
# portions it created.
# 
# This file, and the files included with this file, is distributed
# and made available on an 'AS IS' basis, WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESS OR IMPLIED, AND REALNETWORKS HEREBY DISCLAIMS
# ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET
# ENJOYMENT OR NON-INFRINGEMENT.
# 
# Technology Compatibility Kit Test Suite(s) Location:
#    http://www.helixcommunity.org/content/tck
# 
# Contributor(s):
# 
# ***** END LICENSE BLOCK *****
# 
"""MacOS 8.6, 9.x, 10.x using MetroWerks CodeWarrior 7, supporting the
Carbonized RealPlayer client."""



## list of PCF files to run
#platform.pcf_prefix_list = ['mac']


## list of PCF files to run
#platform.pcf_prefix_list = ["mac"]
platform.pcf_prefix_list = ["mac", "macos-carbon-powerpc-darwin-cw7"]

## pre-compiled carbon headers
project.AddPrefixFileInclude("MacHeadersCarbon.h")


## defines
project.AddDefines(
    "_MACINTOSH",
    "_BIG_ENDIAN",
    "_CARBON")

if project.BuildOption("debug"):
    project.AddDefines("_DEBUG")

## Platform definitions
platform.inc_subdir      = "mac"
platform.type            = 'macPPC'
platform.path_sep        = ':'
platform.user_paths      = []

## suffixes for target types
platform.exe_suffix          = ''
platform.library_suffix      = 'lib'
platform.dll_suffix          = 'dll'
platform.resource_dll_suffix = 'xrs'

## Version info
class MacVersioning(Versioning):
    def create_dll_name(self, target, path = ''):
        ## if the name is overriden
        new_name = self.get_name(target, path)
        if new_name == '':
            new_name = target

        ## choose suffix for library
        suffix = platform.dll_suffix

        ## create and return the name of the library
        if project.versioning_off:
            return '%s.%s' % (new_name, suffix)
        else:
            version = self.get_version(target, path)
            return '%s%s%s.%s' % (
                new_name,
                self.version[0],
                self.version[1],
                suffix)
platform.versioning = MacVersioning()

## set the output directories
if project.BuildOption("debug"):
    project.output_dir = ':debug'
    project.output_dirname = 'debug'
else:
    project.output_dir = ':release'
    project.output_dirname = 'release'

project.project_name = ''



## Set AppleScript Editor as creator of make file
## This is legacy because of OSAm, I'm keeping the function call
## for backwards-compatibility
def SetFileCreator(fileName, creatorType):
    pass

## standard "Access Paths->User Paths"
platform.user_paths = [
    '{name:":", recursive:false, origin:project relative}',
    '{name:"SRCROOT:pncrt:", recursive:false, origin:project relative}',
    '{name:"SRCROOT:include:mac:", recursive:false, origin:project relative}',
    '{name:"SRCROOT:pnio:pub:mac:", recursive:false, origin:project relative}',
    '{name:"SRCROOT:pnmisc:pub:mac:", recursive:false, origin:project relative}',
    '{name:"SRCROOT:pnmemmgr:pub:", recursive:false, origin:project relative}',
    '{name:"SRCROOT:pnmemmgr:mac:", recursive:false, origin:project relative}',
    '{name:":mac:",recursive:false,origin:project relative}',
    '{name:":pub:",recursive:false,origin:project relative}',
    '{name:":pub:mac:",recursive:false,origin:project relative}'
    ]

## standard "Access Paths->System Paths"
platform.system_paths = [
    '{name:":MacOS Support:Universal:Interfaces:CIncludes:", recursive:true, origin:shell relative}',
    '{name:":MacOS Support:MacHeaders:", recursive:true, origin:shell relative}',
    '{name:":MacOS Support:Universal:Libraries:StubLibraries:", recursive:true, origin:shell relative}',
    '{name:":MacOS Support:Universal:Interfaces:RIncludes:", recursive:true, origin:shell relative}',
    '{name:":MSL:MSL_C:MSL_Common:", recursive:true, origin:shell relative}',
    '{name:":MSL:MSL_C:MSL_MacOS:", recursive:true, origin:shell relative}',
    '{name:":MSL:MSL_C++:MSL_Common:Include", recursive:true, origin:shell relative}',
    '{name:":MSL:MSL_C++:MSL_MacOS:Lib:PPC:", recursive:true, origin:shell relative}'
    ]


## standard "Access Paths->User Paths" for resource targets
platform.ruser_paths = [
    '{name:":",recursive:false,origin:project relative}',
    '{name:"SRCROOT:include",recursive:true,origin:project relative}',
    ]
    
## standard "Access Paths->System Paths" for resource targets
platform.rsystem_paths = [
    '{name:":Win32-x86 Support:", recursive:true, origin:shell relative}',
    '{name:":MSL:MSL_C:MSL_Common:Include:", recursive:true, origin:shell relative}',
    ]

## need to specify at least 1 pref from each pane

## PPC Project
project.SetPreference("PPC Project", "MWProject_PPC_type", "Library")

## C/C++ Compiler
project.SetPreference("C/C++ Compiler", "MWFrontEnd_C_booltruefalse", "1")

## C/C++ Warnings
project.SetPreference("C/C++ Warnings", "MWWarning_C_warn_unusedvar", "1")

## Output Flags
project.SetPreference("Output Flags", "FileLocked", "false")

## Packager Panel
project.SetPreference("Packager Panel", "MWMacOSPackager_UsePackager", "0")

## PPC PEF
project.SetPreference("PPC PEF", "MWPEF_exports", "PragmaAndFile")

## PPC Linker
if project.BuildOption("debug"):
    project.SetPreference("PPC Linker", "MWLinker_PPC_linksym", "1")
else:
    project.SetPreference("PPC Linker", "MWLinker_PPC_linksym", "0")

## PPC CodeGen
if project.BuildOption("debug"):
    project.SetPreference("PPC CodeGen", "MWCodeGen_PPC_peephole", "0")
    project.SetPreference("PPC CodeGen", "MWCodeGen_PPC_processor", "generic")
    project.SetPreference("PPC CodeGen", "MWCodeGen_PPC_schedule", "0")
else:
    project.SetPreference("PPC CodeGen", "MWCodeGen_PPC_peephole", "1")
    project.SetPreference("PPC CodeGen", "MWCodeGen_PPC_processor", "P750")
    project.SetPreference("PPC CodeGen", "MWCodeGen_PPC_schedule", "1")

## PPC Global Optimizer
if project.BuildOption("debug"):
    project.SetPreference("PPC Global Optimizer", "GlobalOptimizer_PPC_optimizationlevel", "Level0")
else:
    project.SetPreference("PPC Global Optimizer", "LGlobalOptimizer_PPC_optimizationlevel", "Level4")


## PPC CodeGen Mach-O panel
project.SetPreference("PPC CodeGen Mach-O panel", "MWCodeGen_MachO_structalignment", "PPC")
project.SetPreference("PPC Mach-O Target", "MWProject_MachO_type", "Executable")
project.SetPreference("PPC Mach-O Linker", "MWLinker_MachO_exports", "None")

