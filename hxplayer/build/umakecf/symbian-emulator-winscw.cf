# -*- python -*-
#
# ***** BEGIN LICENSE BLOCK *****
# Version: RCSL 1.0/RPSL 1.0
# 
# Portions Copyright (c) 1995-2004 RealNetworks, Inc. All Rights Reserved.
# 
# The contents of this file, and the files included with this file, are
# subject to the current version of the RealNetworks Public Source License
# Version 1.0 (the "RPSL") available at
# http://www.helixcommunity.org/content/rpsl unless you have licensed
# the file under the RealNetworks Community Source License Version 1.0
# (the "RCSL") available at http://www.helixcommunity.org/content/rcsl,
# in which case the RCSL will apply. You may also obtain the license terms
# directly from RealNetworks.  You may not use this file except in
# compliance with the RPSL or, if you have a valid RCSL with RealNetworks
# applicable to this file, the RCSL.  Please see the applicable RPSL or
# RCSL for the rights, obligations and limitations governing use of the
# contents of the file.
# 
# This file is part of the Helix DNA Technology. RealNetworks is the
# developer of the Original Code and owns the copyrights in the portions
# it created.
# 
# This file, and the files included with this file, is distributed and made
# available on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
# EXPRESS OR IMPLIED, AND REALNETWORKS HEREBY DISCLAIMS ALL SUCH WARRANTIES,
# INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
# 
# Technology Compatibility Kit Test Suite(s) Location:
#    http://www.helixcommunity.org/content/tck
# 
# Contributor(s):
# 
# ***** END LICENSE BLOCK *****
# 
"""Symbian winscw emulator .cf file. """

exec_config_file('symbian.cf')

platform.make.cmd = 'make'
platform.make.args['default'] = ''
 
platform.include_arg = '-I'
platform.define_arg = '-D'
platform.object_suffix = 'o'
platform.shared_object_suffix = 'o'
platform.path_sep = '/'

## Symbian PCF file list
platform.pcf_prefix_list[-1:-1] = ['symbian-winscw']

## Turn these on for emulator builds.
project.AddDefines( '__CW32__',
                    '__WINS__' )

if project.IsDefined('HELIX_CONFIG_SYMBIAN_PLATFORM_SECURITY'):
    project.AddDefines( '_EPOC',
                        '__WINSCW__',
                        '__SUPPORT_CPP_EXCEPTIONS__' )



## Output directory setup
if project.BuildOption("debug"):
    project.output_dir = "winscw-dbg32"
else:
    project.output_dir = "winscw-rel32"

## Add in the symbian WINS lib path.
if project.BuildOption('debug'):
   for inc in ['EPOC32\Release\winscw\UDEB']:
        project.AddSystemPaths('"%s"' % os.path.join(GetSDKPath('SYMBIANSDK'), inc))
else:
   for inc in ['EPOC32\Release\winscw\UREL']:
        project.AddSystemPaths('"%s"' % os.path.join(GetSDKPath('SYMBIANSDK'), inc))

## Compiler Class
class SymbianCompiler(Compiler):
    def __init__(self):
        Compiler.__init__(self)

    def execute(self, target_file, src_file):
        extra_args = ''

        if project.target_type == 'dll':
            if self.args.has_key('dll'):
                extra_args = self.args['dll']

        return form_string(
            platform.form_var(self.make_var),
            platform.form_var(self.make_flags),
            extra_args,
            self.target_arg + target_file,
            self.source_arg,
            src_file)


## instance Window compiler object
platform.cc = SymbianCompiler()
platform.cxx = SymbianCompiler()

cc = platform.cc
cxx = platform.cxx

cxx.cmd = cc.cmd = 'mwccsym2'
cxx.source_arg = cc.source_arg = '-c '
cxx.target_arg = cc.target_arg = '-o '
cxx.make_var = cc.make_var = 'CC'
cxx.make_flags = 'CXXFLAGS'
cc.make_flags = 'CCFLAGS'
cxx.include_arg = cc.include_arg = '-I'

# It's important not to accidentally get the standard MSVC includes in
# here, so add /X to make sure we don't get MS include dirs.
# Also turn off _WIN32, _M_IX86 and _WINDOWS

cxx.args['default'] = '-g -wchar_t off -nostdinc -align 4 -dialect c++ -nosyspath -warnings off -U_WIN32 -U_M_IX86 -U_WINDOWS -U__MWERKS__ '
cc.args['default'] = '-g -wchar_t off -nostdinc -align 4  -dialect c++ -nosyspath -warnings off -U_WIN32 -U_M_IX86 -U_WINDOWS -U__MWERKS__ '

system_includes=""

for inc in ['EPOC32\INCLUDE',
            'EPOC32\INCLUDE\oem',
            'EPOC32\INCLUDE\internal',
            'EPOC32\INCLUDE\mmf',
            'EPOC32\INCLUDE\mmf\common',
            'EPOC32\INCLUDE\mmf\server']:
    system_includes += ('-I%s ' % os.path.join(GetSDKPath('SYMBIANSDK'), inc))


cxx.args['default'] += ' %s' % system_includes
cc.args['default'] += ' %s' % system_includes

if project.IsDefined('HELIX_CONFIG_SYMBIAN_PLATFORM_SECURITY'):
    cxx.args['default'] = cxx.args['default'] + ' -include "bldvariant.hrh"'
    cc.args['default'] = cc.args['default']+ ' -include "bldvariant.hrh"'

cxx.args['debug'] = cc.args['debug'] = '-opt off'

## no_optimize: no optimization on releasefor inc in ['EPOC32\include',
if project.BuildOption('no_optimize'):
    cc.args['release'] = ''
else:
    cc.args['release'] = '-opt space'

## no_optimize: no optimization on release builds
if project.BuildOption('nt_stackframe'):
    cc.args['release'] = ''
else:
    cc.args['release'] = '-opt space'

cxx.args['release'] = cc.args['release']



class SymbianMakeDepend(MakeDepend):
    def execute(self, sources, output_dir):
        list = []
        if project.object_dir:
            list.append("/t%s" % (project.object_dir))
        list.append("/m%s" % (project.makefile_name))

        cmd = "python %s --gnumake %s %s %s %s" % (
            os.path.join(BUILD_ROOT, "bin", "mkdepend"), 
            string.join(list),
            platform.form_var("DEFINES"),
            platform.form_var("INCLUDES"),
            sources)

        return cmd        

    def setup_flags_var(self):
        return ""

platform.make_dep = SymbianMakeDepend()



class SymbianLinker(Linker2):
    def __init__(self):
        Linker2.__init__(self)

        ## these are here to emulate the old linker class
        ## for Umakefil/*.pcf files which do direct modification
        ## of this class
        self.def_file = ""
        self.implib_file = ""

        self.args = {}
        self.args["default"] = ""
        self.args["debug"] = "-sym on"
        self.args["dll"] = ""

    def read_ordinal_file(self, path):
        fil = open(path, "r")

        sym_ord_list = []
        for line in fil.readlines():
            field_list = string.split(line)
            symbol = string.strip(field_list[1])
            ordinal = string.strip(field_list[0])

            sym_ord_list.append((symbol, ordinal))

        return sym_ord_list

    def write_def_file(self, path):
        fil = open(path, 'w')
        
        fil.write('DESCRIPTION\t\'Symbian Helix Player\'\n')

        ordinalFilename = "%s_ordinal.dat" % project.target_name
        
        if project.target_type == "dll":
            ## exported functions
            fil.write("EXPORTS\n")

            ## check for the data file which defines ordinally-exported
            ## methods/functions
            if project.BuildOption("ordinal") and os.path.isfile(ordinalFilename):
                for (symbol, ordinal) in self.read_ordinal_file(ordinalFilename):
                    fil.write("\t%s @%s NONAME\n" % (symbol, ordinal))

                if project.IsDefined('HELIX_CONFIG_SYMBIAN_PLATFORM_SECURITY'):
                    fil.write("\t_E32Dll=__E32Dll\t; Entry point for emulation")

        fil.close()

    def option_arg_list(self):
        arg_list = [
            "-search"
            ]

        if project.target_type == "dll":
            arg_list.append("-subsystem windows")
            arg_list.append("-export dllexport")
            arg_list.append("-nocompactimportlib")

        ## add any arguments from old build option/argument hash
        for choice in project.build_choices:
            try:
                temp = string.split(self.args[choice])
                arg_list = arg_list + temp
            except KeyError:
                pass

        ## somewhat nasty behavior because some of the umakefils
        ## modify this directly
        if project.target_type == "dll":
            if project.opt_target_name:
                implib_basename = project.opt_target_name
            else:
                implib_basename = project.target_name

            implib_basename = "%s.lib" % (implib_basename)
            if self.implib_file:
                implib_basename = os.path.basename(self.implib_file) 
            implib_file = os.path.join(project.output_dir, implib_basename)
            arg_list.append("-implib %s" % (implib_file))

        ## write the .def file
        if project.target_type in ["dll"]:
            def_file = "%s.def" % (project.target_name)
            arg_list.append("-f %s" % (def_file))
            self.write_def_file(def_file)
        

        return arg_list

    def LinkLIB(self, target_path, objects):
        cmd_list = []

        arg_list = [
            "-library",
            "-o %s" % (target_path),
            objects]
        cmd = "mwldsym2 %s" % (string.join(arg_list))
        cmd_list.append(cmd)

        return cmd_list

    def CleanLIB(self, target_path):
        return [target_path]

    def LinkDLL(self, target_path, objects, static_libs, dynamic_libs):
        global project
        cmd_list = []

        if project.BuildOption('debug'):
            dbg = "debug"
            epoclib = "EPOC32\Release\winscw\UDEB"
        else:
            epoclib = "EPOC32\Release\winscw\UDEB"
            dbg = "release"
        
        arg_list = [ "-search",
                     "-shared -msgstyle gcc", ] + self.option_arg_list()

        if project.IsDefined('HELIX_CONFIG_SYMBIAN_PLATFORM_SECURITY'):
            arg_list.append('-noentry')
        else:
            arg_list.append( '-m "?_E32Dll@@YGHPAXI0@Z"')

        arg_list.append("-stdlib edll.lib")
        arg_list.append('-o "%s"' % (target_path))
        arg_list.append("-addcommand \"out:%s\"" % (target_path))
        arg_list.append(objects)
        arg_list.append(static_libs)
        arg_list.append(dynamic_libs)             
        
        cmd = "mwldsym2 -L\"%s\" %s " % (
            os.path.join(GetSDKPath('SYMBIANSDK'), epoclib),
            string.join(arg_list))
        cmd_list.append(cmd)

        return cmd_list

    def CleanDLL(self, target_path):
        list = []
        list.append(target_path)
        return list

    def LinkEXE(self, target_path, objects, static_libs, dynamic_libs):

        if (project.BuildOption('make-app')):
            # the graphic application are now .exe instead .app
            # so they must be linked as an Exe instead a PolyDll
            if project.IsDefined('HELIX_CONFIG_SYMBIAN_PLATFORM_SECURITY'):
                cmd_list = self.LinkSymbianExe(target_path, objects, static_libs, dynamic_libs)
            else:
                cmd_list = self.LinkSymbianPolyDll(target_path, "app", objects, static_libs, dynamic_libs)
        elif (project.BuildOption('make-mdl')):
            cmd_list = self.LinkSymbianPolyDll(target_path, "mdl", objects, static_libs, dynamic_libs)
        elif (project.BuildOption('make-mmf')):
            cmd_list = self.LinkSymbianPolyDll(target_path, "dll", objects, static_libs, dynamic_libs)
        else:
            cmd_list = self.LinkSymbianExe(target_path, objects, static_libs, dynamic_libs)

        return cmd_list
    
    def LinkSymbianPolyDll(self, target_path, outExt, objects, static_libs, dynamic_libs):
        
        outExt = string.lower(outExt)
        baseName = re.match("^(.+)\.%s$" % outExt, target_path).group(1)


        cmd_list = []
        if project.BuildOption('debug'):
            epoclib = "EPOC32\Release\winscw\UDEB"
        else:
            epoclib = "EPOC32\Release\winscw\UDEB"

        # Stage 1 link
        arg_list = self.option_arg_list()
        arg_list.append("-msgstyle gcc")
        arg_list.append("-stdlib edll.lib")

        if project.IsDefined('HELIX_CONFIG_SYMBIAN_PLATFORM_SECURITY'):
            arg_list.append("-noentry")

        arg_list.append("-shared")
        arg_list.append("-subsystem windows")

        arg_list.append("-g")
        arg_list.append(static_libs)
        arg_list.append(dynamic_libs)

        arg_list.append('-o "%s"' % (target_path))
        arg_list.append("-export dllexport")

        if project.IsDefined('HELIX_CONFIG_SYMBIAN_PLATFORM_SECURITY'):
            arg_list.append("-m __E32Dll")
            arg_list.append("-nocompactimportlib")
        else:
            arg_list.append('-m "?_E32Dll@@YGHPAXI0@Z"')

        arg_list.append('-implib "%s.lib"' % baseName)
        arg_list.append("-addcommand \"out:%s\"" % (target_path))
        arg_list.append("-warnings off")
        arg_list.append('-L"%s"' % (os.path.join(GetSDKPath('SYMBIANSDK'),epoclib)))
        arg_list.append("-search")
        arg_list.append(objects)

        cmd = "mwldsym2 %s" % (string.join(arg_list))
        cmd_list.append(cmd)

        # Generate .inf file
        arg_list = []
        arg_list.append('-S -show only,names,unmangled,verbose')
        arg_list.append('-o "%s.inf"' % baseName)
        arg_list.append('"%s.lib"' % baseName)

        cmd = "mwldsym2.exe %s" % (string.join(arg_list))
        cmd_list.append(cmd)

        # Generate .def file
        arg_list = []
        arg_list.append("-S makedef.pl")

        if project.IsDefined('HELIX_CONFIG_SYMBIAN_PLATFORM_SECURITY'):
            arg_list.append("-absent __E32Dll")

        arg_list.append("-Inffile \"%s.inf\"" % baseName)
        if( outExt == "app"):
            arg_list.append("-1 ?NewApplication@@YAPAVCApaApplication@@XZ")
        elif( outExt == "mdl"):
            arg_list.append("-1 ?CreateRecognizer@@YAPAVCApaDataRecognizerType@@XZ")
        elif( outExt == "dll"):
            arg_list.append("-1 ?ImplementationGroupProxy@@YAPBUTImplementationProxy@@AAH@Z")
        else:
            raise "don't know what to export for dll type '%s'" % outExt

        arg_list.append("\"%s.def\"" % baseName)
        cmd = "perl %s" %(string.join(arg_list))
        cmd_list.append(cmd)

        # Remove the .app file just generated
        cmd = "%s \"%s\"" % (platform.rm.cmd, target_path)
        cmd_list.append(cmd)

        # Remove the .exp file just generated
        cmd = "%s \"%s\"" % (platform.rm.cmd, baseName)

        # Remove the .lib file
        cmd = "%s \"%s.lib\"" % (platform.rm.cmd, baseName)
        cmd_list.append(cmd)

        # Remove the .inf file
        cmd = "%s \"%s.inf\"" % (platform.rm.cmd, baseName)
        cmd_list.append(cmd)

        # Stage 2 link
        arg_list = self.option_arg_list()
        arg_list.append("-msgstyle gcc")
        arg_list.append("-stdlib edll.lib")

        if project.IsDefined('HELIX_CONFIG_SYMBIAN_PLATFORM_SECURITY'):
            arg_list.append("-noentry")
        else:
            arg_list.append('-m "?_E32Dll@@YGHPAXI0@Z"')

        arg_list.append("-shared")
        arg_list.append("-subsystem windows")

        arg_list.append("-g")
        arg_list.append(static_libs)
        arg_list.append(dynamic_libs)

        arg_list.append('-o "%s"' % (target_path))
        arg_list.append('-f "%s.def"' % (baseName))
        arg_list.append("-noimplib")
        arg_list.append('-L"%s"' % (os.path.join(GetSDKPath('SYMBIANSDK'),epoclib)))

        arg_list.append("-search")
        arg_list.append(objects)

        cmd = "mwldsym2 %s" % (string.join(arg_list))
        cmd_list.append(cmd)
        
        return cmd_list

    
    def LinkSymbianExe(self, target_path, objects,
                       static_libs, dynamic_libs):
        cmd_list = []
        if project.BuildOption('debug'):
            epoclib = "EPOC32\Release\winscw\UDEB"
        else:
            epoclib = "EPOC32\Release\winscw\UDEB"
        

        arg_list = self.option_arg_list()
        arg_list.append("-msgstyle gcc")
        arg_list.append("-stdlib eexe.lib")
        arg_list.append("-subsystem windows")
        arg_list.append("-noimplib")

        if project.IsDefined('HELIX_CONFIG_SYMBIAN_PLATFORM_SECURITY'):
            arg_list.append('-m "?_E32Bootstrap@@YGXXZ"')
        else:
            arg_list.append('-m "?_E32Startup@@YGXXZ"')
            arg_list.append("-export none")

        arg_list.append('-o "%s"' % (target_path))
        arg_list.append("-search")
        arg_list.append("-addcommand \"out:%s\"" % (target_path))
        arg_list.append("-l %s" % (os.path.join(GetSDKPath('SYMBIANSDK'),epoclib)))
        arg_list.append(objects)
        arg_list.append(static_libs)
        arg_list.append(dynamic_libs)

        cmd = "mwldsym2 %s" % (string.join(arg_list))
        cmd_list.append(cmd)

        return cmd_list
    
    def CleanEXE(self, target_path):
        list = []
        list.append(target_path)
        return list

platform.link = SymbianLinker()


## symbols: keep symbols in release builds
if project.BuildOption('symbols'):
    platform.link.args['release'] = platform.link.args['release'] + ' /debug'
