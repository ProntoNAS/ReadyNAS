# 
# ***** BEGIN LICENSE BLOCK *****
# Source last modified: $Id: irix-6.2-mips-native.cf,v 1.1.1.1 2006/03/29 16:45:39 hagi Exp $
# 
# Portions Copyright (c) 1995-2004 RealNetworks, Inc. All Rights Reserved.
# 
# The contents of this file, and the files included with this file,
# are subject to the current version of the RealNetworks Public
# Source License (the "RPSL") available at
# http://www.helixcommunity.org/content/rpsl unless you have licensed
# the file under the current version of the RealNetworks Community
# Source License (the "RCSL") available at
# http://www.helixcommunity.org/content/rcsl, in which case the RCSL
# will apply. You may also obtain the license terms directly from
# RealNetworks.  You may not use this file except in compliance with
# the RPSL or, if you have a valid RCSL with RealNetworks applicable
# to this file, the RCSL.  Please see the applicable RPSL or RCSL for
# the rights, obligations and limitations governing use of the
# contents of the file.
# 
# Alternatively, the contents of this file may be used under the
# terms of the GNU General Public License Version 2 or later (the
# "GPL") in which case the provisions of the GPL are applicable
# instead of those above. If you wish to allow use of your version of
# this file only under the terms of the GPL, and not to allow others
# to use your version of this file under the terms of either the RPSL
# or RCSL, indicate your decision by deleting the provisions above
# and replace them with the notice and other provisions required by
# the GPL. If you do not delete the provisions above, a recipient may
# use your version of this file under the terms of any one of the
# RPSL, the RCSL or the GPL.
# 
# This file is part of the Helix DNA Technology. RealNetworks is the
# developer of the Original Code and owns the copyrights in the
# portions it created.
# 
# This file, and the files included with this file, is distributed
# and made available on an 'AS IS' basis, WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESS OR IMPLIED, AND REALNETWORKS HEREBY DISCLAIMS
# ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET
# ENJOYMENT OR NON-INFRINGEMENT.
# 
# Technology Compatibility Kit Test Suite(s) Location:
#    http://www.helixcommunity.org/content/tck
# 
# Contributor(s):
# 
# ***** END LICENSE BLOCK *****
# 
"""IRIX 6.2 using the native (IRIX) compiler."""

exec_config_file('unix.cf')

platform.cc = Compiler()
platform.cxx = Compiler()
cc = platform.cc
cc.cmd = 'cc -n32 '
cc.args['default'] = '-O -Xcpluscomm -woff 709 '
cc.args['debug'] = '-g -DDEBUG -D_DEBUG'
cc.args['dll'] = ''
cc.source_arg
cc.define_arg = '-D'
cc.include_arg = '-I'
cc.source_arg = '-c'
cc.target_arg = '-o '
cc.make_var = 'CC'
cc.make_flags = 'CCFLAGS'
platform.command_list.append(cc)

cxx = platform.cxx
cxx.cmd = 'CC -n32 '
cxx.args['default'] = '-O -Dtrue=1 -Dbool=int -Dfalse=0'
cxx.args['debug'] = '-g -DDEBUG -D_DEBUG'
cxx.args['dll'] = ''
cxx.define_arg = '-D'
cxx.include_arg = '-I'
cxx.source_arg = '-c'
cxx.target_arg = '-o '
cxx.make_var = 'CXX'
cxx.make_flags = 'CXXFLAGS'
platform.command_list.append(cxx)


class GCCLinker(Linker):
    def __init__(self):
        Linker.__init__(self)
        self.make_var = 'LD'
        self.make_flags = 'LDFLAGS'
        self.args['default'] = '-pipe'
        self.args['profile'] = '-pg'
        self.args['static'] = '-static'
        self.target_arg = '-o'
        self.ldcmd = 'gcc'
        self.ldargs = ''

    def crti_path(self):
        return '`%s -print-file-name=crti.o`' % (platform.cxx.cmd)

    def crtn_path(self):
        return '`%s -print-file-name=crtn.o`' % (platform.cxx.cmd)

    def crtbegin_path(self):
        return '`%s -print-file-name=crtbegin.o`' % (platform.cxx.cmd)

    def crtend_path(self):
        return '`%s -print-file-name=crtend.o`' % (platform.cxx.cmd)

    def crtbeginS_path(self):
        return '`%s -print-file-name=crtbeginS.o`' % (platform.cxx.cmd)

    def crtendS_path(self):
        return '`%s -print-file-name=crtendS.o`' % (platform.cxx.cmd)

    def crt1_path(self):
        return '`%s -print-file-name=crt1.o`' % (platform.cxx.cmd)

    def libgcc_path(self):
        return '`%s -print-file-name=libgcc.a`' % (platform.cxx.cmd)

    def link_paths(self):
        return string.join(platform.system_paths) +\
               string.join(project.system_paths)

    def execute(self, target, objects, static_libs, dynamic_libs):
        link_str = form_string(platform.form_var(self.make_var),
                               platform.form_var(self.make_flags),
                               self.target_arg,
                               target,
                               objects,
                               self.link_paths(),
                               dynamic_libs,
                               static_libs)

        if project.target_type == 'dll':
            link_str = form_string(link_str, '-lgcc')

        return link_str

    def set_type(self):
        self.cmd = self.ldcmd

        if (project.target_type == 'dll'):
            self.args['default'] = '-shared ' + self.ldargs
        else:
            self.args['default'] = self.ldargs
platform.link = GCCLinker()


#platform.link = GXXLinker()

make_lib = platform.make_lib
make_lib.cmd = 'ar cr '
make_lib.make_var = 'MAKE_LIB'
make_lib.make_flags = 'MAKE_LIB_FLAGS'

