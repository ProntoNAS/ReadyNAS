# -*- python -*-
#
# ***** BEGIN LICENSE BLOCK *****
# Version: RCSL 1.0/RPSL 1.0
# 
# Portions Copyright (c) 1995-2004 RealNetworks, Inc. All Rights Reserved.
# 
# The contents of this file, and the files included with this file, are
# subject to the current version of the RealNetworks Public Source License
# Version 1.0 (the "RPSL") available at
# http://www.helixcommunity.org/content/rpsl unless you have licensed
# the file under the RealNetworks Community Source License Version 1.0
# (the "RCSL") available at http://www.helixcommunity.org/content/rcsl,
# in which case the RCSL will apply. You may also obtain the license terms
# directly from RealNetworks.  You may not use this file except in
# compliance with the RPSL or, if you have a valid RCSL with RealNetworks
# applicable to this file, the RCSL.  Please see the applicable RPSL or
# RCSL for the rights, obligations and limitations governing use of the
# contents of the file.
# 
# This file is part of the Helix DNA Technology. RealNetworks is the
# developer of the Original Code and owns the copyrights in the portions
# it created.
# 
# This file, and the files included with this file, is distributed and made
# available on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
# EXPRESS OR IMPLIED, AND REALNETWORKS HEREBY DISCLAIMS ALL SUCH WARRANTIES,
# INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE, QUIET NJOYMENT OR NON-INFRINGEMENT.
# 
# Technology Compatibility Kit Test Suite(s) Location:
#    http://www.helixcommunity.org/content/tck
# 
# Contributor(s):
# 
# ***** END LICENSE BLOCK *****
# 
"""Building with the symbian 8.1 sdk for the winscw emulator on win-i386 """

## Read in generic symbian config file.
exec_config_file('symbian-81.cf')
exec_config_file('symbian-emulator-winscw.cf')

class PlatformDependentUtils:
    def __init__(self):
        self.uid1 = 0
        self.uid2 = 0
        self.uid3 = 0

    def write_uid_file(self):
        # first uid (what kind of binary image)
        KDynamicLibraryUid  = 0x10000079
        KExecutableImageUid = 0x1000007a

        # second uid (what kind of dll or exe)
        KUidApp             = 0x100039ce
        KUidRecognizer      = 0x10003a19

        # third uid = implementation uid

        #
        # for symbian, target_type is 'exe' for .app and .mdl and .mmf (misleading)
        #
        imageType = "unknown"
        if( project.target_type == "dll" ):
            imageType = "dll"

        elif ( project.target_type == "exe" ):
            if (project.BuildOption('make-app') or project.BuildOption('make-mdl') or project.BuildOption('make-mmf')):
                imageType = "dll"
            else:
                imageType = "exe"

        if( self.uid1 == 0 ):
            # set to default value for target type
            if (imageType == "exe"):
                self.uid1 = KExecutableImageUid
            elif (imageType == "dll"):
                self.uid1 = KDynamicLibraryUid
                
        if( self.uid2 == 0 ):
            # set to default value for specific type of target
            if (project.BuildOption('make-app')):
                # app
                self.uid2 = KUidApp
            elif (project.BuildOption('make-mdl')):
                # recognizer
                self.uid2 = KUidRecognizer

        uidpath = '%s.uid.cpp' %( project.target_name)

        fil = open(uidpath, 'w')
        fil.write('//Umake generated UID file.\n')
        fil.write('#include <E32STD.H>\n')
        fil.write('#include <E32CONS.H>\n')
        fil.write('#pragma data_seg(".E32_UID")\n')
        tmp = '__WINS_UID(0x%x, 0x%x, 0x%x)\n' % (self.uid1,
                                            self.uid2,
                                            self.uid3)
        fil.write(tmp)
        fil.write('#pragma data_seg()\n')
        fil.close()

        project.AddSources(uidpath)



## Create a global instance to use.
project.PlatformDependentUtil = PlatformDependentUtils()

if project.BuildOption('debug'):
    project.AddSystemLibraries('AKNNOTIFY.LIB')