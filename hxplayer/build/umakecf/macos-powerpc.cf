# 
# ***** BEGIN LICENSE BLOCK *****
# Source last modified: $Id: macos-powerpc.cf,v 1.1.1.1 2006/03/29 16:45:39 hagi Exp $
# 
# Portions Copyright (c) 1995-2004 RealNetworks, Inc. All Rights Reserved.
# 
# The contents of this file, and the files included with this file,
# are subject to the current version of the RealNetworks Public
# Source License (the "RPSL") available at
# http://www.helixcommunity.org/content/rpsl unless you have licensed
# the file under the current version of the RealNetworks Community
# Source License (the "RCSL") available at
# http://www.helixcommunity.org/content/rcsl, in which case the RCSL
# will apply. You may also obtain the license terms directly from
# RealNetworks.  You may not use this file except in compliance with
# the RPSL or, if you have a valid RCSL with RealNetworks applicable
# to this file, the RCSL.  Please see the applicable RPSL or RCSL for
# the rights, obligations and limitations governing use of the
# contents of the file.
# 
# Alternatively, the contents of this file may be used under the
# terms of the GNU General Public License Version 2 or later (the
# "GPL") in which case the provisions of the GPL are applicable
# instead of those above. If you wish to allow use of your version of
# this file only under the terms of the GPL, and not to allow others
# to use your version of this file under the terms of either the RPSL
# or RCSL, indicate your decision by deleting the provisions above
# and replace them with the notice and other provisions required by
# the GPL. If you do not delete the provisions above, a recipient may
# use your version of this file under the terms of any one of the
# RPSL, the RCSL or the GPL.
# 
# This file is part of the Helix DNA Technology. RealNetworks is the
# developer of the Original Code and owns the copyrights in the
# portions it created.
# 
# This file, and the files included with this file, is distributed
# and made available on an 'AS IS' basis, WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESS OR IMPLIED, AND REALNETWORKS HEREBY DISCLAIMS
# ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET
# ENJOYMENT OR NON-INFRINGEMENT.
# 
# Technology Compatibility Kit Test Suite(s) Location:
#    http://www.helixcommunity.org/content/tck
# 
# Contributor(s):
# 
# ***** END LICENSE BLOCK *****
# 
"""MacOS 8.6, 9.x using MetroWerks CodeWarrior 5."""

exec_config_file('macos-common.cf')

## list of PCF files to run
platform.pcf_prefix_list = ['mac', 'mac-cfm' ]

## defines
project.AddDefines(
    "_MACINTOSH",
    "_BIG_ENDIAN",
    "MSL_USE_PRECOMPILED_HEADERS",
    "OTUNIXERRORS")

## Target Settings
project.SetPreference(
    "Target Settings", "Linker", '"MacOS PPC Linker"')
project.SetPreference(
    "Target Settings", "Target Name", '"%s"'%(project.output_dirname))
project.SetPreference(
    "Target Settings", "Output Directory Path", '"%s:"'%(project.output_dir))
project.SetPreference(
    "Target Settings", "Output Directory Origin", "project relative")

## Access Paths
## XXX: Bad, Bad.  Notice we're setting the paths  here with hashes, which was
## somebody's mistake at some point.  Within umake.py, these are treated as
## lists, although they are hashes.  Since the order is important, umake.py
## ends up forming a list of integers and stepping through the hashes like they
## were lists, so just remember they keys are numbers! -Jay Painter
project.SetPreference("Access Paths", "User Paths", {})
project.SetPreference("Access Paths", "System Paths", {})

## PPC Project
project.SetPreference("PPC Project", "Project Type", "xxxProjType")
project.SetPreference("PPC Project", "File Name", "xxxFileName")
project.SetPreference("PPC Project", "File Type", "xxxFileType")

## C/C++ Compiler
project.SetPreference("C/C++ Compiler", "Enable bool Support", "true")
project.SetPreference("C/C++ Compiler", "Exception Handling", "true")
project.SetPreference("C/C++ Compiler", "ARM Conformance", "true")

## C/C++ Warnings
project.SetPreference("C/C++ Warnings", "Unused Variables", "false")
project.SetPreference("C/C++ Warnings", "Unused Arguments", "false")
project.SetPreference("C/C++ Warnings", "Illegal Pragmas", "false")
project.SetPreference("C/C++ Warnings", "Empty Declarations", "false")
project.SetPreference("C/C++ Warnings", "Possible Errors", "false")
project.SetPreference("C/C++ Warnings", "Extra Commas", "false")
project.SetPreference("C/C++ Warnings", "Extended Error Checking", "false")
project.SetPreference("C/C++ Warnings", "Treat Warnings As Errors", "false")
project.SetPreference("C/C++ Warnings", "Hidden Virtual Functions", "false")

## PPC PEF
project.SetPreference("PPC PEF", "Fragment Name", "xxxFragmentName")
project.SetPreference("PPC PEF", "Export Symbols", "pragma")

## PPC Linker
project.SetPreference("PPC Linker", "Suppress Warnings", "true")
    
if project.BuildOption("debug"):
    project.SetPreference("PPC Linker", "Generate SYM File", "true")
    project.SetPreference("PPC Linker", "Full Path In Sym Files", "true")
else:
    project.SetPreference("PPC Linker", "Generate SYM File", "false")
    project.SetPreference("PPC Linker", "Full Path In Sym Files", "false")

## PPC CodeGen
project.SetPreference("PPC CodeGen", "Struct Alignment", "Align_PPC")
if project.BuildOption("debug"):
    project.SetPreference("PPC CodeGen", "Peephole Optimizer", "false")
    project.SetPreference("PPC CodeGen", "Processor", "PPC_Generic")
    project.SetPreference("PPC CodeGen", "Schedule", "false")
    project.SetPreference("PPC CodeGen", "Traceback Tables", "TB_InLine")
else:
    project.SetPreference("PPC CodeGen", "Peephole Optimizer", "true")
    project.SetPreference("PPC CodeGen", "Processor", "PPC_750")
    project.SetPreference("PPC CodeGen", "Schedule", "true")
    project.SetPreference("PPC CodeGen", "Traceback Tables", "TB_None")

## PPC Global Optimizer
project.SetPreference("PPC Global Optimizer", "Optimize for", "code_Size")
if project.BuildOption("debug"):
    project.SetPreference("PPC Global Optimizer", "Level", "0")
else:
    project.SetPreference("PPC Global Optimizer", "Level", "4")

## Set AppleScript Editor as creator of make file
## This is legacy because of OSAm, I'm keeping the function call
## for backwards-compatibility
def SetFileCreator(fileName, creatorType):
    pass

## standard "Access Paths->User Paths"
platform.user_paths = [
    '{name:":", recursive:false, origin:project relative}',
    '{name:"SRCROOT:pncrt:", recursive:false, origin:project relative}',
    '{name:"SRCROOT:include:mac:", recursive:false, origin:project relative}',
    '{name:"SRCROOT:pnio:pub:mac:", recursive:false, origin:project relative}',
    '{name:"SRCROOT:pnmisc:pub:mac:", recursive:false, origin:project relative}',
    '{name:"SRCROOT:pnmemmgr:pub:", recursive:false, origin:project relative}',
    '{name:"SRCROOT:pnmemmgr:mac:", recursive:false, origin:project relative}',
    '{name:":mac:",recursive:false,origin:project relative}',
    '{name:":pub:",recursive:false,origin:project relative}',
    '{name:":pub:mac:",recursive:false,origin:project relative}',
    ]

## standard "Access Paths->System Paths"
platform.system_paths = [
    '{name:":MacOS Support:Universal:Interfaces:CIncludes:", recursive:true, origin:shell relative}',
    '{name:":MacOS Support:MacHeaders:", recursive:true, origin:shell relative}',
    '{name:":MacOS Support:Universal:Libraries:StubLibraries:", recursive:true, origin:shell relative}',
    '{name:":MacOS Support:Universal:Interfaces:RIncludes:", recursive:true, origin:shell relative}',
    '{name:":MSL:MSL_C:MSL_Common:", recursive:true, origin:shell relative}',
    '{name:":MSL:MSL_C:MSL_MacOS:", recursive:true, origin:shell relative}',
    '{name:":MSL:MSL_C++:MSL_Common:Include", recursive:true, origin:shell relative}',
    '{name:":MSL:MSL_C++:MSL_MacOS:Lib:PPC:", recursive:true, origin:shell relative}',
    '{name:":MacOS Support:Libraries:Runtime:Runtime PPC:", recursive:true, origin:shell relative}'
    ]

## standard "Access Paths->User Paths" for resource targets
platform.ruser_paths = [
    '{name:":",recursive:false,origin:project relative}',
    '{name:"SRCROOT:include",recursive:true,origin:project relative}',
    ]
    
## standard "Access Paths->System Paths" for resource targets
platform.rsystem_paths = [
    '{name:":Win32-x86 Support:", recursive:true, origin:shell relative}',
    '{name:":MSL:MSL_C:MSL_Common:Include:", recursive:true, origin:shell relative}',
    ]

project.AddPrefixFileInclude("ansi_prefix.mac.h")

