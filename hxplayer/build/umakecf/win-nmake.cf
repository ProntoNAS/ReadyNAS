# 
# ***** BEGIN LICENSE BLOCK *****
# Source last modified: $Id: win-nmake.cf,v 1.1.1.1 2006/03/29 16:45:39 hagi Exp $
# 
# Portions Copyright (c) 1995-2004 RealNetworks, Inc. All Rights Reserved.
# 
# The contents of this file, and the files included with this file,
# are subject to the current version of the RealNetworks Public
# Source License (the "RPSL") available at
# http://www.helixcommunity.org/content/rpsl unless you have licensed
# the file under the current version of the RealNetworks Community
# Source License (the "RCSL") available at
# http://www.helixcommunity.org/content/rcsl, in which case the RCSL
# will apply. You may also obtain the license terms directly from
# RealNetworks.  You may not use this file except in compliance with
# the RPSL or, if you have a valid RCSL with RealNetworks applicable
# to this file, the RCSL.  Please see the applicable RPSL or RCSL for
# the rights, obligations and limitations governing use of the
# contents of the file.
# 
# Alternatively, the contents of this file may be used under the
# terms of the GNU General Public License Version 2 or later (the
# "GPL") in which case the provisions of the GPL are applicable
# instead of those above. If you wish to allow use of your version of
# this file only under the terms of the GPL, and not to allow others
# to use your version of this file under the terms of either the RPSL
# or RCSL, indicate your decision by deleting the provisions above
# and replace them with the notice and other provisions required by
# the GPL. If you do not delete the provisions above, a recipient may
# use your version of this file under the terms of any one of the
# RPSL, the RCSL or the GPL.
# 
# This file is part of the Helix DNA Technology. RealNetworks is the
# developer of the Original Code and owns the copyrights in the
# portions it created.
# 
# This file, and the files included with this file, is distributed
# and made available on an 'AS IS' basis, WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESS OR IMPLIED, AND REALNETWORKS HEREBY DISCLAIMS
# ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET
# ENJOYMENT OR NON-INFRINGEMENT.
# 
# Technology Compatibility Kit Test Suite(s) Location:
#    http://www.helixcommunity.org/content/tck
# 
# Contributor(s):
# 
# ***** END LICENSE BLOCK *****
# 
"""Common settings for using nmake from MSVC."""

# NOTE: Requires cygwin (or some such) for its rm command.
platform.rm.cmd = 'rm -rf'
platform.rm.args['default'] = ''
platform.rm.make_var = 'RM'

platform.rmdir.cmd = 'rm -rf'
platform.rmdir.args['default'] = ''
platform.rmdir.make_var = 'RM_DIR'

## rmfile is used instead of RM when deleting files only
## Backwards compatibility dictates that we can't change
## platform.rm to use "del", this kluge works around that.
platform.rmfile=Command()
platform.rmfile.cmd = 'del /F'
platform.rmfile.args['default'] = ''
platform.rmfile.make_var = 'RM_FILE'
platform.command_list.append(platform.rmfile)


platform.path_sep = '\\'
platform.parent_dir = '..'
platform.current_dir = '.'
platform.line_cont = '\\'
platform.make_source = '$<'
platform.make_target = '$@'
platform.make_depend = ':'
platform.var_begin = '$('
platform.var_end = ')'
platform.sys_lib_arg = ''
platform.copy.cmd = 'copy'
platform.copy.make_var = 'CP'

platform.make.cmd = 'nmake'
platform.make.make_var = 'MAKE'
platform.make.args['default'] = '/nologo'


class WinMakeDir(Command):
    def __init__(self):
        self.make_var = ''
        self.make_flags = ''
                
    def execute(self, dir):
        return 'if NOT exist "%s" mkdir "%s"' % (dir, dir)
platform.mkdir = WinMakeDir()


class WinSubdirMake(Command):
    def __init__(self):
        self.make_var = ''
        self.make_flags = ''
        
    def execute(self, subdir, indent, post_str):
        return indent + 'cd ' + subdir + '\n' + \
               indent + platform.make.execute() + post_str + '\n' + \
               indent + 'cd ' + os.pardir
platform.subdir_make = WinSubdirMake()


class WinMakeDepend(MakeDepend):
    def execute(self, sources, output_dir):
        list = []
        if project.object_dir:
            list.append("/t%s" % (project.object_dir))
        list.append("/m%s" % (project.makefile_name))

        x=os.path.join(BUILD_ROOT, "bin", "mkdepend.exe")
        if not os.path.exists(x):
            x="python %s" % os.path.join(BUILD_ROOT, "bin", "mkdepend")

        cmd = "%s %s %s %s %s" % (
            os.path.join(BUILD_ROOT, "bin", "mkdepend.exe"), 
            string.join(list),
            platform.form_var("DEFINES"),
            platform.form_var("INCLUDES"),
            sources)

        return cmd        

    def setup_flags_var(self):
        return ""

platform.make_dep = WinMakeDepend()

def compile_mkdepend():
     x=os.path.join(BUILD_ROOT,"bin","mkdepend.exe")
     s=os.path.join(BUILD_ROOT,"lib","mkdepend.c")
     if umake_lib.mtime(x) < umake_lib.mtime(s):
         import shell
         cmd="%s /O2 /Fe%s %s" % (cc.cmd, x, s)
         print "Recompling mkdepend: %s" % cmd
         print shell.run(cmd)[1]
     else:
         print "mkdepend.exe is up to date"

AddIdentifyCallback(compile_mkdepend)
