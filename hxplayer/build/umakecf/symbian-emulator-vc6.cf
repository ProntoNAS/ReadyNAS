# -*- python -*-
#
# ***** BEGIN LICENSE BLOCK *****
# Source last modified: $Id: symbian-emulator-vc6.cf,v 1.1.1.1 2006/03/29 16:45:39 hagi Exp $
# 
# Portions Copyright (c) 1995-2004 RealNetworks, Inc. All Rights Reserved.
# 
# The contents of this file, and the files included with this file,
# are subject to the current version of the RealNetworks Public
# Source License (the "RPSL") available at
# http://www.helixcommunity.org/content/rpsl unless you have licensed
# the file under the current version of the RealNetworks Community
# Source License (the "RCSL") available at
# http://www.helixcommunity.org/content/rcsl, in which case the RCSL
# will apply. You may also obtain the license terms directly from
# RealNetworks.  You may not use this file except in compliance with
# the RPSL or, if you have a valid RCSL with RealNetworks applicable
# to this file, the RCSL.  Please see the applicable RPSL or RCSL for
# the rights, obligations and limitations governing use of the
# contents of the file.
# 
# Alternatively, the contents of this file may be used under the
# terms of the GNU General Public License Version 2 or later (the
# "GPL") in which case the provisions of the GPL are applicable
# instead of those above. If you wish to allow use of your version of
# this file only under the terms of the GPL, and not to allow others
# to use your version of this file under the terms of either the RPSL
# or RCSL, indicate your decision by deleting the provisions above
# and replace them with the notice and other provisions required by
# the GPL. If you do not delete the provisions above, a recipient may
# use your version of this file under the terms of any one of the
# RPSL, the RCSL or the GPL.
# 
# This file is part of the Helix DNA Technology. RealNetworks is the
# developer of the Original Code and owns the copyrights in the
# portions it created.
# 
# This file, and the files included with this file, is distributed
# and made available on an 'AS IS' basis, WITHOUT WARRANTY OF ANY
# KIND, EITHER EXPRESS OR IMPLIED, AND REALNETWORKS HEREBY DISCLAIMS
# ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET
# ENJOYMENT OR NON-INFRINGEMENT.
# 
# Technology Compatibility Kit Test Suite(s) Location:
#    http://www.helixcommunity.org/content/tck
# 
# Contributor(s):
# 
# ***** END LICENSE BLOCK *****
# 
"""Gereric symbian emulator .cf file. Common stuff to all emulator/vc6 builds."""

exec_config_file('symbian.cf')

## Symbian PCF file list
platform.pcf_prefix_list[-1:-1] = ['symbianwins']

## Turn these on for emulator builds.
project.AddDefines( '__VC32__',
                    '__WINS__'
                    )

## Output directory setup
if project.BuildOption("debug"):
    project.output_dir = "wins-dbg32"
else:
    project.output_dir = "wins-rel32"

## Add in the symbian WINS lib path.
if project.BuildOption('debug'):
   for inc in ['EPOC32\Release\wins\UDEB']:
        project.AddSystemPaths('"%s"' % os.path.join(GetSDKPath('SYMBIANSDK'), inc))
else:
   for inc in ['EPOC32\Release\wins\UREL']:
        project.AddSystemPaths('"%s"' % os.path.join(GetSDKPath('SYMBIANSDK'), inc))

## Compiler Class
class SymbianCompiler(Compiler):
    def __init__(self):
        Compiler.__init__(self)

    def execute(self, target_file, src_file):
        extra_args = ''

        if project.target_type == 'dll':
            if self.args.has_key('dll'):
                extra_args = self.args['dll']

        if project.build_choices.count('faacs') and \
           project.target_type in ['dll', 'exe']:
            extra_args = '%s /FAacs ' % (extra_args)

        if project.build_choices.count('static'):
            extra_args = '%s /MT' % (extra_args)
        else:
            if project.build_choices.count('force_static_runtime'):
                extra_args = '%s /MT' % (extra_args)
            else:
                extra_args = '%s /MD' % (extra_args)

        if project.build_choices.count('debug'):
            extra_args = extra_args + 'd'

        if project.build_choices.count('pdb'):
            extra_args = '%s /Zi /Fd%s.pdb' % (extra_args, project.target_name)
        elif project.build_choices.count('debug'):
            extra_args = '%s /Z7' % (extra_args)

        return form_string(
            platform.form_var(self.make_var),
            platform.form_var(self.make_flags),
            extra_args,
            self.target_arg + target_file,
            self.source_arg,
            src_file)


## instance Window compiler object
platform.cc = SymbianCompiler()
platform.cxx = SymbianCompiler()

cc = platform.cc
cxx = platform.cxx

cxx.cmd = cc.cmd = 'cl'
cxx.source_arg = cc.source_arg = '/c '
cxx.target_arg = cc.target_arg = '/Fo'
cxx.make_var = cc.make_var = 'CC'
cxx.make_flags = 'CXXFLAGS'
cc.make_flags = 'CCFLAGS'
cxx.include_arg = cc.include_arg = '/I'

# It's important not to accidentally get the standard MSVC includes in
# here, so add /X to make sure we don't get MS include dirs.
# Also turn off _WIN32, _M_IX86 and _WINDOWS
cxx.args['default'] = '/X /nologo /Zp4 /TP /W3 /GX- /U_WIN32 /U_M_IX86 /U_WINDOWS'
cc.args['default'] = '/X /nologo /Zp4 /TP /W3 /GX- /U_WIN32 /U_M_IX86 /U_WINDOWS'
cxx.args['debug'] = cc.args['debug'] = '/Od'

## no_optimize: no optimization on release builds
if project.BuildOption('no_optimize'):
    cc.args['release'] = ''
else:
    cc.args['release'] = '/O1 /Op'

## no_optimize: no optimization on release builds
if project.BuildOption('nt_stackframe'):
    cc.args['release'] = ''
else:
    cc.args['release'] = '/O1 /Op /Oy-'

## symbols: add symbols to release builds
if project.BuildOption('symbols') and not project.BuildOption('pdb'):
    cc.args['release'] = '%s /Z7' % (cc.args['release'])

cxx.args['release'] = cc.args['release']


class SymbianLinker(Linker2):
    def __init__(self):
        Linker2.__init__(self)

        ## these are here to emulate the old linker class
        ## for Umakefil/*.pcf files which do direct modification
        ## of this class
        self.def_file = ""
        self.implib_file = ""

        self.args = {}
        self.args["default"] = ""
        self.args["debug"] = "/debug"
        self.args["release"] = "/OPT:REF"
        self.args["dll"] = ""

    def read_ordinal_file(self, path):
        fil = open(path, "r")

        sym_ord_list = []
        for line in fil.readlines():
            field_list = string.split(line)
            symbol = string.strip(field_list[1])
            ordinal = string.strip(field_list[0])

            sym_ord_list.append((symbol, ordinal))

        return sym_ord_list

    def write_def_file(self, path):
        fil = open(path, 'w')
        
        fil.write('DESCRIPTION\t\'Symbian Helix Player\'\n')
        fil.write('HEAPSIZE\t1024\n')

        ordinalFilename = "%s_ordinal.dat" % project.target_name
        
        if project.target_type == "dll":
            ## exported functions
            fil.write("EXPORTS\n")

            ## check for the data file which defines ordinally-exported
            ## methods/functions
            if project.BuildOption("ordinal") and \
               os.path.isfile(ordinalFilename):
                for (symbol, ordinal) in self.read_ordinal_file(ordinalFilename):
                    fil.write("\t%s @%s NONAME\n" % (symbol, ordinal))

        fil.close()

    def option_arg_list(self):
        arg_list = [
            "/NOLOGO",
            "/MACHINE:i386",
            "/INCREMENTAL:no"]

        if project.target_type == "dll":
            arg_list.append("/SUBSYSTEM:windows")

        ## add any arguments from old build option/argument hash
        for choice in project.build_choices:
            try:
                temp = string.split(self.args[choice])
                arg_list = arg_list + temp
            except KeyError:
                pass

        ## generate map files if "map" option selected
        if project.BuildOption('map') and \
           project.target_type in ["dll", "exe"]:
            arg_list.append("/map")
            base, ext = os.path.splitext(project.OutputName())
            temp = os.path.join(project.output_dir, "%s.map" % (base))
            project.AddCopyTargets(temp)

        if not project.BuildOption('static') and \
           not project.BuildOption('suppress_nodefaultlibs'):
            pncrt_path = os.path.join(project.src_root_path, 'pncrt')
        
        ## somewhat nasty behavior because some of the umakefils
        ## modify this directly
        if project.target_type == "dll":
            if project.opt_target_name:
                implib_basename = project.opt_target_name
            else:
                implib_basename = project.target_name

            implib_basename = "%s.lib" % (implib_basename)
            if self.implib_file:
                implib_basename = os.path.basename(self.implib_file) 
            implib_file = os.path.join(project.output_dir, implib_basename)
            arg_list.append("/IMPLIB:%s" % (implib_file))

        ## write the .def file
        if project.target_type in ["dll"]:
            def_file = "%s.def" % (project.target_name)
            arg_list.append("/DEF:%s" % (def_file))
            self.write_def_file(def_file)
        
        ## form link string
        if project.BuildOption('pdb'):
            arg_list.append("/PDB:%s.pdb" % (project.target_name))
            project.AddCopyTargets("%s.pdb" % (project.target_name))
#        else:
#            arg_list.append("/PDB:NONE")

        return arg_list

    def LinkLIB(self, target_path, objects):
        cmd_list = []

        arg_list = [
            "/LIB",  ## XXX: "/lib" must be the first argument! --JMP
            "/NOLOGO",
            "/OUT:%s" % (target_path),
            objects]
        cmd = "link %s" % (string.join(arg_list))
        cmd_list.append(cmd)

        return cmd_list

    def CleanLIB(self, target_path):
        return [target_path]

    def LinkDLL(self, target_path, objects, static_libs, dynamic_libs):
        global project
        cmd_list = []

        if project.BuildOption('debug'):
            dbg = "debug"
            epoclib = "EPOC32\Release\wins\UDEB"
        else:
            epoclib = "EPOC32\Release\wins\UDEB"
            dbg = "release"
        
        arg_list = ["/DLL", "/NODEFAULTLIB",
                    "/MAP:%s.map" % (target_path),
                    '/entry:"_E32Dll"',
                    '/include:"?_E32Dll@@YGHPAXI0@Z"'] + self.option_arg_list()
        arg_list.append("/OUT:%s" % (target_path))
        arg_list.append("edll.lib")
        arg_list.append(objects)
        arg_list.append(static_libs)
        arg_list.append(dynamic_libs)
        
        cmd = "python %s /LIBPATH:%s -basefile:%s -basedir:%s /base:0x60000000 %s" % (
            os.path.join(BUILD_ROOT,"bin","pylink"),
            os.path.join(GetSDKPath('SYMBIANSDK'), epoclib),
            os.path.join(project.src_root_path,dbg,"rebase.lst"),
            project.module_directory(),
            string.join(arg_list))
        cmd_list.append(cmd)

        return cmd_list

    def CleanDLL(self, target_path):
        list = []
        list.append(target_path)
        return list

    def LinkEXE(self, target_path, objects, static_libs, dynamic_libs):

        if (project.BuildOption('make-app')):
            cmd_list = self.LinkSymbianPolyDll(target_path, "app", objects,
                                           static_libs, dynamic_libs)
        elif (project.BuildOption('make-mdl')):
            cmd_list = self.LinkSymbianPolyDll(target_path, "mdl", objects,
                                           static_libs, dynamic_libs)
        elif (project.BuildOption('make-mmf')):
            cmd_list = self.LinkSymbianPolyDll(target_path, "dll", objects,
                                static_libs, dynamic_libs)
        else:
            cmd_list = self.LinkSymbianExe(target_path, objects, static_libs,
                                           dynamic_libs)
        return cmd_list
    
    def LinkSymbianPolyDll(self, target_path, outExt, objects,
                       static_libs, dynamic_libs):
        
        outExt = string.lower(outExt)
        baseName = re.match("^(.+)\.%s$" % outExt, target_path).group(1)


        cmd_list = []
        if project.BuildOption('debug'):
            epoclib = "EPOC32\Release\wins\UDEB"
        else:
            epoclib = "EPOC32\Release\wins\UDEB"

        # Stage 1 link
        arg_list = self.option_arg_list()
        arg_list.append("/OUT:%s" % (target_path))
        arg_list.append("/NODEFAULTLIB")
        arg_list.append("/SUBSYSTEM:windows")
        arg_list.append("/dll")
        arg_list.append('/entry:"_E32Dll"')
        arg_list.append("/LIBPATH:%s" % (os.path.join(GetSDKPath('SYMBIANSDK'), epoclib)))
        arg_list.append('/include:"?_E32Dll@@YGHPAXI0@Z"')        
        arg_list.append(objects)
        arg_list.append(static_libs)
        arg_list.append(dynamic_libs)
        arg_list.append("edll.lib")

        cmd = "link %s" % (string.join(arg_list))
        cmd_list.append(cmd)

        # Remove the .app file just generated
        cmd = "%s \"%s\"" % (platform.rm.cmd, target_path)
        cmd_list.append(cmd)

        # Remove the .exp file just generated
        cmd = "%s \"%s\"" % (platform.rm.cmd, baseName)
        
        arg_list = []
        arg_list.append('/exports')
        arg_list.append('/out:"%s.inf"' % baseName)
        arg_list.append('"%s.lib"' % baseName)
        cmd = "dumpbin %s" % (string.join(arg_list))
        cmd_list.append(cmd)

        # Remove the .lib file
        cmd = "%s \"%s.lib\"" % (platform.rm.cmd, baseName)
        cmd_list.append(cmd)

        arg_list = []
        arg_list.append("-S makedef.pl")
        arg_list.append("-Inffile \"%s.inf\"" % baseName)
        if( outExt == "app"):
            arg_list.append("-1 ?NewApplication@@YAPAVCApaApplication@@XZ")
        elif( outExt == "mdl"):
            arg_list.append("-1 ?CreateRecognizer@@YAPAVCApaDataRecognizerType@@XZ")
        elif( outExt == "dll"):
            arg_list.append("-1 ?ImplementationGroupProxy@@YAPBUTImplementationProxy@@AAH@Z")
        else:
            raise "don't know what to export for type '%s'" % outExt
          
        arg_list.append("\"%s.def\"" % baseName)
        cmd = "perl %s" %(string.join(arg_list))
        cmd_list.append(cmd)

        # Remove the .inf file
        cmd = "%s \"%s.inf\"" % (platform.rm.cmd, baseName)
        cmd_list.append(cmd)

        # Stage 2 link
        arg_list = self.option_arg_list()
        arg_list.append("/OUT:%s" % (target_path))
        arg_list.append("/NODEFAULTLIB")
        arg_list.append("/SUBSYSTEM:windows")
        arg_list.append("/MAP:%s.map" % (target_path))
        arg_list.append("/dll")
        arg_list.append('/entry:"_E32Dll"')
        arg_list.append("/LIBPATH:%s" % (os.path.join(GetSDKPath('SYMBIANSDK'), epoclib)))
        arg_list.append('/include:"?_E32Dll@@YGHPAXI0@Z"')
        arg_list.append('/def:"%s.def"' % baseName)
        arg_list.append(objects)
        arg_list.append(static_libs)
        arg_list.append(dynamic_libs)
        arg_list.append("edll.lib")

        cmd = "link %s" % (string.join(arg_list))
        cmd_list.append(cmd)
        
        return cmd_list

    
    def LinkSymbianExe(self, target_path, objects,
                       static_libs, dynamic_libs):
        cmd_list = []
        if project.BuildOption('debug'):
            epoclib = "EPOC32\Release\wins\UDEB"
        else:
            epoclib = "EPOC32\Release\wins\UDEB"
        

        arg_list = self.option_arg_list()
        arg_list.append("/OUT:%s" % (target_path))
        arg_list.append("/NODEFAULTLIB")
        arg_list.append("/SUBSYSTEM:windows")
        arg_list.append("/MAP:%s.map" % (target_path))
        arg_list.append('/entry:"_E32Startup"')
        arg_list.append("/LIBPATH:%s" % (os.path.join(GetSDKPath('SYMBIANSDK'),
                                                      epoclib)))
        arg_list.append('/include:"?_E32Startup@@YGXXZ"')
        
        arg_list.append(objects)
        arg_list.append(static_libs)
        arg_list.append(dynamic_libs)
        arg_list.append("eexe.lib")

        cmd = "link %s" % (string.join(arg_list))
        cmd_list.append(cmd)

        return cmd_list
    
    def CleanEXE(self, target_path):
        list = []
        list.append(target_path)
        return list

platform.link = SymbianLinker()


## symbols: keep symbols in release builds
if project.BuildOption('symbols'):
    platform.link.args['release'] = platform.link.args['release'] + ' /debug'







