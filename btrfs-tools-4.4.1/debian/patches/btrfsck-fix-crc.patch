From c6a0509b2e990e4515068dd5c03e1080d64c9e88 Mon Sep 17 00:00:00 2001
From: Justin Maggard <jmaggard10@gmail.com>
Date: Tue, 26 Aug 2014 11:04:35 -0700
Subject: [PATCH 3/6] btrfsck: add --fix-crc option.

---
 cmds-check.c | 20 ++++++++++++++++++++
 disk-io.c    | 13 +++++++++++--
 2 files changed, 31 insertions(+), 2 deletions(-)

diff --git a/cmds-check.c b/cmds-check.c
index 778f141..342d4dd 100644
--- a/cmds-check.c
+++ b/cmds-check.c
@@ -1797,6 +1797,11 @@ static int walk_down_tree(struct btrfs_root *root, struct btrfs_path *path,
 		WARN_ON(*level < 0);
 		WARN_ON(*level >= BTRFS_MAX_LEVEL);
 		cur = path->nodes[*level];
+		if (!cur) {
+			fprintf(stderr, "Warning: path->nodes[%d] == 0\n",
+				*level);
+			return 0;
+		}
 
 		if (btrfs_header_level(cur) != *level)
 			WARN_ON(1);
@@ -9383,9 +9388,14 @@ const char * const cmd_check_usage[] = {
 	"                            print subvolume extents and sharing state",
 	"-r|--tree-root <bytenr>     use the given bytenr for the tree root",
 	"-p|--progress               indicate progress",
+#ifdef __arm__
+	"--fix-crc                   try to fix bad CRCs",
+#endif
 	NULL
 };
 
+extern int fix_crc;
+
 int cmd_check(int argc, char **argv)
 {
 	struct cache_tree root_cache;
@@ -9418,6 +9428,9 @@ int cmd_check(int argc, char **argv)
 			{ "qgroup-report", no_argument, NULL, 'Q' },
 			{ "tree-root", required_argument, NULL, 'r' },
 			{ "progress", no_argument, NULL, 'p' },
+#ifdef __arm__
+			{ "fix-crc", 0, NULL, 299 },
+#endif
 			{ NULL, 0, NULL, 0}
 		};
 
@@ -9479,6 +9492,13 @@ int cmd_check(int argc, char **argv)
 			case OPT_CHECK_CSUM:
 				check_data_csum = 1;
 				break;
+#ifdef __arm__
+			case 299:
+				printf("Fixing bad CRC\n");
+				fix_crc = 1;
+				ctree_flags |= OPEN_CTREE_WRITES;
+				break;
+#endif
 		}
 	}
 	argc = argc - optind;
diff --git a/disk-io.c.orig b/disk-io.c
index 7a63b91..fbe973d 100644
--- a/disk-io.c.orig
+++ b/disk-io.c
@@ -123,6 +123,7 @@ void btrfs_csum_final(u32 crc, char *result)
 	*(__le32 *)result = ~cpu_to_le32(crc);
 }
 
+int fix_crc;
 static int __csum_tree_block_size(struct extent_buffer *buf, u16 csum_size,
 				  int verify, int silent)
 {
@@ -136,12 +137,20 @@ static int __csum_tree_block_size(struct extent_buffer *buf, u16 csum_size,
 
 	if (verify) {
 		if (memcmp_extent_buffer(buf, result, 0, csum_size)) {
-			if (!silent)
+			int rval = 1;
+
+			if (!silent || fix_crc)
 				printk("checksum verify failed on %llu found %08X wanted %08X\n",
 				       (unsigned long long)buf->start,
 				       *((u32 *)result),
 				       *((u32*)(char *)buf->data));
-			return 1;
+			if (fix_crc) {
+				write_extent_buffer(buf, result, 0, csum_size);
+				write_extent_to_disk(buf);
+				printk(">> Fixed\n");
+				rval = 0;
+			}
+			return rval;
 		}
 	} else {
 		write_extent_buffer(buf, result, 0, csum_size);
