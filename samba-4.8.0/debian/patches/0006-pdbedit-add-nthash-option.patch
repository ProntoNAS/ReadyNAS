From 216f1f565f8b247709e0395b7883b84aacb851a9 Mon Sep 17 00:00:00 2001
From: Justin Maggard <jmaggard@netgear.com>
Date: Thu, 31 Jan 2019 10:37:06 +0800
Subject: [PATCH] pdbedit add nthash option.

---
 source3/include/passdb.h     |  1 -
 source3/passdb/pdb_get_set.c | 24 +++--------
 source3/utils/pdbedit.c      | 98 ++++++++++++++++++++++++++------------------
 3 files changed, 65 insertions(+), 58 deletions(-)

diff --git a/source3/include/passdb.h b/source3/include/passdb.h
index 7579cdc..d534a78 100644
--- a/source3/include/passdb.h
+++ b/source3/include/passdb.h
@@ -811,7 +811,6 @@ bool pdb_set_nt_passwd(struct samu *sampass, const uint8_t pwd[NT_HASH_LEN], enu
 bool pdb_set_lanman_passwd(struct samu *sampass, const uint8_t pwd[LM_HASH_LEN], enum pdb_value_state flag);
 bool pdb_set_pw_history(struct samu *sampass, const uint8_t *pwd, uint32_t historyLen, enum pdb_value_state flag);
 bool pdb_set_plaintext_pw_only(struct samu *sampass, const char *password, enum pdb_value_state flag);
-bool pdb_update_history(struct samu *sampass, const uint8_t new_nt[NT_HASH_LEN]);
 bool pdb_set_bad_password_count(struct samu *sampass, uint16_t bad_password_count, enum pdb_value_state flag);
 bool pdb_set_logon_count(struct samu *sampass, uint16_t logon_count, enum pdb_value_state flag);
 bool pdb_set_country_code(struct samu *sampass, uint16_t country_code,
diff --git a/source3/passdb/pdb_get_set.c b/source3/passdb/pdb_get_set.c
index 74a71cb..9f27459 100644
--- a/source3/passdb/pdb_get_set.c
+++ b/source3/passdb/pdb_get_set.c
@@ -999,6 +999,10 @@ bool pdb_set_plaintext_passwd(struct samu *sampass, const char *plaintext)
 {
 	uchar new_lanman_p16[LM_HASH_LEN];
 	uchar new_nt_p16[NT_HASH_LEN];
+	uchar *pwhistory;
+	uint32_t pwHistLen;
+	uint32_t current_history_len;
+	const uint8_t *current_history;
 
 	if (!plaintext)
 		return False;
@@ -1028,21 +1032,6 @@ bool pdb_set_plaintext_passwd(struct samu *sampass, const char *plaintext)
 	if (!pdb_set_pass_last_set_time (sampass, time(NULL), PDB_CHANGED))
 		return False;
 
-	
-	return pdb_update_history(sampass, new_nt_p16);
-}
-
-/*********************************************************************
- Update password history after change 
- ********************************************************************/
-
-bool pdb_update_history(struct samu *sampass, const uint8_t new_nt[NT_HASH_LEN])
-{
-	uchar *pwhistory;
-	uint32_t pwHistLen;
-	uint32_t current_history_len;
-	const uint8_t *current_history;
-
 	if ((pdb_get_acct_ctrl(sampass) & ACB_NORMAL) == 0) {
 		/*
 		 * No password history for non-user accounts
@@ -1066,7 +1055,7 @@ bool pdb_update_history(struct samu *sampass, const uint8_t new_nt[NT_HASH_LEN])
 	 */
 	current_history = pdb_get_pw_history(sampass, &current_history_len);
 	if ((current_history_len != 0) && (current_history == NULL)) {
-		DEBUG(1, ("pdb_update_history: pwhistory == NULL!\n"));
+		DEBUG(1, ("pdb_set_plaintext_passwd: pwhistory == NULL!\n"));
 		return false;
 	}
 
@@ -1107,12 +1096,11 @@ bool pdb_update_history(struct samu *sampass, const uint8_t new_nt[NT_HASH_LEN])
 	 * The old format was to store the md5 hash of
 	 * the salt+newpw.
 	 */
-	memcpy(&pwhistory[PW_HISTORY_SALT_LEN], new_nt, SALTED_MD5_HASH_LEN);
+	memcpy(&pwhistory[PW_HISTORY_SALT_LEN], new_nt_p16, SALTED_MD5_HASH_LEN);
 
 	pdb_set_pw_history(sampass, pwhistory, pwHistLen, PDB_CHANGED);
 
 	return True;
-
 }
 
 /* check for any PDB_SET/CHANGED field and fill the appropriate mask bit */
diff --git a/source3/utils/pdbedit.c b/source3/utils/pdbedit.c
index 09f0320..8094481 100644
--- a/source3/utils/pdbedit.c
+++ b/source3/utils/pdbedit.c
@@ -27,6 +27,8 @@
 #include "passdb.h"
 #include "cmdline_contexts.h"
 
+#define BIT_LM_HASH	0x00000001
+#define BIT_NT_HASH	0x00000002
 #define BIT_BACKEND	0x00000004
 #define BIT_VERBOSE	0x00000008
 #define BIT_SPSTYLE	0x00000010
@@ -56,10 +58,9 @@
 #define BIT_LOGONHOURS	0x10000000
 #define BIT_KICKOFFTIME	0x20000000
 #define BIT_DESCRIPTION 0x40000000
-#define BIT_PWSETNTHASH 0x80000000
 
-#define MASK_ALWAYS_GOOD	0x0000001F
-#define MASK_USER_GOOD		0xE0405FE0
+#define MASK_ALWAYS_GOOD	0x0000001C
+#define MASK_USER_GOOD		0x60405FE3
 
 static int get_sid_from_cli_string(struct dom_sid *sid, const char *str_sid)
 {
@@ -319,12 +320,6 @@ static int print_sam_info (struct samu *sam_pwent, bool verbosity, bool smbpwdst
 		hours = pdb_get_hours(sam_pwent);
 		pdb_sethexhours(temp, hours);
 		printf ("Logon hours         : %s\n", temp);
-		if (smbpwdstyle){
-			pdb_sethexpwd(temp, pdb_get_lanman_passwd(sam_pwent), pdb_get_acct_ctrl(sam_pwent));
-			printf ("LM hash             : %s\n", temp);
-			pdb_sethexpwd(temp, pdb_get_nt_passwd(sam_pwent), pdb_get_acct_ctrl(sam_pwent));
-			printf ("NT hash             : %s\n", temp);
-		}	
 
 	} else if (smbpwdstyle) {
 		char lm_passwd[33];
@@ -482,6 +477,7 @@ static int fix_users_list(void)
 			continue;
 		}
 
+		pdb_set_domain(sam_pwent, lp_netbios_name(), 0);
 		status = pdb_update_sam_account(sam_pwent);
 		if (!NT_STATUS_IS_OK(status)) {
 			printf("Update of user %s failed!\n",
@@ -497,6 +493,31 @@ done:
 	return ret;
 }
 
+
+/*********************************************************
+ Convert a string of hex values (as in the hash field of
+ pdbedit -Lw) to the actual hash.
+**********************************************************/
+
+static int convert_hex_to_hash(const char *hex, uint8_t *hash, int hash_size)
+{
+	int i, hex_len, i_limit;
+	const char *index = hex;
+
+	if (!hex || hash_size <= 0)
+		return -1;
+	hex_len = strlen(hex) / 2;  // # of hex values, not length of hex string
+	if (hex_len <= 0)
+		return -1;
+	i_limit = hex_len < hash_size ? hex_len : hash_size;
+	for (i = 0; i < i_limit; ++i) {
+		sscanf(index, "%2hhx", &hash[i]);
+		index += 2;
+	}
+	return i;
+}
+
+
 /*********************************************************
  Set User Info
 **********************************************************/
@@ -507,7 +528,8 @@ static int set_user_info(const char *username, const char *fullname,
 			 const char *profile, const char *account_control,
 			 const char *user_sid, const char *user_domain,
 			 const bool badpw, const bool hours,
-			 const char *kickoff_time, const char *str_hex_pwd)
+			 const char *kickoff_time,
+			 const char *lm_hash, const char *nt_hash)
 {
 	bool updated_autolock = False, updated_badpw = False;
 	struct samu *sam_pwent;
@@ -516,6 +538,8 @@ static int set_user_info(const char *username, const char *fullname,
 	uint32_t acb_flags;
 	uint32_t not_settable;
 	uint32_t new_flags;
+	uint8_t lm_pwd[LM_HASH_LEN];
+	uint8_t nt_pwd[NT_HASH_LEN];
 	struct dom_sid u_sid;
 	bool ret;
 
@@ -609,33 +633,27 @@ static int set_user_info(const char *username, const char *fullname,
 
 		pdb_set_kickoff_time(sam_pwent, value, PDB_CHANGED);
 	}
-	if (str_hex_pwd) {
-		unsigned char  new_nt_p16[NT_HASH_LEN];
-	        if(strlen(str_hex_pwd) != (NT_HASH_LEN *2)){
-			fprintf(stderr, "Invalid hash\n");
-			return -1;
-		}
-					 
-		pdb_gethexpwd(str_hex_pwd, new_nt_p16);
-		
-		if (!pdb_set_nt_passwd (sam_pwent, new_nt_p16 , PDB_CHANGED)) {
-			fprintf(stderr, "Failed to set password from nt-hash\n");
-			return -1;
-		}	
 
-		if (!pdb_set_pass_last_set_time (sam_pwent, time(NULL), PDB_CHANGED)){
-			fprintf(stderr, "Failed to set last password set time\n");
-			return -1;
-		}	
-		if (!pdb_update_history(sam_pwent, new_nt_p16)){
-			fprintf(stderr, "Failed to update password history\n");
-			return -1;
-		}
+	if (lm_hash) {
+		memset(lm_pwd, 0, LM_HASH_LEN);
+		if (strlen(lm_hash) > LM_HASH_LEN)
+			convert_hex_to_hash(lm_hash, lm_pwd, sizeof(lm_pwd));
+		else
+			strncpy(lm_pwd, lm_hash, LM_HASH_LEN);
+		pdb_set_lanman_passwd(sam_pwent, lm_pwd, PDB_CHANGED);
+	}
+
+	if (nt_hash) {
+		memset(nt_pwd, 0, NT_HASH_LEN);
+		if (strlen(nt_hash) > NT_HASH_LEN)
+			convert_hex_to_hash(nt_hash, nt_pwd, sizeof(nt_pwd));
+		else
+			strncpy(nt_pwd, nt_hash, NT_HASH_LEN);
+		pdb_set_nt_passwd(sam_pwent, nt_pwd, PDB_CHANGED);
 	}
 
 	if (NT_STATUS_IS_OK(pdb_update_sam_account(sam_pwent))) {
-		
-		print_user_info(username, True, (str_hex_pwd != NULL ));
+		print_user_info(username, True, False);
 	} else {
 		fprintf (stderr, "Unable to modify entry!\n");
 		TALLOC_FREE(sam_pwent);
@@ -1053,7 +1071,8 @@ int main(int argc, const char **argv)
 	static int pw_from_stdin = False;
 	struct pdb_methods *bin, *bout;
 	static char *kickoff_time = NULL;
-	static char *str_hex_pwd = NULL;
+	static char *lm_hash = NULL;
+	static char *nt_hash = NULL;
 	TALLOC_CTX *frame = talloc_stackframe();
 	NTSTATUS status;
 	poptContext pc;
@@ -1091,7 +1110,8 @@ int main(int argc, const char **argv)
 		{"time-format", 0, POPT_ARG_STRING, &pwd_time_format, 0, "The time format for time parameters", NULL },
 		{"password-from-stdin", 't', POPT_ARG_NONE, &pw_from_stdin, 0, "get password from standard in", NULL},
 		{"kickoff-time", 'K', POPT_ARG_STRING, &kickoff_time, 0, "set the kickoff time", NULL},
-		{"set-nt-hash", 0, POPT_ARG_STRING, &str_hex_pwd, 0, "set password from nt-hash", NULL},
+		{"lm-hash", 0, POPT_ARG_STRING, &lm_hash, 0, "set the lanman password", NULL},
+		{"nt-hash", 0, POPT_ARG_STRING, &nt_hash, 0, "set the nt password", NULL},
 		POPT_COMMON_SAMBA
 		POPT_TABLEEND
 	};
@@ -1154,9 +1174,9 @@ int main(int argc, const char **argv)
 			(badpw_reset ? BIT_BADPWRESET : 0) +
 			(hours_reset ? BIT_LOGONHOURS : 0) +
 			(kickoff_time ? BIT_KICKOFFTIME : 0) +
-			(str_hex_pwd ? BIT_PWSETNTHASH : 0 ) +
-			(acct_desc ? BIT_DESCRIPTION : 0);
-			
+			(acct_desc ? BIT_DESCRIPTION : 0) +
+			(lm_hash ? BIT_LM_HASH : 0) +
+			(nt_hash ? BIT_NT_HASH : 0);
 
 	if (setparms & BIT_BACKEND) {
 		/* HACK: set the global passdb backend by overwriting globals.
@@ -1353,7 +1373,7 @@ int main(int argc, const char **argv)
 						     profile_path, account_control,
 						     user_sid, user_domain,
 						     badpw_reset, hours_reset,
-						     kickoff_time, str_hex_pwd);
+						     kickoff_time, lm_hash, nt_hash);
 			}
 		}
 	}
-- 
2.1.4

