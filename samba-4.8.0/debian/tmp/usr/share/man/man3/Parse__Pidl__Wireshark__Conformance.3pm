.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "..::pidl::lib::Parse::Pidl::Wireshark::Conformance 3"
.TH ..::pidl::lib::Parse::Pidl::Wireshark::Conformance 3 "2018-01-14" "perl v5.20.2" "Samba Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Parse::Pidl::Wireshark::Conformance \- Conformance file parser for Wireshark
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module supports parsing Wireshark conformance files (*.cnf).
.SH "FILE FORMAT"
.IX Header "FILE FORMAT"
Pidl needs additional data for Wireshark output. This data is read from 
so-called conformance files. This section describes the format of these 
files.
.PP
Conformance files are simple text files with a single command on each line.
Empty lines and lines starting with a '#' character are ignored.
Arguments to commands are separated by spaces.
.PP
The following commands are currently supported:
.IP "\fI\s-1TYPE\s0\fR name dissector ft_type base_type mask valsstring alignment" 4
.IX Item "TYPE name dissector ft_type base_type mask valsstring alignment"
Register new data type with specified name, what dissector function to call 
and what properties to give header fields for elements of this type.
.IP "\fI\s-1NOEMIT\s0\fR type" 4
.IX Item "NOEMIT type"
Suppress emitting a dissect_type function for the specified type
.IP "\fI\s-1PARAM_VALUE\s0\fR type param" 4
.IX Item "PARAM_VALUE type param"
Set parameter to specify to dissector function for given type.
.IP "\fI\s-1HF_FIELD\s0\fR hf title filter ft_type base_type valsstring mask description" 4
.IX Item "HF_FIELD hf title filter ft_type base_type valsstring mask description"
Generate a custom header field with specified properties.
.IP "\fI\s-1HF_RENAME\s0\fR old_hf_name new_hf_name" 4
.IX Item "HF_RENAME old_hf_name new_hf_name"
Force the use of new_hf_name when the parser generator was going to 
use old_hf_name.
.Sp
This can be used in conjunction with \s-1HF_FIELD\s0 in order to make more than 
one element use the same filter name.
.IP "\fI\s-1ETT_FIELD\s0\fR ett" 4
.IX Item "ETT_FIELD ett"
Register a custom ett field
.IP "\fI\s-1STRIP_PREFIX\s0\fR prefix" 4
.IX Item "STRIP_PREFIX prefix"
Remove the specified prefix from all function names (if present).
.IP "\fI\s-1PROTOCOL\s0\fR longname shortname filtername" 4
.IX Item "PROTOCOL longname shortname filtername"
Change the short\-, long\- and filter-name for the current interface in
Wireshark.
.IP "\fI\s-1FIELD_DESCRIPTION\s0\fR field desc" 4
.IX Item "FIELD_DESCRIPTION field desc"
Change description for the specified header field. `field' is the hf name of the field.
.IP "\fI\s-1IMPORT\s0\fR dissector code..." 4
.IX Item "IMPORT dissector code..."
Code to insert when generating the specified dissector. \f(CW@HF\fR@ and 
\&\f(CW@PARAM\fR@ will be substituted.
.IP "\fI\s-1INCLUDE\s0\fR filename" 4
.IX Item "INCLUDE filename"
Include conformance data from the specified filename in the dissector.
.ie n .IP "\fI\s-1TFS\s0\fR hf_name ""true string"" ""false string""" 4
.el .IP "\fI\s-1TFS\s0\fR hf_name ``true string'' ``false string''" 4
.IX Item "TFS hf_name true string false string"
Override the text shown when a bitmap boolean value is enabled or disabled.
.IP "\fI\s-1MANUAL\s0\fR fn_name" 4
.IX Item "MANUAL fn_name"
Force pidl to not generate a particular function but allow the user 
to write a function manually. This can be used to remove the function 
for only one level for a particular element rather than all the functions and 
ett/hf variables for a particular element as the \s-1NOEMIT\s0 command does.
.IP "\fI\s-1CODE START\s0\fR/\fI\s-1CODE END\s0\fR Begin and end a section of code to be put directly into the generated source file for the dissector." 4
.IX Item "CODE START/CODE END Begin and end a section of code to be put directly into the generated source file for the dissector."
.PD 0
.IP "\fI\s-1HEADER START\s0\fR/\fI\s-1HEADER END\s0\fR Begin and end a section of code to be put directly into the generated header file for the dissector." 4
.IX Item "HEADER START/HEADER END Begin and end a section of code to be put directly into the generated header file for the dissector."
.PD
.SH "EXAMPLE"
.IX Header "EXAMPLE"
.Vb 1
\&        INFO_KEY OpenKey.Ke
.Ve
