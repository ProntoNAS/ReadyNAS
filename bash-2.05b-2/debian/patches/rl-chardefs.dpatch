#! /bin/sh -e

if [ $# -eq 3 -a "$2" = '-d' ]; then
    pdir="-d $3"
elif [ $# -ne 1 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch) patch $pdir -f --no-backup-if-mismatch -p0 < $0;;
    -unpatch) patch $pdir -f --no-backup-if-mismatch -R -p0 < $0;;
    *)
	echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
	exit 1
esac
exit 0

# DP: Remove the NON_NEGATIVE macro in the definition of the _rl_lowercase_p,
# DP: _rl_uppercase_p, _rl_pure_alphabetic, ALPHABETIC macros. Safe for glibc.

--- lib/readline/chardefs.h~	2002-02-14 17:38:18.000000000 +0100
+++ lib/readline/chardefs.h	2004-10-17 12:17:30.000000000 +0200
@@ -77,8 +77,6 @@
 #  define isxdigit(c)   (isdigit((c)) || ((c) >= 'a' && (c) <= 'f') || ((c) >= 'A' && (c) <= 'F'))
 #endif
 
-#define NON_NEGATIVE(c)	((unsigned char)(c) == (c))
-
 /* Some systems define these; we want our definitions. */
 #undef ISPRINT
 
@@ -90,12 +88,12 @@
 #define ISUPPER(c)	(IN_CTYPE_DOMAIN (c) && isupper (c))
 #define ISXDIGIT(c)	(IN_CTYPE_DOMAIN (c) && isxdigit (c))
 
-#define _rl_lowercase_p(c)	(NON_NEGATIVE(c) && ISLOWER(c))
-#define _rl_uppercase_p(c)	(NON_NEGATIVE(c) && ISUPPER(c))
+#define _rl_lowercase_p(c)	ISLOWER(c)
+#define _rl_uppercase_p(c)	ISUPPER(c)
 #define _rl_digit_p(c)		((c) >= '0' && (c) <= '9')
 
-#define _rl_pure_alphabetic(c)	(NON_NEGATIVE(c) && ISALPHA(c))
-#define ALPHABETIC(c)		(NON_NEGATIVE(c) && ISALNUM(c))
+#define _rl_pure_alphabetic(c)	ISALPHA(c)
+#define ALPHABETIC(c)		ISALNUM(c)
 
 #ifndef _rl_to_upper
 #  define _rl_to_upper(c) (_rl_lowercase_p(c) ? toupper((unsigned char)c) : (c))
