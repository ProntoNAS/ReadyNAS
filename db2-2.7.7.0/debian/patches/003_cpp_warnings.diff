--- db-2.7.7.orig/btree/bt_curadj.c
+++ db-2.7.7/btree/bt_curadj.c
@@ -249,7 +249,7 @@
 	for (dbc = TAILQ_FIRST(&dbp->active_queue);
 	    dbc != NULL; dbc = TAILQ_NEXT(dbc, links)) {
 		cp = (CURSOR *)dbc->internal;
-		if (cp->pgno == ppgno)
+		if (cp->pgno == ppgno) {
 			if (cp->indx < split_indx) {
 				if (cleft)
 					cp->pgno = lpgno;
@@ -257,7 +257,8 @@
 				cp->pgno = rpgno;
 				cp->indx -= split_indx;
 			}
-		if (cp->dpgno == ppgno)
+		}
+		if (cp->dpgno == ppgno) {
 			if (cp->dindx < split_indx) {
 				if (cleft)
 					cp->dpgno = lpgno;
@@ -265,6 +266,7 @@
 				cp->dpgno = rpgno;
 				cp->dindx -= split_indx;
 			}
+		}
 	}
 	DB_THREAD_UNLOCK(dbp);
 }
--- db-2.7.7.orig/btree/bt_search.c
+++ db-2.7.7/btree/bt_search.c
@@ -327,11 +327,12 @@
 	for (epg = cp->sp; epg <= cp->csp; ++epg) {
 		if (epg->page != NULL)
 			(void)memp_fput(dbp->mpf, epg->page, 0);
-		if (epg->lock != LOCK_INVALID)
+		if (epg->lock != LOCK_INVALID) {
 			if (nolocks)
 				(void)__BT_LPUT(dbc, epg->lock);
 			else
 				(void)__BT_TLPUT(dbc, epg->lock);
+		}
 	}
 
 	/* Clear the stack, all pages have been released. */
--- db-2.7.7.orig/common/db_apprec.c
+++ db-2.7.7/common/db_apprec.c
@@ -178,11 +178,12 @@
 		else
 			ret = __db_dispatch(lp,
 			    &data, &lsn, TXN_BACKWARD_ROLL, txninfo);
-		if (ret != 0)
+		if (ret != 0) {
 			if (ret != DB_TXN_CKP)
 				goto msgerr;
 			else
 				ret = 0;
+		}
 	}
 	if (ret != 0 && ret != DB_NOTFOUND)
 		goto out;
@@ -192,17 +193,19 @@
 	 */
 	for (ret = log_get(lp, &lsn, &data, DB_NEXT);
 	    ret == 0; ret = log_get(lp, &lsn, &data, DB_NEXT)) {
-		if (dbenv->tx_recover != NULL)
+		if (dbenv->tx_recover != NULL) {
 			ret = dbenv->tx_recover(lp,
 			    &data, &lsn, TXN_FORWARD_ROLL, txninfo);
-		else
+		} else {
 			ret = __db_dispatch(lp,
 			    &data, &lsn, TXN_FORWARD_ROLL, txninfo);
-		if (ret != 0)
+		}
+		if (ret != 0) {
 			if (ret != DB_TXN_CKP)
 				goto msgerr;
 			else
 				ret = 0;
+		}
 	}
 	if (ret != DB_NOTFOUND)
 		goto out;
--- db-2.7.7.orig/common/db_region.c
+++ db-2.7.7/common/db_region.c
@@ -278,7 +278,7 @@
 	 * obvious races in doing this, but it should eventually settle down
 	 * to a winner and then things should proceed normally.
 	 */
-	if ((ret = __db_mapregion(infop->name, infop)) != 0)
+	if ((ret = __db_mapregion(infop->name, infop)) != 0) {
 		if (ret == EAGAIN) {
 			/*
 			 * Pretend we created the region even if we didn't so
@@ -289,6 +289,7 @@
 			goto retry;
 		} else
 			goto err;
+	}
 
 region_init:
 	/*
@@ -475,7 +476,7 @@
 	 * REGION_LASTDETACH flag, so that we do all necessary cleanup when
 	 * the application closes the region.
 	 */
-	if (F_ISSET(infop, REGION_PRIVATE) && !F_ISSET(infop, REGION_MALLOC))
+	if (F_ISSET(infop, REGION_PRIVATE) && !F_ISSET(infop, REGION_MALLOC)) {
 		if (F_ISSET(infop, REGION_HOLDINGSYS))
 			F_SET(infop, REGION_LASTDETACH);
 		else {
@@ -485,6 +486,7 @@
 			(void)__os_close(infop->fd);
 			(void)__os_unlink(infop->name);
 		}
+	}
 
 	return (ret);
 }
@@ -508,8 +510,18 @@
 	 * If the region was removed when it was created, no further action
 	 * is required.
 	 */
-	if (F_ISSET(infop, REGION_REMOVED))
+	if (F_ISSET(infop, REGION_REMOVED)) {
+		if (F_ISSET(infop, REGION_PRIVATE)
+		    && !F_ISSET(infop, REGION_MALLOC))
+			/*
+			 * If it is private and not malloced, the
+			 * region is still mapped in. We need to
+			 * discard our mapping of the region.
+			 */
+			ret = __db_unmapregion(infop);
 		goto done;
+	}
+
 	/*
 	 * If the region was created in memory returned by malloc, the only
 	 * action required is freeing the memory.
@@ -538,12 +550,14 @@
 	 * what happened.
 	 */
 	detach = 0;
-	if (F_ISSET(infop, REGION_LASTDETACH))
+	if (F_ISSET(infop, REGION_LASTDETACH)) {
 		if (rlp->refcnt == 0) {
 			detach = 1;
 			rlp->valid = 0;
-		} else
+		} else {
 			ret = EBUSY;
+		}
+	}
 
 	/* Release the lock. */
 	(void)__db_mutex_unlock(&rlp->lock, infop->fd);
--- db-2.7.7.orig/common/db_salloc.c
+++ db-2.7.7/common/db_salloc.c
@@ -222,11 +222,12 @@
 		merged = 1;
 	}
 
-	if (!merged)
+	if (!merged) {
 		if (lastp == NULL)
 			SH_LIST_INSERT_HEAD(hp, newp, links, __data);
 		else
 			SH_LIST_INSERT_AFTER(lastp, newp, links, __data);
+	}
 }
 
 /*
--- db-2.7.7.orig/db/db.c
+++ db-2.7.7/db/db.c
@@ -193,11 +193,12 @@
 	 * are possible for temporary files.
 	 */
 	if (dbenv != NULL) {
-		if (dbenv->lk_info != NULL)
+		if (dbenv->lk_info != NULL) {
 			if (F_ISSET(dbenv, DB_ENV_CDB))
 				F_SET(dbp, DB_AM_CDB);
 			else
 				F_SET(dbp, DB_AM_LOCKING);
+		}
 		if (fname != NULL && dbenv->lg_info != NULL)
 			F_SET(dbp, DB_AM_LOGGING);
 	}
@@ -277,7 +278,7 @@
 		retry_cnt = 0;
 open_retry:	if (LF_ISSET(DB_CREATE)) {
 			if ((ret = __db_open(real_name, flags | DB_EXCL,
-			    OKFLAGS | DB_EXCL, mode, &fd)) != 0)
+			    OKFLAGS | DB_EXCL, mode, &fd)) != 0) {
 				if (ret == EEXIST) {
 					LF_CLR(DB_CREATE);
 					goto open_retry;
@@ -286,6 +287,7 @@
 					    "%s: %s", fname, strerror(ret));
 					goto err;
 				}
+			}
 		} else
 			if ((ret = __db_open(real_name,
 			    flags, OKFLAGS, mode, &fd)) != 0) {
@@ -571,17 +573,19 @@
 	 * Store the file id in the locker structure -- we can get it from
 	 * there as necessary, and it saves having two copies.
 	 */
-	if (need_fileid)
+	if (need_fileid) {
 		if (fname == NULL) {
 			memset(dbp->fileid, 0, DB_FILE_ID_LEN);
 			if (F_ISSET(dbp, DB_AM_LOCKING) &&
 			    (ret = lock_id(dbenv->lk_info,
 			    (u_int32_t *)dbp->fileid)) != 0)
 				goto err;
-		} else
+		} else {
 			if ((ret = __os_fileid(dbenv,
 			    real_name, 1, dbp->fileid)) != 0)
 				goto err;
+		}
+	}
 
 	/* No further use for the real name. */
 	if (real_name != NULL)
--- db-2.7.7.orig/db/db_rec.c
+++ db-2.7.7/db/db_rec.c
@@ -88,11 +88,12 @@
 		change = DB_MPOOL_DIRTY;
 	}
 
-	if (change)
+	if (change) {
 		if (redo)
 			LSN(pagep) = *lsnp;
 		else
 			LSN(pagep) = argp->pagelsn;
+	}
 
 	if ((ret = memp_fput(mpf, pagep, change)) != 0)
 		goto out;
@@ -124,7 +125,7 @@
 	REC_PRINT(__db_split_print);
 	REC_INTRO(__db_split_read);
 
-	if ((ret = memp_fget(mpf, &argp->pgno, 0, &pagep)) != 0)
+	if ((ret = memp_fget(mpf, &argp->pgno, 0, &pagep)) != 0) {
 		if (!redo) {
 			/*
 			 * We are undoing and the page doesn't exist.  That
@@ -133,10 +134,12 @@
 			 * don't bother creating a page.
 			 */
 			goto done;
-		} else
+		} else {
 			if ((ret = memp_fget(mpf,
 			    &argp->pgno, DB_MPOOL_CREATE, &pagep)) != 0)
 				goto out;
+		}
+	}
 
 	/*
 	 * There are two types of log messages here, one for the old page
@@ -253,7 +256,7 @@
 	/* Now check the previous page. */
 ppage:	if (argp->prev_pgno != PGNO_INVALID) {
 		change = 0;
-		if ((ret = memp_fget(mpf, &argp->prev_pgno, 0, &pagep)) != 0)
+		if ((ret = memp_fget(mpf, &argp->prev_pgno, 0, &pagep)) != 0) {
 			if (!redo) {
 				/*
 				 * We are undoing and the page doesn't exist.
@@ -264,10 +267,12 @@
 				*lsnp = argp->prev_lsn;
 				ret = 0;
 				goto npage;
-			} else
+			} else {
 				if ((ret = memp_fget(mpf, &argp->prev_pgno,
 				    DB_MPOOL_CREATE, &pagep)) != 0)
 					goto out;
+			}
+		}
 
 		cmp_n = log_compare(lsnp, &LSN(pagep));
 		cmp_p = log_compare(&LSN(pagep), &argp->prevlsn);
@@ -293,7 +298,7 @@
 	/* Now check the next page.  Can only be set on a delete. */
 npage:	if (argp->next_pgno != PGNO_INVALID) {
 		change = 0;
-		if ((ret = memp_fget(mpf, &argp->next_pgno, 0, &pagep)) != 0)
+		if ((ret = memp_fget(mpf, &argp->next_pgno, 0, &pagep)) != 0) {
 			if (!redo) {
 				/*
 				 * We are undoing and the page doesn't exist.
@@ -302,10 +307,12 @@
 				 * this case, don't bother creating a page.
 				 */
 				goto done;
-			} else
+			} else {
 				if ((ret = memp_fget(mpf, &argp->next_pgno,
 				    DB_MPOOL_CREATE, &pagep)) != 0)
 					goto out;
+			}
+		}
 
 		cmp_n = log_compare(lsnp, &LSN(pagep));
 		cmp_p = log_compare(&LSN(pagep), &argp->nextlsn);
@@ -544,7 +551,7 @@
 	if ((ret = memp_fput(mpf, pagep, change)) != 0)
 		goto out;
 
-	if ((ret = memp_fget(mpf, &argp->nextpgno, 0, &pagep)) != 0)
+	if ((ret = memp_fget(mpf, &argp->nextpgno, 0, &pagep)) != 0) {
 		if (!redo) {
 			/*
 			 * We are undoing and the page doesn't exist.  That
@@ -553,10 +560,12 @@
 			 * don't bother creating a page.
 			 */
 			goto done;
-		} else
+		} else {
 			if ((ret = memp_fget(mpf,
 			    &argp->nextpgno, DB_MPOOL_CREATE, &pagep)) != 0)
 				goto out;
+		}
+	}
 
 	change = 0;
 	cmp_n = log_compare(lsnp, &LSN(pagep));
--- db-2.7.7.orig/hash/hash.c
+++ db-2.7.7/hash/hash.c
@@ -261,11 +261,12 @@
 		goto out;
 
 	hcp->stats.hash_deleted++;
-	if ((ret = __ham_lookup(dbc, key, 0, DB_LOCK_WRITE)) == 0)
+	if ((ret = __ham_lookup(dbc, key, 0, DB_LOCK_WRITE)) == 0) {
 		if (F_ISSET(hcp, H_OK))
 			ret = __ham_del_pair(dbc, 1);
 		else
 			ret = DB_NOTFOUND;
+	}
 
 	RELEASE_META(dbp, hcp);
 out:	if ((tret = dbc->c_close(dbc)) != 0 && ret == 0)
@@ -931,7 +932,7 @@
 	 * duplicate.  In this case, we do initialization and then
 	 * let the normal duplicate code handle it.
 	 */
-	if (!F_ISSET(hcp, H_ISDUP))
+	if (!F_ISSET(hcp, H_ISDUP)) {
 		if (type == H_DUPLICATE) {
 			F_SET(hcp, H_ISDUP);
 			hcp->dup_tlen = LEN_HDATA(hcp->pagep,
@@ -967,9 +968,11 @@
 				hcp->dpgno = PGNO(hcp->dpagep);
 				hcp->dndx = NUM_ENT(hcp->dpagep) - 1;
 			} else if ((ret = __ham_next_cpage(dbc,
-			    pgno, 0, H_ISDUP)) != 0)
+			    pgno, 0, H_ISDUP)) != 0) {
 				return (ret);
+			}
 		}
+	}
 
 
 	/*
@@ -1021,7 +1024,7 @@
 	 * Now, everything is initialized, grab a duplicate if
 	 * necessary.
 	 */
-	if (F_ISSET(hcp, H_ISDUP))
+	if (F_ISSET(hcp, H_ISDUP)) {
 		if (hcp->dpgno != PGNO_INVALID) {
 			pp = hcp->dpagep;
 			ndx = hcp->dndx;
@@ -1057,6 +1060,7 @@
 			}
 			myval = &tmp_val;
 		}
+	}
 
 
 	/*
@@ -1304,11 +1308,11 @@
 			continue;
 		}
 
-		if (!is_dup && lcp->bndx > hcp->bndx)
+		if (!is_dup && lcp->bndx > hcp->bndx) {
 			lcp->bndx--;
-		else if (!is_dup && lcp->bndx == hcp->bndx)
+		} else if (!is_dup && lcp->bndx == hcp->bndx) {
 			F_SET(lcp, H_DELETED);
-		else if (is_dup && lcp->bndx == hcp->bndx) {
+		} else if (is_dup && lcp->bndx == hcp->bndx) {
 			/* Assign dpgno in case there was page conversion. */
 			lcp->dpgno = hcp->dpgno;
 			if (add && lcp->dndx >= hcp->dndx )
@@ -1319,7 +1323,7 @@
 				F_SET(lcp, H_DELETED);
 
 			/* Now adjust on-page information. */
-			if (lcp->dpgno == PGNO_INVALID)
+			if (lcp->dpgno == PGNO_INVALID) {
 				if (add) {
 					lcp->dup_tlen += len;
 					if (lcp->dndx > hcp->dndx)
@@ -1329,6 +1333,7 @@
 					if (lcp->dndx > hcp->dndx)
 						lcp->dup_off -= len;
 				}
+			}
 		}
 	}
 	DB_THREAD_UNLOCK(dbp);
--- db-2.7.7.orig/hash/hash_page.c
+++ db-2.7.7/hash/hash_page.c
@@ -343,10 +343,10 @@
 	if (F_ISSET(hcp, H_ISDUP)) {
 		if (hcp->dpgno == PGNO_INVALID) {
 			/* Duplicates are on-page. */
-			if (hcp->dup_off != 0)
-				if ((ret = __ham_get_cpage(dbc, mode)) != 0)
+			if (hcp->dup_off != 0) {
+				if ((ret = __ham_get_cpage(dbc, mode)) != 0) {
 					return (ret);
-				else {
+				} else {
 					HASH_CURSOR *h;
 					h = hcp;
 					memcpy(&h->dup_len, HKEYDATA_DATA(
@@ -358,6 +358,7 @@
 					hcp->dndx--;
 					return (__ham_item(dbc, mode));
 				}
+			}
 		} else if (hcp->dndx > 0) {	/* Duplicates are off-page. */
 			hcp->dndx--;
 			return (__ham_item(dbc, mode));
--- db-2.7.7.orig/hash/hash_rec.c
+++ db-2.7.7/hash/hash_rec.c
@@ -95,7 +95,7 @@
 	hcp = (HASH_CURSOR *)dbc->internal;
 
 	ret = memp_fget(mpf, &argp->pgno, 0, &pagep);
-	if (ret != 0)
+	if (ret != 0) {
 		if (!redo) {
 			/*
 			 * We are undoing and the page doesn't exist.  That
@@ -107,7 +107,7 @@
 		} else if ((ret = memp_fget(mpf, &argp->pgno,
 		    DB_MPOOL_CREATE, &pagep)) != 0)
 			goto out;
-
+	}
 
 	GET_META(file_dbp, hcp, ret);
 	if (ret != 0)
@@ -203,7 +203,7 @@
 	hcp = (HASH_CURSOR *)dbc->internal;
 
 	ret = memp_fget(mpf, &argp->new_pgno, 0, &pagep);
-	if (ret != 0)
+	if (ret != 0) {
 		if (!redo) {
 			/*
 			 * We are undoing and the page doesn't exist.  That
@@ -216,6 +216,7 @@
 		} else if ((ret = memp_fget(mpf, &argp->new_pgno,
 		    DB_MPOOL_CREATE, &pagep)) != 0)
 			goto out;
+	}
 
 	GET_META(file_dbp, (HASH_CURSOR *)dbc->internal, ret);
 	if (ret != 0)
@@ -260,7 +261,7 @@
 ppage:	if (argp->prev_pgno != PGNO_INVALID) {
 		ret = memp_fget(mpf, &argp->prev_pgno, 0, &pagep);
 
-		if (ret != 0)
+		if (ret != 0) {
 			if (!redo) {
 				/*
 				 * We are undoing and the page doesn't exist.
@@ -274,6 +275,7 @@
 			    memp_fget(mpf, &argp->prev_pgno,
 			    DB_MPOOL_CREATE, &pagep)) != 0)
 				goto out;
+		}
 
 		cmp_n = log_compare(lsnp, &LSN(pagep));
 		cmp_p = log_compare(&LSN(pagep), &argp->prevlsn);
@@ -307,7 +309,7 @@
 npage:	if (argp->next_pgno != PGNO_INVALID) {
 		ret = memp_fget(mpf, &argp->next_pgno, 0, &pagep);
 
-		if (ret != 0)
+		if (ret != 0) {
 			if (!redo) {
 				/*
 				 * We are undoing and the page doesn't exist.
@@ -320,6 +322,7 @@
 			    memp_fget(mpf, &argp->next_pgno,
 			    DB_MPOOL_CREATE, &pagep)) != 0)
 				goto out;
+		}
 
 		cmp_n = log_compare(lsnp, &LSN(pagep));
 		cmp_p = log_compare(&LSN(pagep), &argp->nextlsn);
@@ -392,7 +395,7 @@
 	hcp = (HASH_CURSOR *)dbc->internal;
 
 	ret = memp_fget(mpf, &argp->pgno, 0, &pagep);
-	if (ret != 0)
+	if (ret != 0) {
 		if (!redo) {
 			/*
 			 * We are undoing and the page doesn't exist.  That
@@ -404,6 +407,7 @@
 		} else if ((ret = memp_fget(mpf, &argp->pgno,
 		    DB_MPOOL_CREATE, &pagep)) != 0)
 			goto out;
+	}
 
 	GET_META(file_dbp, (HASH_CURSOR *)dbc->internal, ret);
 	if (ret != 0)
@@ -529,7 +533,7 @@
 	/* Now check the newly allocated/freed page. */
 	ret = memp_fget(mpf, &argp->pgno, 0, &pagep);
 
-	if (ret != 0)
+	if (ret != 0) {
 		if (!redo) {
 			/*
 			 * We are undoing and the page doesn't exist.  That
@@ -541,6 +545,7 @@
 		} else if ((ret = memp_fget(mpf, &argp->pgno,
 		    DB_MPOOL_CREATE, &pagep)) != 0)
 			goto out;
+	}
 
 	cmp_n = log_compare(lsnp, &LSN(pagep));
 	cmp_p = log_compare(&LSN(pagep), &argp->pagelsn);
@@ -689,7 +694,7 @@
 	hcp = (HASH_CURSOR *)dbc->internal;
 
 	ret = memp_fget(mpf, &argp->pgno, 0, &pagep);
-	if (ret != 0)
+	if (ret != 0) {
 		if (!redo) {
 			/*
 			 * We are undoing and the page doesn't exist.  That
@@ -701,6 +706,7 @@
 		} else if ((ret = memp_fget(mpf, &argp->pgno,
 		    DB_MPOOL_CREATE, &pagep)) != 0)
 			goto out;
+	}
 
 	GET_META(file_dbp, (HASH_CURSOR *)dbc->internal, ret);
 	if (ret != 0)
@@ -874,7 +880,7 @@
 
 	/* This is the bucket page. */
 	ret = memp_fget(mpf, &argp->pgno, 0, &pagep);
-	if (ret != 0)
+	if (ret != 0) {
 		if (!redo) {
 			/*
 			 * We are undoing and the page doesn't exist.  That
@@ -887,6 +893,7 @@
 		} else if ((ret = memp_fget(mpf, &argp->pgno,
 		    DB_MPOOL_CREATE, &pagep)) != 0)
 			goto out;
+	}
 
 	cmp_n = log_compare(lsnp, &LSN(pagep));
 	cmp_p = log_compare(&LSN(pagep), &argp->pagelsn);
@@ -908,7 +915,7 @@
 
 	/* Now fix up the "next" page. */
 donext:	ret = memp_fget(mpf, &argp->next_pgno, 0, &pagep);
-	if (ret != 0)
+	if (ret != 0) {
 		if (!redo) {
 			/*
 			 * We are undoing and the page doesn't exist.  That
@@ -921,6 +928,7 @@
 		} else if ((ret = memp_fget(mpf, &argp->next_pgno,
 		    DB_MPOOL_CREATE, &pagep)) != 0)
 			goto out;
+	}
 
 	/* There is nothing to do in the REDO case; only UNDO. */
 
@@ -938,7 +946,7 @@
 		goto done;
 
 	ret = memp_fget(mpf, &argp->nnext_pgno, 0, &pagep);
-	if (ret != 0)
+	if (ret != 0) {
 		if (!redo) {
 			/*
 			 * We are undoing and the page doesn't exist.  That
@@ -950,6 +958,7 @@
 		} else if ((ret = memp_fget(mpf, &argp->nnext_pgno,
 		    DB_MPOOL_CREATE, &pagep)) != 0)
 			goto out;
+	}
 
 	cmp_n = log_compare(lsnp, &LSN(pagep));
 	cmp_p = log_compare(&LSN(pagep), &argp->nnextlsn);
--- db-2.7.7.orig/log/log_findckp.c
+++ db-2.7.7/log/log_findckp.c
@@ -73,11 +73,12 @@
 	if (F_ISSET(lp, DB_AM_THREAD))
 		F_SET(&data, DB_DBT_MALLOC);
 	ZERO_LSN(ckp_lsn);
-	if ((ret = log_get(lp, &last_ckp, &data, DB_CHECKPOINT)) != 0)
+	if ((ret = log_get(lp, &last_ckp, &data, DB_CHECKPOINT)) != 0) {
 		if (ret == ENOENT)
 			goto get_first;
 		else
 			return (ret);
+	}
 
 	final_ckp = last_ckp;
 	next_lsn = last_ckp;
--- db-2.7.7.orig/log/log_get.c
+++ db-2.7.7/log/log_get.c
@@ -315,12 +315,13 @@
 	ret = EIO;
 	fail = "read";
 
-err1:	if (!silent)
+err1:	if (!silent) {
 		if (fail == NULL)
 			__db_err(dblp->dbenv, "log_get: %s", strerror(ret));
 		else
 			__db_err(dblp->dbenv,
 			    "log_get: %s: %s", fail, strerror(ret));
+	}
 err2:	if (np != NULL)
 		__os_freestr(np);
 	if (tbuf != NULL)
--- db-2.7.7.orig/log/log_put.c
+++ db-2.7.7/log/log_put.c
@@ -337,12 +337,13 @@
 	 * will cause much sadness later on.
 	 */
 	lp->s_lsn = lp->f_lsn;
-	if (!current && lp->s_lsn.file != 0)
+	if (!current && lp->s_lsn.file != 0) {
 		if (lp->s_lsn.offset == 0) {
 			--lp->s_lsn.file;
 			lp->s_lsn.offset = lp->persist.lg_max;
 		} else
 			--lp->s_lsn.offset;
+	}
 
 	return (0);
 }
--- db-2.7.7.orig/mp/mp_bh.c
+++ db-2.7.7/mp/mp_bh.c
@@ -189,7 +189,7 @@
 	}
 
 	created = 0;
-	if (nr < (ssize_t)pagesize)
+	if (nr < (ssize_t)pagesize) {
 		if (can_create)
 			created = 1;
 		else {
@@ -201,6 +201,7 @@
 			    __memp_fn(dbmfp), (u_long)bhp->pgno);
 			goto err;
 		}
+	}
 
 	/*
 	 * Clear any bytes we didn't read that need to be cleared.  If we're
--- db-2.7.7.orig/mp/mp_fget.c
+++ db-2.7.7/mp/mp_fget.c
@@ -140,7 +140,7 @@
 	 * It would be possible to do so by reference counting the open
 	 * pages from the mmap, but it's unclear to me that it's worth it.
 	 */
-	if (dbmfp->addr != NULL && F_ISSET(mfp, MP_CAN_MMAP))
+	if (dbmfp->addr != NULL && F_ISSET(mfp, MP_CAN_MMAP)) {
 		if (*pgnoaddr > mfp->orig_last_pgno) {
 			/*
 			 * !!!
@@ -161,6 +161,7 @@
 			++mfp->stat.st_map;
 			goto done;
 		}
+	}
 
 	/* Search the hash chain for the page. */
 	for (bhp = SH_TAILQ_FIRST(&dbmp->htab[bucket], __bh);
--- db-2.7.7.orig/mp/mp_fput.c
+++ db-2.7.7/mp/mp_fput.c
@@ -134,7 +134,7 @@
 	 * next time the memp_sync function runs we try writing it there, as
 	 * the checkpoint application better be able to write all of the files.
 	 */
-	if (F_ISSET(bhp, BH_WRITE))
+	if (F_ISSET(bhp, BH_WRITE)) {
 		if (F_ISSET(bhp, BH_DIRTY)) {
 			if (__memp_bhwrite(dbmp,
 			    dbmfp->mfp, bhp, NULL, &wrote) != 0 || !wrote)
@@ -145,6 +145,7 @@
 			--dbmfp->mfp->lsn_cnt;
 			--mp->lsn_cnt;
 		}
+	}
 
 	UNLOCKREGION(dbmp);
 	return (0);
--- db-2.7.7.orig/mp/mp_region.c
+++ db-2.7.7/mp/mp_region.c
@@ -226,12 +226,13 @@
 	 * Up the user's cachesize by 25% to account for our overhead.
 	 */
 	defcache = 0;
-	if (cachesize < DB_CACHESIZE_MIN)
+	if (cachesize < DB_CACHESIZE_MIN) {
 		if (cachesize == 0) {
 			defcache = 1;
 			cachesize = DB_CACHESIZE_DEF;
 		} else
 			cachesize = DB_CACHESIZE_MIN;
+	}
 	rlen = cachesize + cachesize / 4;
 
 	/*
