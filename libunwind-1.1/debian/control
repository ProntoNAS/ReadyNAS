Source: libunwind
Priority: optional
Section: libs
Maintainer: Daigo Moriwaki <daigo@debian.org>
Uploaders: Matthieu Delahaye <matthieu@debian.org>, Al Stone <ahs3@debian.org>
Build-Depends: debhelper (>= 9), autotools-dev, dh-autoreconf, liblzma-dev, texlive-extra-utils
Standards-Version: 3.9.4
Homepage: http://www.nongnu.org/libunwind
Vcs-Git: git://git.debian.org/git/collab-maint/libunwind.git
Vcs-Browser: http://git.debian.org/?p=collab-maint/libunwind.git

Package: libunwind-dev
Section: libdevel
Architecture: ia64 i386 amd64 ppc64 ppc64el powerpc powerpcspe armel armhf arm64 mips
Depends: ${misc:Depends}, libunwind8 (= ${binary:Version})
Conflicts: libunwind1-dev, libunwind7-dev
Replaces: libunwind8-dev (<< 1.1-3.2)
Description: library to determine the call-chain of a program - development
 The primary goal of this project is to define a portable and efficient C
 programming interface (API) to determine the call-chain of a program.
 The API additionally provides the means to manipulate the preserved
 (callee-saved) state of each call-frame and to resume execution at any
 point in the call-chain (non-local goto). The API supports both local
 (same-process) and remote (across-process) operation. As such, the API
 is useful in a number of applications.
 .
 This package includes the development support files. 

Package: libunwind8-dev
Section: libdevel
Architecture: ia64 i386 amd64 ppc64 ppc64el powerpc powerpcspe armel armhf arm64 mips
Depends: ${misc:Depends}, libunwind-dev (= ${binary:Version})
Description: library to determine the call-chain of a program - development
 The primary goal of this project is to define a portable and efficient C
 programming interface (API) to determine the call-chain of a program.
 .
 This is a transitional package. You can safely remove it.

Package: libunwind8
Architecture: ia64 i386 amd64 ppc64 ppc64el powerpc powerpcspe armel armhf arm64 mips
Pre-Depends: multiarch-support
Depends: ${misc:Depends}, ${shlibs:Depends}
Conflicts: libunwind1-dev
Replaces: libgcc1 (<< 1:4.0.0-2)
Description: library to determine the call-chain of a program - runtime
 The primary goal of this project is to define a portable and efficient C
 programming interface (API) to determine the call-chain of a program.
 The API additionally provides the means to manipulate the preserved
 (callee-saved) state of each call-frame and to resume execution at any
 point in the call-chain (non-local goto). The API supports both local
 (same-process) and remote (across-process) operation. As such, the API
 is useful in a number of applications.
 .
 This package includes the shared libraries

Package: libunwind8-dbg
Section: debug
Priority: extra
Architecture: ia64 i386 amd64 ppc64 ppc64el powerpc powerpcspe armel armhf arm64 mips
Depends: ${misc:Depends}, ${shlibs:Depends}, libunwind8 (= ${binary:Version})
Description: library to determine the call-chain of a program - runtime
 Contains debugging symbols for libunwind8.
 .
 This package is provided primarily to provide a backtrace with names
 in a debugger, this makes it somewhat easier to interpret core
 dumps.  Most people will not need this package.

Package: libunwind-setjmp0-dev
Section: libdevel
Architecture: ia64 i386 amd64 ppc64 ppc64el powerpc powerpcspe armel armhf arm64 mips
Depends: ${misc:Depends}, libunwind8-dev (= ${binary:Version}), libunwind-setjmp0 (= ${binary:Version})
Description: libunwind-based non local goto - development
 The unwind-setjmp library offers a libunwind-based implementation of
 non-local gotos. This implementation is intended to be a drop-in
 replacement for the normal, system-provided routines of the same name.
 The main advantage of using the unwind-setjmp library is  that  setting
 up a non-local goto via one of the setjmp() routines is very fast.
 .
 This package includes the development support files

Package: libunwind-setjmp0
Architecture: ia64 i386 amd64 ppc64 ppc64el powerpc powerpcspe armel armhf arm64 mips
Pre-Depends: multiarch-support
Depends: ${misc:Depends}, ${shlibs:Depends}
Description: libunwind-based non local goto - runtime
 The unwind-setjmp library offers a libunwind-based implementation of
 non-local gotos. This implementation is intended to be a drop-in
 replacement for the normal, system-provided routines of the same name.
 The main advantage of using the unwind-setjmp library is  that  setting
 up a non-local goto via one of the setjmp() routines is very fast.
 .
 This package includes the shared library 

Package: libunwind-setjmp0-dbg
Section: debug
Priority: extra
Architecture: ia64 i386 amd64 ppc64 ppc64el powerpc powerpcspe armel armhf arm64 mips
Depends: ${misc:Depends}, ${shlibs:Depends}, libunwind-setjmp0 (= ${binary:Version})
Description: libunwind-based non local goto - runtime
 Contains debugging symbols for libunwind8.
 .
 This package is provided primarily to provide a backtrace with names
 in a debugger, this makes it somewhat easier to interpret core
 dumps.  Most people will not need this package.
