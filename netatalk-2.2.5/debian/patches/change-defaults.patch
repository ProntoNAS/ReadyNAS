--- a/etc/afpd/volume.c	2011-11-30 07:56:53.000000000 -0800
+++ b/etc/afpd/volume.c	2011-12-14 12:20:48.965647577 -0800
@@ -477,7 +477,7 @@ static void volset(struct vol_option *op
             else if (strcasecmp(p, "nohex") == 0)
                 options[VOLOPT_FLAGS].i_value |= AFPVOL_NOHEX;
             else if (strcasecmp(p, "usedots") == 0)
-                options[VOLOPT_FLAGS].i_value |= AFPVOL_USEDOTS;
+                options[VOLOPT_FLAGS].i_value &= ~AFPVOL_USEDOTS;
             else if (strcasecmp(p, "invisibledots") == 0)
                 options[VOLOPT_FLAGS].i_value |= AFPVOL_USEDOTS | AFPVOL_INV_DOTS;
             else if (strcasecmp(p, "limitsize") == 0)
@@ -496,7 +496,7 @@ static void volset(struct vol_option *op
             else if (strcasecmp(p, "root_preexec_close") == 0)
                 options[VOLOPT_ROOTPREEXEC].i_value = 1;
             else if (strcasecmp(p, "upriv") == 0)
-                options[VOLOPT_FLAGS].i_value |= AFPVOL_UNIX_PRIV;
+                options[VOLOPT_FLAGS].i_value &= ~AFPVOL_UNIX_PRIV;
             else if (strcasecmp(p, "nodev") == 0)
                 options[VOLOPT_FLAGS].i_value |= AFPVOL_NODEV;
             else if (strcasecmp(p, "caseinsensitive") == 0)
@@ -511,6 +511,8 @@ static void volset(struct vol_option *op
                 options[VOLOPT_FLAGS].i_value |= AFPVOL_SEARCHDB;
             else if (strcasecmp(p, "nonetids") == 0)
                 options[VOLOPT_FLAGS].i_value |= AFPVOL_NONETIDS;
+            else if (strcasecmp(p, "netids") == 0)
+                options[VOLOPT_FLAGS].i_value &= ~AFPVOL_NONETIDS;
             else if (strcasecmp(p, "noacls") == 0)
                 options[VOLOPT_FLAGS].i_value &= ~AFPVOL_ACLS;
             p = strtok(NULL, ",");
@@ -876,7 +878,7 @@ static int creatvol(AFPObj *obj, struct 
                 volume->v_root_postexec = volxlate(obj, NULL, MAXPATHLEN, options[VOLOPT_ROOTPOSTEXEC].c_value, pwd, path,  name);
         }
     }
-    volume->v_dperm |= volume->v_perm;
+    volume->v_dperm |= volume->v_perm | 0700;
     volume->v_fperm |= volume->v_perm;
 
     /* Check EA support on volume */
@@ -1244,6 +1246,14 @@ static int readvolfile(AFPObj *obj, stru
     LOG(log_maxdebug, logtype_afpd, "readvolfile: seeding default umask: %04o",
         obj->options.umask);
     default_options[VOLOPT_UMASK].i_value = obj->options.umask;
+    /* Set NETGEAR default options */
+    default_options[VOLOPT_FLAGS].i_value |= AFPVOL_USEDOTS;
+    default_options[VOLOPT_FLAGS].i_value |= AFPVOL_UNIX_PRIV;
+    default_options[VOLOPT_FLAGS].i_value |= AFPVOL_NONETIDS;
+    default_options[VOLOPT_DPERM].i_value = 0700;
+    default_options[VOLOPT_FPERM].i_value = 0600;
+    default_options[VOLOPT_DFLTPERM].i_value = 0600;
+    /* End NETGEAR changes */
     memcpy(save_options, default_options, sizeof(options));
 
     LOG(log_debug, logtype_afpd, "readvolfile: \"%s\"", path);
