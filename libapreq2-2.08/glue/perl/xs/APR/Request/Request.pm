# 
# /*
#  * *********** WARNING **************
#  * This file generated by My::WrapXS/2.08
#  * Any changes made here will be lost
#  * ***********************************
#  * 1. /usr/share/perl5/ExtUtils/XSBuilder/WrapXS.pm:39
#  * 2. /usr/share/perl5/ExtUtils/XSBuilder/WrapXS.pm:2062
#  * 3. Makefile.PL:146
#  */
# 


package APR::Request;
require DynaLoader ;

use strict;
use warnings FATAL => 'all';

use vars qw{$VERSION @ISA} ;

push @ISA, 'DynaLoader' ;
$VERSION = '2.08';
bootstrap APR::Request $VERSION ;

use APR::Pool;
use APR::BucketAlloc;

sub import {
    my $class = shift;
    return unless @_;
    my $pkg = caller;
    no strict 'refs';

    for (@_) {
        *{"$pkg\::$_"} = $class->can($_)
            or die "Can't find method $_ in class $class";
    }
}

sub param_status {
    my $req = shift;
    return $req->args_status || $req->body_status if wantarray;
    return ($req->args_status, $req->body_status);
}

sub upload {
    require APR::Request::Param;
    my $req = shift;
    my $body = $req->body or return;
    my $uploads = $body->uploads($req->pool);
    $uploads->param_class("APR::Request::Param");

    return $uploads->get(@_) if @_;
    return keys %$uploads if wantarray;
    return $uploads;
}

package APR::Request::Custom;
our @ISA = qw/APR::Request/;

package APR::Request::Cookie::Table;

sub EXISTS {
    my ($t, $key) = @_;
    return defined $t->FETCH($key);
}

package APR::Request::Param::Table;

sub EXISTS {
    my ($t, $key) = @_;
    return defined $t->FETCH($key);
}


1;
__END__
