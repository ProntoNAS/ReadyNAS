--- connman-1.21.orig/src/dhcp.c
+++ connman-1.21/src/dhcp.c
@@ -47,6 +47,7 @@ struct connman_dhcp {
 	char *pac;
 
 	unsigned int timeout;
+	bool ipv4ll_running;
 
 	GDHCPClient *ipv4ll_client;
 	GDHCPClient *dhcp_client;
@@ -55,7 +56,6 @@ struct connman_dhcp {
 };
 
 static GHashTable *ipconfig_table;
-static bool ipv4ll_running;
 
 static void dhcp_free(struct connman_dhcp *dhcp)
 {
@@ -155,7 +155,7 @@ static void ipv4ll_stop_client(struct co
 	g_dhcp_client_stop(dhcp->ipv4ll_client);
 	g_dhcp_client_unref(dhcp->ipv4ll_client);
 	dhcp->ipv4ll_client = NULL;
-	ipv4ll_running = false;
+	dhcp->ipv4ll_running = false;
 
 	g_free(dhcp->ipv4ll_debug_prefix);
 	dhcp->ipv4ll_debug_prefix = NULL;
@@ -210,7 +210,7 @@ static int ipv4ll_start_client(struct co
 		return err;
 	}
 
-	ipv4ll_running = true;
+	dhcp->ipv4ll_running = true;
 	return 0;
 }
 
@@ -236,13 +236,13 @@ static void no_lease_cb(GDHCPClient *dhc
 	struct connman_dhcp *dhcp = user_data;
 	int err;
 
-	DBG("No lease available ipv4ll %d client %p", ipv4ll_running,
+	DBG("No lease available ipv4ll %d client %p", dhcp->ipv4ll_running,
 		dhcp->ipv4ll_client);
 
 	dhcp->timeout = g_timeout_add_seconds(RATE_LIMIT_INTERVAL,
 						dhcp_retry_cb,
 						dhcp);
-	if (ipv4ll_running)
+	if (dhcp->ipv4ll_running)
 		return;
 
 	err = ipv4ll_start_client(dhcp);
@@ -250,7 +250,7 @@ static void no_lease_cb(GDHCPClient *dhc
 		DBG("Cannot start ipv4ll client (%d/%s)", err, strerror(-err));
 
 	/* Only notify upper layer if we have a problem */
-	dhcp_invalidate(dhcp, !ipv4ll_running);
+	dhcp_invalidate(dhcp, !dhcp->ipv4ll_running);
 }
 
 static void lease_lost_cb(GDHCPClient *dhcp_client, gpointer user_data)
