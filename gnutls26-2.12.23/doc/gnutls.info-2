This is gnutls.info, produced by makeinfo version 4.13.90 from
gnutls.texi.

This manual is last updated 6 January 2012 for version 2.12.23 of
GnuTLS.

Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, no Front-Cover Texts, and
     no Back-Cover Texts.  A copy of the license is included in the
     section entitled "GNU Free Documentation License".
INFO-DIR-SECTION Software libraries
START-INFO-DIR-ENTRY
* GnuTLS: (gnutls).		GNU Transport Layer Security Library.
END-INFO-DIR-ENTRY

INFO-DIR-SECTION System Administration
START-INFO-DIR-ENTRY
* certtool: (gnutls)Invoking certtool.	Manipulate certificates and keys.
* gnutls-serv: (gnutls)Invoking gnutls-serv.	GnuTLS test server.
* gnutls-cli: (gnutls)Invoking gnutls-cli.	GnuTLS test client.
* gnutls-cli-debug: (gnutls)Invoking gnutls-cli-debug.	GnuTLS debug client.
* psktool: (gnutls)Invoking psktool.	Simple TLS-Pre-Shared-Keys manager.
* srptool: (gnutls)Invoking srptool.	Simple SRP password tool.
END-INFO-DIR-ENTRY



File: gnutls.info,  Node: X.509 certificate functions,  Next: GnuTLS-extra functions,  Prev: Core functions,  Up: Function reference

9.2 X.509 Certificate Functions
===============================

The following functions are to be used for X.509 certificate handling.
Their prototypes lie in 'gnutls/x509.h'.

gnutls_pkcs12_bag_decrypt
-------------------------

 -- Function: int gnutls_pkcs12_bag_decrypt (gnutls_pkcs12_bag_t BAG,
          const char * PASS)
     BAG: The bag

     PASS: The password used for encryption, must be ASCII.

     This function will decrypt the given encrypted bag and return 0 on
     success.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (zero) is returned,
     otherwise an error code is returned.

gnutls_pkcs12_bag_deinit
------------------------

 -- Function: void gnutls_pkcs12_bag_deinit (gnutls_pkcs12_bag_t BAG)
     BAG: The structure to be initialized

     This function will deinitialize a PKCS12 Bag structure.

gnutls_pkcs12_bag_encrypt
-------------------------

 -- Function: int gnutls_pkcs12_bag_encrypt (gnutls_pkcs12_bag_t BAG,
          const char * PASS, unsigned int FLAGS)
     BAG: The bag

     PASS: The password used for encryption, must be ASCII

     FLAGS: should be one of 'gnutls_pkcs_encrypt_flags_t' elements
     bitwise or'd

     This function will encrypt the given bag.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (zero) is returned,
     otherwise an error code is returned.

gnutls_pkcs12_bag_get_count
---------------------------

 -- Function: int gnutls_pkcs12_bag_get_count (gnutls_pkcs12_bag_t BAG)
     BAG: The bag

     This function will return the number of the elements withing the
     bag.

     *Returns:* Number of elements in bag, or an negative error code on
     error.

gnutls_pkcs12_bag_get_data
--------------------------

 -- Function: int gnutls_pkcs12_bag_get_data (gnutls_pkcs12_bag_t BAG,
          int INDX, gnutls_datum_t * DATA)
     BAG: The bag

     INDX: The element of the bag to get the data from

     DATA: where the bag's data will be.  Should be treated as constant.

     This function will return the bag's data.  The data is a constant
     that is stored into the bag.  Should not be accessed after the bag
     is deleted.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_pkcs12_bag_get_friendly_name
-----------------------------------

 -- Function: int gnutls_pkcs12_bag_get_friendly_name
          (gnutls_pkcs12_bag_t BAG, int INDX, char ** NAME)
     BAG: The bag

     INDX: The bag's element to add the id

     NAME: will hold a pointer to the name (to be treated as const)

     This function will return the friendly name, of the specified bag
     element.  The key ID is usually used to distinguish the local
     private key and the certificate pair.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.  or a negative value on error.

gnutls_pkcs12_bag_get_key_id
----------------------------

 -- Function: int gnutls_pkcs12_bag_get_key_id (gnutls_pkcs12_bag_t BAG,
          int INDX, gnutls_datum_t * ID)
     BAG: The bag

     INDX: The bag's element to add the id

     ID: where the ID will be copied (to be treated as const)

     This function will return the key ID, of the specified bag element.
     The key ID is usually used to distinguish the local private key and
     the certificate pair.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.  or a negative value on error.

gnutls_pkcs12_bag_get_type
--------------------------

 -- Function: gnutls_pkcs12_bag_type_t gnutls_pkcs12_bag_get_type
          (gnutls_pkcs12_bag_t BAG, int INDX)
     BAG: The bag

     INDX: The element of the bag to get the type

     This function will return the bag's type.

     *Returns:* One of the 'gnutls_pkcs12_bag_type_t' enumerations.

gnutls_pkcs12_bag_init
----------------------

 -- Function: int gnutls_pkcs12_bag_init (gnutls_pkcs12_bag_t * BAG)
     BAG: The structure to be initialized

     This function will initialize a PKCS12 bag structure.  PKCS12 Bags
     usually contain private keys, lists of X.509 Certificates and X.509
     Certificate revocation lists.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_pkcs12_bag_set_crl
-------------------------

 -- Function: int gnutls_pkcs12_bag_set_crl (gnutls_pkcs12_bag_t BAG,
          gnutls_x509_crl_t CRL)
     BAG: The bag

     CRL: the CRL to be copied.

     This function will insert the given CRL into the bag.  This is just
     a wrapper over 'gnutls_pkcs12_bag_set_data()'.

     *Returns:* the index of the added bag on success, or a negative
     value on failure.

gnutls_pkcs12_bag_set_crt
-------------------------

 -- Function: int gnutls_pkcs12_bag_set_crt (gnutls_pkcs12_bag_t BAG,
          gnutls_x509_crt_t CRT)
     BAG: The bag

     CRT: the certificate to be copied.

     This function will insert the given certificate into the bag.  This
     is just a wrapper over 'gnutls_pkcs12_bag_set_data()'.

     *Returns:* the index of the added bag on success, or a negative
     value on failure.

gnutls_pkcs12_bag_set_data
--------------------------

 -- Function: int gnutls_pkcs12_bag_set_data (gnutls_pkcs12_bag_t BAG,
          gnutls_pkcs12_bag_type_t TYPE, const gnutls_datum_t * DATA)
     BAG: The bag

     TYPE: The data's type

     DATA: the data to be copied.

     This function will insert the given data of the given type into the
     bag.

     *Returns:* the index of the added bag on success, or a negative
     value on error.

gnutls_pkcs12_bag_set_friendly_name
-----------------------------------

 -- Function: int gnutls_pkcs12_bag_set_friendly_name
          (gnutls_pkcs12_bag_t BAG, int INDX, const char * NAME)
     BAG: The bag

     INDX: The bag's element to add the id

     NAME: the name

     This function will add the given key friendly name, to the
     specified, by the index, bag element.  The name will be encoded as
     a 'Friendly name' bag attribute, which is usually used to set a
     user name to the local private key and the certificate pair.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.  or a negative value on error.

gnutls_pkcs12_bag_set_key_id
----------------------------

 -- Function: int gnutls_pkcs12_bag_set_key_id (gnutls_pkcs12_bag_t BAG,
          int INDX, const gnutls_datum_t * ID)
     BAG: The bag

     INDX: The bag's element to add the id

     ID: the ID

     This function will add the given key ID, to the specified, by the
     index, bag element.  The key ID will be encoded as a 'Local key
     identifier' bag attribute, which is usually used to distinguish the
     local private key and the certificate pair.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.  or a negative value on error.

gnutls_pkcs12_deinit
--------------------

 -- Function: void gnutls_pkcs12_deinit (gnutls_pkcs12_t PKCS12)
     PKCS12: The structure to be initialized

     This function will deinitialize a PKCS12 structure.

gnutls_pkcs12_export
--------------------

 -- Function: int gnutls_pkcs12_export (gnutls_pkcs12_t PKCS12,
          gnutls_x509_crt_fmt_t FORMAT, void * OUTPUT_DATA, size_t *
          OUTPUT_DATA_SIZE)
     PKCS12: Holds the pkcs12 structure

     FORMAT: the format of output params.  One of PEM or DER.

     OUTPUT_DATA: will contain a structure PEM or DER encoded

     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
     replaced by the actual size of parameters)

     This function will export the pkcs12 structure to DER or PEM
     format.

     If the buffer provided is not long enough to hold the output, then
     *output_data_size will be updated and GNUTLS_E_SHORT_MEMORY_BUFFER
     will be returned.

     If the structure is PEM encoded, it will have a header of "BEGIN
     PKCS12".

     *Return value:* In case of failure a negative value will be
     returned, and 0 on success.

gnutls_pkcs12_generate_mac
--------------------------

 -- Function: int gnutls_pkcs12_generate_mac (gnutls_pkcs12_t PKCS12,
          const char * PASS)
     PKCS12: should contain a gnutls_pkcs12_t structure

     PASS: The password for the MAC

     This function will generate a MAC for the PKCS12 structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_pkcs12_get_bag
---------------------

 -- Function: int gnutls_pkcs12_get_bag (gnutls_pkcs12_t PKCS12, int
          INDX, gnutls_pkcs12_bag_t BAG)
     PKCS12: should contain a gnutls_pkcs12_t structure

     INDX: contains the index of the bag to extract

     BAG: An initialized bag, where the contents of the bag will be
     copied

     This function will return a Bag from the PKCS12 structure.

     After the last Bag has been read
     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_pkcs12_import
--------------------

 -- Function: int gnutls_pkcs12_import (gnutls_pkcs12_t PKCS12, const
          gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FORMAT, unsigned
          int FLAGS)
     PKCS12: The structure to store the parsed PKCS12.

     DATA: The DER or PEM encoded PKCS12.

     FORMAT: One of DER or PEM

     FLAGS: an ORed sequence of gnutls_privkey_pkcs8_flags

     This function will convert the given DER or PEM encoded PKCS12 to
     the native gnutls_pkcs12_t format.  The output will be stored in
     'pkcs12'.

     If the PKCS12 is PEM encoded it should have a header of "PKCS12".

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_pkcs12_init
------------------

 -- Function: int gnutls_pkcs12_init (gnutls_pkcs12_t * PKCS12)
     PKCS12: The structure to be initialized

     This function will initialize a PKCS12 structure.  PKCS12
     structures usually contain lists of X.509 Certificates and X.509
     Certificate revocation lists.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_pkcs12_set_bag
---------------------

 -- Function: int gnutls_pkcs12_set_bag (gnutls_pkcs12_t PKCS12,
          gnutls_pkcs12_bag_t BAG)
     PKCS12: should contain a gnutls_pkcs12_t structure

     BAG: An initialized bag

     This function will insert a Bag into the PKCS12 structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_pkcs12_verify_mac
------------------------

 -- Function: int gnutls_pkcs12_verify_mac (gnutls_pkcs12_t PKCS12,
          const char * PASS)
     PKCS12: should contain a gnutls_pkcs12_t structure

     PASS: The password for the MAC

     This function will verify the MAC for the PKCS12 structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_pkcs7_deinit
-------------------

 -- Function: void gnutls_pkcs7_deinit (gnutls_pkcs7_t PKCS7)
     PKCS7: The structure to be initialized

     This function will deinitialize a PKCS7 structure.

gnutls_pkcs7_delete_crl
-----------------------

 -- Function: int gnutls_pkcs7_delete_crl (gnutls_pkcs7_t PKCS7, int
          INDX)
     PKCS7: should contain a 'gnutls_pkcs7_t' structure

     INDX: the index of the crl to delete

     This function will delete a crl from a PKCS7 or RFC2630 crl set.
     Index starts from 0.  Returns 0 on success.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_pkcs7_delete_crt
-----------------------

 -- Function: int gnutls_pkcs7_delete_crt (gnutls_pkcs7_t PKCS7, int
          INDX)
     PKCS7: should contain a gnutls_pkcs7_t structure

     INDX: the index of the certificate to delete

     This function will delete a certificate from a PKCS7 or RFC2630
     certificate set.  Index starts from 0.  Returns 0 on success.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_pkcs7_export
-------------------

 -- Function: int gnutls_pkcs7_export (gnutls_pkcs7_t PKCS7,
          gnutls_x509_crt_fmt_t FORMAT, void * OUTPUT_DATA, size_t *
          OUTPUT_DATA_SIZE)
     PKCS7: Holds the pkcs7 structure

     FORMAT: the format of output params.  One of PEM or DER.

     OUTPUT_DATA: will contain a structure PEM or DER encoded

     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
     replaced by the actual size of parameters)

     This function will export the pkcs7 structure to DER or PEM format.

     If the buffer provided is not long enough to hold the output, then
     *'output_data_size' is updated and 'GNUTLS_E_SHORT_MEMORY_BUFFER'
     will be returned.

     If the structure is PEM encoded, it will have a header of "BEGIN
     PKCS7".

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_pkcs7_get_crl_count
--------------------------

 -- Function: int gnutls_pkcs7_get_crl_count (gnutls_pkcs7_t PKCS7)
     PKCS7: should contain a gnutls_pkcs7_t structure

     This function will return the number of certifcates in the PKCS7 or
     RFC2630 crl set.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_pkcs7_get_crl_raw
------------------------

 -- Function: int gnutls_pkcs7_get_crl_raw (gnutls_pkcs7_t PKCS7, int
          INDX, void * CRL, size_t * CRL_SIZE)
     PKCS7: should contain a 'gnutls_pkcs7_t' structure

     INDX: contains the index of the crl to extract

     CRL: the contents of the crl will be copied there (may be null)

     CRL_SIZE: should hold the size of the crl

     This function will return a crl of the PKCS7 or RFC2630 crl set.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.  If the provided buffer is not long enough,
     then 'crl_size' is updated and 'GNUTLS_E_SHORT_MEMORY_BUFFER' is
     returned.  After the last crl has been read
     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.

gnutls_pkcs7_get_crt_count
--------------------------

 -- Function: int gnutls_pkcs7_get_crt_count (gnutls_pkcs7_t PKCS7)
     PKCS7: should contain a 'gnutls_pkcs7_t' structure

     This function will return the number of certifcates in the PKCS7 or
     RFC2630 certificate set.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_pkcs7_get_crt_raw
------------------------

 -- Function: int gnutls_pkcs7_get_crt_raw (gnutls_pkcs7_t PKCS7, int
          INDX, void * CERTIFICATE, size_t * CERTIFICATE_SIZE)
     PKCS7: should contain a gnutls_pkcs7_t structure

     INDX: contains the index of the certificate to extract

     CERTIFICATE: the contents of the certificate will be copied there
     (may be null)

     CERTIFICATE_SIZE: should hold the size of the certificate

     This function will return a certificate of the PKCS7 or RFC2630
     certificate set.

     After the last certificate has been read
     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.  If the provided buffer is not long enough,
     then 'certificate_size' is updated and
     'GNUTLS_E_SHORT_MEMORY_BUFFER' is returned.

gnutls_pkcs7_import
-------------------

 -- Function: int gnutls_pkcs7_import (gnutls_pkcs7_t PKCS7, const
          gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FORMAT)
     PKCS7: The structure to store the parsed PKCS7.

     DATA: The DER or PEM encoded PKCS7.

     FORMAT: One of DER or PEM

     This function will convert the given DER or PEM encoded PKCS7 to
     the native 'gnutls_pkcs7_t' format.  The output will be stored in
     'pkcs7'.

     If the PKCS7 is PEM encoded it should have a header of "PKCS7".

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_pkcs7_init
-----------------

 -- Function: int gnutls_pkcs7_init (gnutls_pkcs7_t * PKCS7)
     PKCS7: The structure to be initialized

     This function will initialize a PKCS7 structure.  PKCS7 structures
     usually contain lists of X.509 Certificates and X.509 Certificate
     revocation lists.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_pkcs7_set_crl_raw
------------------------

 -- Function: int gnutls_pkcs7_set_crl_raw (gnutls_pkcs7_t PKCS7, const
          gnutls_datum_t * CRL)
     PKCS7: should contain a 'gnutls_pkcs7_t' structure

     CRL: the DER encoded crl to be added

     This function will add a crl to the PKCS7 or RFC2630 crl set.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_pkcs7_set_crl
--------------------

 -- Function: int gnutls_pkcs7_set_crl (gnutls_pkcs7_t PKCS7,
          gnutls_x509_crl_t CRL)
     PKCS7: should contain a 'gnutls_pkcs7_t' structure

     CRL: the DER encoded crl to be added

     This function will add a parsed CRL to the PKCS7 or RFC2630 crl
     set.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_pkcs7_set_crt_raw
------------------------

 -- Function: int gnutls_pkcs7_set_crt_raw (gnutls_pkcs7_t PKCS7, const
          gnutls_datum_t * CRT)
     PKCS7: should contain a 'gnutls_pkcs7_t' structure

     CRT: the DER encoded certificate to be added

     This function will add a certificate to the PKCS7 or RFC2630
     certificate set.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_pkcs7_set_crt
--------------------

 -- Function: int gnutls_pkcs7_set_crt (gnutls_pkcs7_t PKCS7,
          gnutls_x509_crt_t CRT)
     PKCS7: should contain a 'gnutls_pkcs7_t' structure

     CRT: the certificate to be copied.

     This function will add a parsed certificate to the PKCS7 or RFC2630
     certificate set.  This is a wrapper function over
     'gnutls_pkcs7_set_crt_raw()' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crl_check_issuer
----------------------------

 -- Function: int gnutls_x509_crl_check_issuer (gnutls_x509_crl_t CERT,
          gnutls_x509_crt_t ISSUER)
     ISSUER: is the certificate of a possible issuer

     This function will check if the given CRL was issued by the given
     issuer certificate.  It will return true (1) if the given CRL was
     issued by the given issuer, and false (0) if not.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crl_deinit
----------------------

 -- Function: void gnutls_x509_crl_deinit (gnutls_x509_crl_t CRL)
     CRL: The structure to be initialized

     This function will deinitialize a CRL structure.

gnutls_x509_crl_export
----------------------

 -- Function: int gnutls_x509_crl_export (gnutls_x509_crl_t CRL,
          gnutls_x509_crt_fmt_t FORMAT, void * OUTPUT_DATA, size_t *
          OUTPUT_DATA_SIZE)
     CRL: Holds the revocation list

     FORMAT: the format of output params.  One of PEM or DER.

     OUTPUT_DATA: will contain a private key PEM or DER encoded

     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
     replaced by the actual size of parameters)

     This function will export the revocation list to DER or PEM format.

     If the buffer provided is not long enough to hold the output, then
     'GNUTLS_E_SHORT_MEMORY_BUFFER' will be returned.

     If the structure is PEM encoded, it will have a header of "BEGIN
     X509 CRL".

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.  and a negative value on failure.

gnutls_x509_crl_get_authority_key_id
------------------------------------

 -- Function: int gnutls_x509_crl_get_authority_key_id
          (gnutls_x509_crl_t CRL, void * RET, size_t * RET_SIZE,
          unsigned int * CRITICAL)
     CRL: should contain a 'gnutls_x509_crl_t' structure

     RET: The place where the identifier will be copied

     RET_SIZE: Holds the size of the result field.

     CRITICAL: will be non zero if the extension is marked as critical
     (may be null)

     This function will return the CRL authority's key identifier.  This
     is obtained by the X.509 Authority Key identifier extension field
     (2.5.29.35).  Note that this function only returns the
     keyIdentifier field of the extension.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative value in case of an error.

     *Since:* 2.8.0

gnutls_x509_crl_get_crt_count
-----------------------------

 -- Function: int gnutls_x509_crl_get_crt_count (gnutls_x509_crl_t CRL)
     CRL: should contain a 'gnutls_x509_crl_t' structure

     This function will return the number of revoked certificates in the
     given CRL.

     *Returns:* number of certificates, a negative value on failure.

gnutls_x509_crl_get_crt_serial
------------------------------

 -- Function: int gnutls_x509_crl_get_crt_serial (gnutls_x509_crl_t CRL,
          int INDX, unsigned char * SERIAL, size_t * SERIAL_SIZE, time_t
          * T)
     CRL: should contain a 'gnutls_x509_crl_t' structure

     INDX: the index of the certificate to extract (starting from 0)

     SERIAL: where the serial number will be copied

     SERIAL_SIZE: initially holds the size of serial

     T: if non null, will hold the time this certificate was revoked

     This function will retrieve the serial number of the specified, by
     the index, revoked certificate.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.  and a negative value on error.

gnutls_x509_crl_get_dn_oid
--------------------------

 -- Function: int gnutls_x509_crl_get_dn_oid (gnutls_x509_crl_t CRL, int
          INDX, void * OID, size_t * SIZEOF_OID)
     CRL: should contain a gnutls_x509_crl_t structure

     INDX: Specifies which DN OID to send.  Use zero to get the first
     one.

     OID: a pointer to a structure to hold the name (may be null)

     SIZEOF_OID: initially holds the size of 'oid'

     This function will extract the requested OID of the name of the CRL
     issuer, specified by the given index.

     If oid is null then only the size will be filled.

     *Returns:* 'GNUTLS_E_SHORT_MEMORY_BUFFER' if the provided buffer is
     not long enough, and in that case the sizeof_oid will be updated
     with the required size.  On success 0 is returned.

gnutls_x509_crl_get_extension_data
----------------------------------

 -- Function: int gnutls_x509_crl_get_extension_data (gnutls_x509_crl_t
          CRL, int INDX, void * DATA, size_t * SIZEOF_DATA)
     CRL: should contain a 'gnutls_x509_crl_t' structure

     INDX: Specifies which extension OID to send.  Use zero to get the
     first one.

     DATA: a pointer to a structure to hold the data (may be null)

     SIZEOF_DATA: initially holds the size of 'oid'

     This function will return the requested extension data in the CRL.
     The extension data will be stored as a string in the provided
     buffer.

     Use 'gnutls_x509_crl_get_extension_info()' to extract the OID and
     critical flag.  Use 'gnutls_x509_crl_get_extension_info()' instead,
     if you want to get data indexed by the extension OID rather than
     sequence.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative value in case of an error.  If your have reached the last
     extension available 'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be
     returned.

     *Since:* 2.8.0

gnutls_x509_crl_get_extension_info
----------------------------------

 -- Function: int gnutls_x509_crl_get_extension_info (gnutls_x509_crl_t
          CRL, int INDX, void * OID, size_t * SIZEOF_OID, int *
          CRITICAL)
     CRL: should contain a 'gnutls_x509_crl_t' structure

     INDX: Specifies which extension OID to send, use zero to get the
     first one.

     OID: a pointer to a structure to hold the OID

     SIZEOF_OID: initially holds the maximum size of 'oid', on return
     holds actual size of 'oid'.

     CRITICAL: output variable with critical flag, may be NULL.

     This function will return the requested extension OID in the CRL,
     and the critical flag for it.  The extension OID will be stored as
     a string in the provided buffer.  Use
     'gnutls_x509_crl_get_extension_data()' to extract the data.

     If the buffer provided is not long enough to hold the output, then
     *'sizeof_oid' is updated and 'GNUTLS_E_SHORT_MEMORY_BUFFER' will be
     returned.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative value in case of an error.  If your have reached the last
     extension available 'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be
     returned.

     *Since:* 2.8.0

gnutls_x509_crl_get_extension_oid
---------------------------------

 -- Function: int gnutls_x509_crl_get_extension_oid (gnutls_x509_crl_t
          CRL, int INDX, void * OID, size_t * SIZEOF_OID)
     CRL: should contain a 'gnutls_x509_crl_t' structure

     INDX: Specifies which extension OID to send, use zero to get the
     first one.

     OID: a pointer to a structure to hold the OID (may be null)

     SIZEOF_OID: initially holds the size of 'oid'

     This function will return the requested extension OID in the CRL.
     The extension OID will be stored as a string in the provided
     buffer.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative value in case of an error.  If your have reached the last
     extension available 'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be
     returned.

     *Since:* 2.8.0

gnutls_x509_crl_get_issuer_dn_by_oid
------------------------------------

 -- Function: int gnutls_x509_crl_get_issuer_dn_by_oid
          (gnutls_x509_crl_t CRL, const char * OID, int INDX, unsigned
          int RAW_FLAG, void * BUF, size_t * SIZEOF_BUF)
     CRL: should contain a gnutls_x509_crl_t structure

     OID: holds an Object Identified in null terminated string

     INDX: In case multiple same OIDs exist in the RDN, this specifies
     which to send.  Use zero to get the first one.

     RAW_FLAG: If non zero returns the raw DER data of the DN part.

     BUF: a pointer to a structure to hold the peer's name (may be null)

     SIZEOF_BUF: initially holds the size of 'buf'

     This function will extract the part of the name of the CRL issuer
     specified by the given OID. The output will be encoded as described
     in RFC2253.  The output string will be ASCII or UTF-8 encoded,
     depending on the certificate data.

     Some helper macros with popular OIDs can be found in gnutls/x509.h
     If raw flag is zero, this function will only return known OIDs as
     text.  Other OIDs will be DER encoded, as described in RFC2253 - in
     hex format with a '\#' prefix.  You can check about known OIDs
     using 'gnutls_x509_dn_oid_known()'.

     If buf is null then only the size will be filled.

     *Returns:* 'GNUTLS_E_SHORT_MEMORY_BUFFER' if the provided buffer is
     not long enough, and in that case the sizeof_buf will be updated
     with the required size, and 0 on success.

gnutls_x509_crl_get_issuer_dn
-----------------------------

 -- Function: int gnutls_x509_crl_get_issuer_dn (const gnutls_x509_crl_t
          CRL, char * BUF, size_t * SIZEOF_BUF)
     CRL: should contain a gnutls_x509_crl_t structure

     BUF: a pointer to a structure to hold the peer's name (may be null)

     SIZEOF_BUF: initially holds the size of 'buf'

     This function will copy the name of the CRL issuer in the provided
     buffer.  The name will be in the form "C=xxxx,O=yyyy,CN=zzzz" as
     described in RFC2253.  The output string will be ASCII or UTF-8
     encoded, depending on the certificate data.

     If buf is 'NULL' then only the size will be filled.

     *Returns:* 'GNUTLS_E_SHORT_MEMORY_BUFFER' if the provided buffer is
     not long enough, and in that case the sizeof_buf will be updated
     with the required size, and 0 on success.

gnutls_x509_crl_get_next_update
-------------------------------

 -- Function: time_t gnutls_x509_crl_get_next_update (gnutls_x509_crl_t
          CRL)
     CRL: should contain a 'gnutls_x509_crl_t' structure

     This function will return the time the next CRL will be issued.
     This field is optional in a CRL so it might be normal to get an
     error instead.

     *Returns:* when the next CRL will be issued, or (time_t)-1 on
     error.

gnutls_x509_crl_get_number
--------------------------

 -- Function: int gnutls_x509_crl_get_number (gnutls_x509_crl_t CRL,
          void * RET, size_t * RET_SIZE, unsigned int * CRITICAL)
     CRL: should contain a 'gnutls_x509_crl_t' structure

     RET: The place where the number will be copied

     RET_SIZE: Holds the size of the result field.

     CRITICAL: will be non zero if the extension is marked as critical
     (may be null)

     This function will return the CRL number extension.  This is
     obtained by the CRL Number extension field (2.5.29.20).

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative value in case of an error.

     *Since:* 2.8.0

gnutls_x509_crl_get_raw_issuer_dn
---------------------------------

 -- Function: int gnutls_x509_crl_get_raw_issuer_dn (gnutls_x509_crl_t
          CRL, gnutls_datum_t * DN)
     CRL: should contain a gnutls_x509_crl_t structure

     DN: will hold the starting point of the DN

     This function will return a pointer to the DER encoded DN structure
     and the length.

     *Returns:* a negative value on error, and zero on success.

     *Since:* 2.12.0

gnutls_x509_crl_get_signature_algorithm
---------------------------------------

 -- Function: int gnutls_x509_crl_get_signature_algorithm
          (gnutls_x509_crl_t CRL)
     CRL: should contain a 'gnutls_x509_crl_t' structure

     This function will return a value of the 'gnutls_sign_algorithm_t'
     enumeration that is the signature algorithm.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crl_get_signature
-----------------------------

 -- Function: int gnutls_x509_crl_get_signature (gnutls_x509_crl_t CRL,
          char * SIG, size_t * SIZEOF_SIG)
     CRL: should contain a gnutls_x509_crl_t structure

     SIG: a pointer where the signature part will be copied (may be
     null).

     SIZEOF_SIG: initially holds the size of 'sig'

     This function will extract the signature field of a CRL.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.  and a negative value on error.

gnutls_x509_crl_get_this_update
-------------------------------

 -- Function: time_t gnutls_x509_crl_get_this_update (gnutls_x509_crl_t
          CRL)
     CRL: should contain a 'gnutls_x509_crl_t' structure

     This function will return the time this CRL was issued.

     *Returns:* when the CRL was issued, or (time_t)-1 on error.

gnutls_x509_crl_get_version
---------------------------

 -- Function: int gnutls_x509_crl_get_version (gnutls_x509_crl_t CRL)
     CRL: should contain a 'gnutls_x509_crl_t' structure

     This function will return the version of the specified CRL.

     *Returns:* The version number, or a negative value on error.

gnutls_x509_crl_import
----------------------

 -- Function: int gnutls_x509_crl_import (gnutls_x509_crl_t CRL, const
          gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FORMAT)
     CRL: The structure to store the parsed CRL.

     DATA: The DER or PEM encoded CRL.

     FORMAT: One of DER or PEM

     This function will convert the given DER or PEM encoded CRL to the
     native 'gnutls_x509_crl_t' format.  The output will be stored in
     'crl'.

     If the CRL is PEM encoded it should have a header of "X509 CRL".

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crl_init
--------------------

 -- Function: int gnutls_x509_crl_init (gnutls_x509_crl_t * CRL)
     CRL: The structure to be initialized

     This function will initialize a CRL structure.  CRL stands for
     Certificate Revocation List.  A revocation list usually contains
     lists of certificate serial numbers that have been revoked by an
     Authority.  The revocation lists are always signed with the
     authority's private key.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crl_print
---------------------

 -- Function: int gnutls_x509_crl_print (gnutls_x509_crl_t CRL,
          gnutls_certificate_print_formats_t FORMAT, gnutls_datum_t *
          OUT)
     CRL: The structure to be printed

     FORMAT: Indicate the format to use

     OUT: Newly allocated datum with zero terminated string.

     This function will pretty print a X.509 certificate revocation
     list, suitable for display to a human.

     The output 'out' needs to be deallocate using 'gnutls_free()'.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crl_privkey_sign
----------------------------

 -- Function: int gnutls_x509_crl_privkey_sign (gnutls_x509_crl_t CRL,
          gnutls_x509_crt_t ISSUER, gnutls_privkey_t ISSUER_KEY,
          gnutls_digest_algorithm_t DIG, unsigned int FLAGS)
     CRL: should contain a gnutls_x509_crl_t structure

     ISSUER: is the certificate of the certificate issuer

     ISSUER_KEY: holds the issuer's private key

     DIG: The message digest to use.  GNUTLS_DIG_SHA1 is the safe choice
     unless you know what you're doing.

     FLAGS: must be 0

     This function will sign the CRL with the issuer's private key, and
     will copy the issuer's information into the CRL.

     This must be the last step in a certificate CRL since all the
     previously set parameters are now signed.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crl_set_authority_key_id
------------------------------------

 -- Function: int gnutls_x509_crl_set_authority_key_id
          (gnutls_x509_crl_t CRL, const void * ID, size_t ID_SIZE)
     CRL: a CRL of type 'gnutls_x509_crl_t'

     ID: The key ID

     ID_SIZE: Holds the size of the serial field.

     This function will set the CRL's authority key ID extension.  Only
     the keyIdentifier field can be set with this function.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

     *Since:* 2.8.0

gnutls_x509_crl_set_crt_serial
------------------------------

 -- Function: int gnutls_x509_crl_set_crt_serial (gnutls_x509_crl_t CRL,
          const void * SERIAL, size_t SERIAL_SIZE, time_t
          REVOCATION_TIME)
     CRL: should contain a gnutls_x509_crl_t structure

     SERIAL: The revoked certificate's serial number

     SERIAL_SIZE: Holds the size of the serial field.

     REVOCATION_TIME: The time this certificate was revoked

     This function will set a revoked certificate's serial number to the
     CRL.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crl_set_crt
-----------------------

 -- Function: int gnutls_x509_crl_set_crt (gnutls_x509_crl_t CRL,
          gnutls_x509_crt_t CRT, time_t REVOCATION_TIME)
     CRL: should contain a gnutls_x509_crl_t structure

     CRT: a certificate of type 'gnutls_x509_crt_t' with the revoked
     certificate

     REVOCATION_TIME: The time this certificate was revoked

     This function will set a revoked certificate's serial number to the
     CRL.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crl_set_next_update
-------------------------------

 -- Function: int gnutls_x509_crl_set_next_update (gnutls_x509_crl_t
          CRL, time_t EXP_TIME)
     CRL: should contain a gnutls_x509_crl_t structure

     EXP_TIME: The actual time

     This function will set the time this CRL will be updated.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crl_set_number
--------------------------

 -- Function: int gnutls_x509_crl_set_number (gnutls_x509_crl_t CRL,
          const void * NR, size_t NR_SIZE)
     CRL: a CRL of type 'gnutls_x509_crl_t'

     NR: The CRL number

     NR_SIZE: Holds the size of the nr field.

     This function will set the CRL's number extension.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

     *Since:* 2.8.0

gnutls_x509_crl_set_this_update
-------------------------------

 -- Function: int gnutls_x509_crl_set_this_update (gnutls_x509_crl_t
          CRL, time_t ACT_TIME)
     CRL: should contain a gnutls_x509_crl_t structure

     ACT_TIME: The actual time

     This function will set the time this CRL was issued.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crl_set_version
---------------------------

 -- Function: int gnutls_x509_crl_set_version (gnutls_x509_crl_t CRL,
          unsigned int VERSION)
     CRL: should contain a gnutls_x509_crl_t structure

     VERSION: holds the version number.  For CRLv1 crls must be 1.

     This function will set the version of the CRL. This must be one for
     CRL version 1, and so on.  The CRLs generated by gnutls should have
     a version number of 2.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crl_sign2
---------------------

 -- Function: int gnutls_x509_crl_sign2 (gnutls_x509_crl_t CRL,
          gnutls_x509_crt_t ISSUER, gnutls_x509_privkey_t ISSUER_KEY,
          gnutls_digest_algorithm_t DIG, unsigned int FLAGS)
     CRL: should contain a gnutls_x509_crl_t structure

     ISSUER: is the certificate of the certificate issuer

     ISSUER_KEY: holds the issuer's private key

     DIG: The message digest to use.  GNUTLS_DIG_SHA1 is the safe choice
     unless you know what you're doing.

     FLAGS: must be 0

     This function will sign the CRL with the issuer's private key, and
     will copy the issuer's information into the CRL.

     This must be the last step in a certificate CRL since all the
     previously set parameters are now signed.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

     *Deprecated:* Use 'gnutls_x509_crl_privkey_sign()' instead.

gnutls_x509_crl_sign
--------------------

 -- Function: int gnutls_x509_crl_sign (gnutls_x509_crl_t CRL,
          gnutls_x509_crt_t ISSUER, gnutls_x509_privkey_t ISSUER_KEY)
     CRL: should contain a gnutls_x509_crl_t structure

     ISSUER: is the certificate of the certificate issuer

     ISSUER_KEY: holds the issuer's private key

     This function is the same a 'gnutls_x509_crl_sign2()' with no
     flags, and SHA1 as the hash algorithm.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

     *Deprecated:* Use 'gnutls_x509_crl_privkey_sign()'.

gnutls_x509_crl_verify
----------------------

 -- Function: int gnutls_x509_crl_verify (gnutls_x509_crl_t CRL, const
          gnutls_x509_crt_t * CA_LIST, int CA_LIST_LENGTH, unsigned int
          FLAGS, unsigned int * VERIFY)
     CRL: is the crl to be verified

     CA_LIST: is a certificate list that is considered to be trusted one

     CA_LIST_LENGTH: holds the number of CA certificates in CA_list

     FLAGS: Flags that may be used to change the verification algorithm.
     Use OR of the gnutls_certificate_verify_flags enumerations.

     VERIFY: will hold the crl verification output.

     This function will try to verify the given crl and return its
     status.  See 'gnutls_x509_crt_list_verify()' for a detailed
     description of return values.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crq_deinit
----------------------

 -- Function: void gnutls_x509_crq_deinit (gnutls_x509_crq_t CRQ)
     CRQ: The structure to be initialized

     This function will deinitialize a PKCS'10' certificate request
     structure.

gnutls_x509_crq_export
----------------------

 -- Function: int gnutls_x509_crq_export (gnutls_x509_crq_t CRQ,
          gnutls_x509_crt_fmt_t FORMAT, void * OUTPUT_DATA, size_t *
          OUTPUT_DATA_SIZE)
     CRQ: should contain a 'gnutls_x509_crq_t' structure

     FORMAT: the format of output params.  One of PEM or DER.

     OUTPUT_DATA: will contain a certificate request PEM or DER encoded

     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
     replaced by the actual size of parameters)

     This function will export the certificate request to a PEM or DER
     encoded PKCS10 structure.

     If the buffer provided is not long enough to hold the output, then
     'GNUTLS_E_SHORT_MEMORY_BUFFER' will be returned and
     *'output_data_size' will be updated.

     If the structure is PEM encoded, it will have a header of "BEGIN
     NEW CERTIFICATE REQUEST".

     *Return value:* In case of failure a negative value will be
     returned, and 0 on success.

gnutls_x509_crq_get_attribute_by_oid
------------------------------------

 -- Function: int gnutls_x509_crq_get_attribute_by_oid
          (gnutls_x509_crq_t CRQ, const char * OID, int INDX, void *
          BUF, size_t * SIZEOF_BUF)
     CRQ: should contain a 'gnutls_x509_crq_t' structure

     OID: holds an Object Identified in zero-terminated string

     INDX: In case multiple same OIDs exist in the attribute list, this
     specifies which to send, use zero to get the first one

     BUF: a pointer to a structure to hold the attribute data (may be
     'NULL')

     SIZEOF_BUF: initially holds the size of 'buf'

     This function will return the attribute in the certificate request
     specified by the given Object ID. The attribute will be DER
     encoded.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crq_get_attribute_data
----------------------------------

 -- Function: int gnutls_x509_crq_get_attribute_data (gnutls_x509_crq_t
          CRQ, int INDX, void * DATA, size_t * SIZEOF_DATA)
     CRQ: should contain a 'gnutls_x509_crq_t' structure

     INDX: Specifies which attribute OID to send.  Use zero to get the
     first one.

     DATA: a pointer to a structure to hold the data (may be null)

     SIZEOF_DATA: initially holds the size of 'oid'

     This function will return the requested attribute data in the
     certificate request.  The attribute data will be stored as a string
     in the provided buffer.

     Use 'gnutls_x509_crq_get_attribute_info()' to extract the OID. Use
     'gnutls_x509_crq_get_attribute_by_oid()' instead, if you want to
     get data indexed by the attribute OID rather than sequence.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative value in case of an error.  If your have reached the last
     extension available 'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be
     returned.

     *Since:* 2.8.0

gnutls_x509_crq_get_attribute_info
----------------------------------

 -- Function: int gnutls_x509_crq_get_attribute_info (gnutls_x509_crq_t
          CRQ, int INDX, void * OID, size_t * SIZEOF_OID)
     CRQ: should contain a 'gnutls_x509_crq_t' structure

     INDX: Specifies which attribute OID to send.  Use zero to get the
     first one.

     OID: a pointer to a structure to hold the OID

     SIZEOF_OID: initially holds the maximum size of 'oid', on return
     holds actual size of 'oid'.

     This function will return the requested attribute OID in the
     certificate, and the critical flag for it.  The attribute OID will
     be stored as a string in the provided buffer.  Use
     'gnutls_x509_crq_get_attribute_data()' to extract the data.

     If the buffer provided is not long enough to hold the output, then
     *'sizeof_oid' is updated and 'GNUTLS_E_SHORT_MEMORY_BUFFER' will be
     returned.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative value in case of an error.  If your have reached the last
     extension available 'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be
     returned.

     *Since:* 2.8.0

gnutls_x509_crq_get_basic_constraints
-------------------------------------

 -- Function: int gnutls_x509_crq_get_basic_constraints
          (gnutls_x509_crq_t CRQ, unsigned int * CRITICAL, int * CA, int
          * PATHLEN)
     CRQ: should contain a 'gnutls_x509_crq_t' structure

     CRITICAL: will be non zero if the extension is marked as critical

     CA: pointer to output integer indicating CA status, may be NULL,
     value is 1 if the certificate CA flag is set, 0 otherwise.

     PATHLEN: pointer to output integer indicating path length (may be
     NULL), non-negative values indicate a present pathLenConstraint
     field and the actual value, -1 indicate that the field is absent.

     This function will read the certificate's basic constraints, and
     return the certificates CA status.  It reads the basicConstraints
     X.509 extension (2.5.29.19).

     *Return value:* If the certificate is a CA a positive value will be
     returned, or zero if the certificate does not have CA flag set.  A
     negative value may be returned in case of errors.  If the
     certificate does not contain the basicConstraints extension
     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.

     *Since:* 2.8.0

gnutls_x509_crq_get_challenge_password
--------------------------------------

 -- Function: int gnutls_x509_crq_get_challenge_password
          (gnutls_x509_crq_t CRQ, char * PASS, size_t * SIZEOF_PASS)
     CRQ: should contain a 'gnutls_x509_crq_t' structure

     PASS: will hold a zero-terminated password string

     SIZEOF_PASS: Initially holds the size of 'pass'.

     This function will return the challenge password in the request.
     The challenge password is intended to be used for requesting a
     revocation of the certificate.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crq_get_dn_by_oid
-----------------------------

 -- Function: int gnutls_x509_crq_get_dn_by_oid (gnutls_x509_crq_t CRQ,
          const char * OID, int INDX, unsigned int RAW_FLAG, void * BUF,
          size_t * SIZEOF_BUF)
     CRQ: should contain a gnutls_x509_crq_t structure

     OID: holds an Object Identified in null terminated string

     INDX: In case multiple same OIDs exist in the RDN, this specifies
     which to send.  Use zero to get the first one.

     RAW_FLAG: If non zero returns the raw DER data of the DN part.

     BUF: a pointer to a structure to hold the name (may be 'NULL')

     SIZEOF_BUF: initially holds the size of 'buf'

     This function will extract the part of the name of the Certificate
     request subject, specified by the given OID. The output will be
     encoded as described in RFC2253.  The output string will be ASCII
     or UTF-8 encoded, depending on the certificate data.

     Some helper macros with popular OIDs can be found in gnutls/x509.h
     If raw flag is zero, this function will only return known OIDs as
     text.  Other OIDs will be DER encoded, as described in RFC2253 - in
     hex format with a '\#' prefix.  You can check about known OIDs
     using 'gnutls_x509_dn_oid_known()'.

     *Returns:* 'GNUTLS_E_SHORT_MEMORY_BUFFER' if the provided buffer is
     not long enough, and in that case the *'sizeof_buf' will be updated
     with the required size.  On success 0 is returned.

gnutls_x509_crq_get_dn_oid
--------------------------

 -- Function: int gnutls_x509_crq_get_dn_oid (gnutls_x509_crq_t CRQ, int
          INDX, void * OID, size_t * SIZEOF_OID)
     CRQ: should contain a gnutls_x509_crq_t structure

     INDX: Specifies which DN OID to send.  Use zero to get the first
     one.

     OID: a pointer to a structure to hold the name (may be 'NULL')

     SIZEOF_OID: initially holds the size of 'oid'

     This function will extract the requested OID of the name of the
     certificate request subject, specified by the given index.

     *Returns:* 'GNUTLS_E_SHORT_MEMORY_BUFFER' if the provided buffer is
     not long enough, and in that case the *'sizeof_oid' will be updated
     with the required size.  On success 0 is returned.

gnutls_x509_crq_get_dn
----------------------

 -- Function: int gnutls_x509_crq_get_dn (gnutls_x509_crq_t CRQ, char *
          BUF, size_t * SIZEOF_BUF)
     CRQ: should contain a 'gnutls_x509_crq_t' structure

     BUF: a pointer to a structure to hold the name (may be 'NULL')

     SIZEOF_BUF: initially holds the size of 'buf'

     This function will copy the name of the Certificate request subject
     to the provided buffer.  The name will be in the form
     "C=xxxx,O=yyyy,CN=zzzz" as described in RFC 2253.  The output
     string 'buf' will be ASCII or UTF-8 encoded, depending on the
     certificate data.

     *Returns:* 'GNUTLS_E_SHORT_MEMORY_BUFFER' if the provided buffer is
     not long enough, and in that case the *'sizeof_buf' will be updated
     with the required size.  On success 0 is returned.

gnutls_x509_crq_get_extension_by_oid
------------------------------------

 -- Function: int gnutls_x509_crq_get_extension_by_oid
          (gnutls_x509_crq_t CRQ, const char * OID, int INDX, void *
          BUF, size_t * SIZEOF_BUF, unsigned int * CRITICAL)
     CRQ: should contain a 'gnutls_x509_crq_t' structure

     OID: holds an Object Identified in null terminated string

     INDX: In case multiple same OIDs exist in the extensions, this
     specifies which to send.  Use zero to get the first one.

     BUF: a pointer to a structure to hold the name (may be null)

     SIZEOF_BUF: initially holds the size of 'buf'

     CRITICAL: will be non zero if the extension is marked as critical

     This function will return the extension specified by the OID in the
     certificate.  The extensions will be returned as binary data DER
     encoded, in the provided buffer.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative value in case of an error.  If the certificate does not
     contain the specified extension
     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.

     *Since:* 2.8.0

gnutls_x509_crq_get_extension_data
----------------------------------

 -- Function: int gnutls_x509_crq_get_extension_data (gnutls_x509_crq_t
          CRQ, int INDX, void * DATA, size_t * SIZEOF_DATA)
     CRQ: should contain a 'gnutls_x509_crq_t' structure

     INDX: Specifies which extension OID to send.  Use zero to get the
     first one.

     DATA: a pointer to a structure to hold the data (may be null)

     SIZEOF_DATA: initially holds the size of 'oid'

     This function will return the requested extension data in the
     certificate.  The extension data will be stored as a string in the
     provided buffer.

     Use 'gnutls_x509_crq_get_extension_info()' to extract the OID and
     critical flag.  Use 'gnutls_x509_crq_get_extension_by_oid()'
     instead, if you want to get data indexed by the extension OID
     rather than sequence.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative value in case of an error.  If your have reached the last
     extension available 'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be
     returned.

     *Since:* 2.8.0

gnutls_x509_crq_get_extension_info
----------------------------------

 -- Function: int gnutls_x509_crq_get_extension_info (gnutls_x509_crq_t
          CRQ, int INDX, void * OID, size_t * SIZEOF_OID, int *
          CRITICAL)
     CRQ: should contain a 'gnutls_x509_crq_t' structure

     INDX: Specifies which extension OID to send.  Use zero to get the
     first one.

     OID: a pointer to a structure to hold the OID

     SIZEOF_OID: initially holds the maximum size of 'oid', on return
     holds actual size of 'oid'.

     CRITICAL: output variable with critical flag, may be NULL.

     This function will return the requested extension OID in the
     certificate, and the critical flag for it.  The extension OID will
     be stored as a string in the provided buffer.  Use
     'gnutls_x509_crq_get_extension_data()' to extract the data.

     If the buffer provided is not long enough to hold the output, then
     *'sizeof_oid' is updated and 'GNUTLS_E_SHORT_MEMORY_BUFFER' will be
     returned.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative value in case of an error.  If your have reached the last
     extension available 'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be
     returned.

     *Since:* 2.8.0

gnutls_x509_crq_get_key_id
--------------------------

 -- Function: int gnutls_x509_crq_get_key_id (gnutls_x509_crq_t CRQ,
          unsigned int FLAGS, unsigned char * OUTPUT_DATA, size_t *
          OUTPUT_DATA_SIZE)
     CRQ: a certificate of type 'gnutls_x509_crq_t'

     FLAGS: should be 0 for now

     OUTPUT_DATA: will contain the key ID

     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
     replaced by the actual size of parameters)

     This function will return a unique ID the depends on the public key
     parameters.  This ID can be used in checking whether a certificate
     corresponds to the given private key.

     If the buffer provided is not long enough to hold the output, then
     *'output_data_size' is updated and GNUTLS_E_SHORT_MEMORY_BUFFER
     will be returned.  The output will normally be a SHA-1 hash output,
     which is 20 bytes.

     *Return value:* In case of failure a negative value will be
     returned, and 0 on success.

     *Since:* 2.8.0

gnutls_x509_crq_get_key_purpose_oid
-----------------------------------

 -- Function: int gnutls_x509_crq_get_key_purpose_oid (gnutls_x509_crq_t
          CRQ, int INDX, void * OID, size_t * SIZEOF_OID, unsigned int *
          CRITICAL)
     CRQ: should contain a 'gnutls_x509_crq_t' structure

     INDX: This specifies which OID to return, use zero to get the first
     one

     OID: a pointer to a buffer to hold the OID (may be 'NULL')

     SIZEOF_OID: initially holds the size of 'oid'

     CRITICAL: output variable with critical flag, may be 'NULL'.

     This function will extract the key purpose OIDs of the Certificate
     specified by the given index.  These are stored in the Extended Key
     Usage extension (2.5.29.37).  See the GNUTLS_KP_* definitions for
     human readable names.

     *Returns:* 'GNUTLS_E_SHORT_MEMORY_BUFFER' if the provided buffer is
     not long enough, and in that case the *'sizeof_oid' will be updated
     with the required size.  On success 0 is returned.

     *Since:* 2.8.0

gnutls_x509_crq_get_key_rsa_raw
-------------------------------

 -- Function: int gnutls_x509_crq_get_key_rsa_raw (gnutls_x509_crq_t
          CRQ, gnutls_datum_t * M, gnutls_datum_t * E)
     CRQ: Holds the certificate

     M: will hold the modulus

     E: will hold the public exponent

     This function will export the RSA public key's parameters found in
     the given structure.  The new parameters will be allocated using
     'gnutls_malloc()' and will be stored in the appropriate datum.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

     *Since:* 2.8.0

gnutls_x509_crq_get_key_usage
-----------------------------

 -- Function: int gnutls_x509_crq_get_key_usage (gnutls_x509_crq_t CRQ,
          unsigned int * KEY_USAGE, unsigned int * CRITICAL)
     CRQ: should contain a 'gnutls_x509_crq_t' structure

     KEY_USAGE: where the key usage bits will be stored

     CRITICAL: will be non zero if the extension is marked as critical

     This function will return certificate's key usage, by reading the
     keyUsage X.509 extension (2.5.29.15).  The key usage value will

     *ORed values of the:* 'GNUTLS_KEY_DIGITAL_SIGNATURE',
     'GNUTLS_KEY_NON_REPUDIATION', 'GNUTLS_KEY_KEY_ENCIPHERMENT',
     'GNUTLS_KEY_DATA_ENCIPHERMENT', 'GNUTLS_KEY_KEY_AGREEMENT',
     'GNUTLS_KEY_KEY_CERT_SIGN', 'GNUTLS_KEY_CRL_SIGN',
     'GNUTLS_KEY_ENCIPHER_ONLY', 'GNUTLS_KEY_DECIPHER_ONLY'.

     *Returns:* the certificate key usage, or a negative value in case
     of parsing error.  If the certificate does not contain the keyUsage
     extension 'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.

     *Since:* 2.8.0

gnutls_x509_crq_get_pk_algorithm
--------------------------------

 -- Function: int gnutls_x509_crq_get_pk_algorithm (gnutls_x509_crq_t
          CRQ, unsigned int * BITS)
     CRQ: should contain a 'gnutls_x509_crq_t' structure

     BITS: if bits is non-'NULL' it will hold the size of the
     parameters' in bits

     This function will return the public key algorithm of a PKCS'10'
     certificate request.

     If bits is non-'NULL', it should have enough size to hold the
     parameters size in bits.  For RSA the bits returned is the modulus.
     For DSA the bits returned are of the public exponent.

     *Returns:* a member of the 'gnutls_pk_algorithm_t' enumeration on
     success, or a negative value on error.

gnutls_x509_crq_get_subject_alt_name
------------------------------------

 -- Function: int gnutls_x509_crq_get_subject_alt_name
          (gnutls_x509_crq_t CRQ, unsigned int SEQ, void * RET, size_t *
          RET_SIZE, unsigned int * RET_TYPE, unsigned int * CRITICAL)
     CRQ: should contain a 'gnutls_x509_crq_t' structure

     SEQ: specifies the sequence number of the alt name, 0 for the first
     one, 1 for the second etc.

     RET: is the place where the alternative name will be copied to

     RET_SIZE: holds the size of ret.

     RET_TYPE: holds the 'gnutls_x509_subject_alt_name_t' name type

     CRITICAL: will be non zero if the extension is marked as critical
     (may be null)

     This function will return the alternative names, contained in the
     given certificate.  It is the same as
     'gnutls_x509_crq_get_subject_alt_name()' except for the fact that
     it will return the type of the alternative name in 'ret_type' even
     if the function fails for some reason (i.e.  the buffer provided is
     not enough).

     *Returns:* the alternative subject name type on success, one of the
     enumerated 'gnutls_x509_subject_alt_name_t'.  It will return
     'GNUTLS_E_SHORT_MEMORY_BUFFER' if 'ret_size' is not large enough to
     hold the value.  In that case 'ret_size' will be updated with the
     required size.  If the certificate request does not have an
     Alternative name with the specified sequence number then
     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' is returned.

     *Since:* 2.8.0

gnutls_x509_crq_get_subject_alt_othername_oid
---------------------------------------------

 -- Function: int gnutls_x509_crq_get_subject_alt_othername_oid
          (gnutls_x509_crq_t CRQ, unsigned int SEQ, void * RET, size_t *
          RET_SIZE)
     CRQ: should contain a 'gnutls_x509_crq_t' structure

     SEQ: specifies the sequence number of the alt name (0 for the first
     one, 1 for the second etc.)

     RET: is the place where the otherName OID will be copied to

     RET_SIZE: holds the size of ret.

     This function will extract the type OID of an otherName Subject
     Alternative Name, contained in the given certificate, and return
     the type as an enumerated element.

     This function is only useful if
     'gnutls_x509_crq_get_subject_alt_name()' returned
     'GNUTLS_SAN_OTHERNAME'.

     *Returns:* the alternative subject name type on success, one of the
     enumerated gnutls_x509_subject_alt_name_t.  For supported OIDs, it
     will return one of the virtual (GNUTLS_SAN_OTHERNAME_*) types, e.g.
     'GNUTLS_SAN_OTHERNAME_XMPP', and 'GNUTLS_SAN_OTHERNAME' for unknown
     OIDs.  It will return 'GNUTLS_E_SHORT_MEMORY_BUFFER' if 'ret_size'
     is not large enough to hold the value.  In that case 'ret_size'
     will be updated with the required size.  If the certificate does
     not have an Alternative name with the specified sequence number and
     with the otherName type then
     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' is returned.

     *Since:* 2.8.0

gnutls_x509_crq_get_version
---------------------------

 -- Function: int gnutls_x509_crq_get_version (gnutls_x509_crq_t CRQ)
     CRQ: should contain a 'gnutls_x509_crq_t' structure

     This function will return the version of the specified Certificate
     request.

     *Returns:* version of certificate request, or a negative value on
     error.

gnutls_x509_crq_import
----------------------

 -- Function: int gnutls_x509_crq_import (gnutls_x509_crq_t CRQ, const
          gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FORMAT)
     CRQ: The structure to store the parsed certificate request.

     DATA: The DER or PEM encoded certificate.

     FORMAT: One of DER or PEM

     This function will convert the given DER or PEM encoded certificate
     request to a 'gnutls_x509_crq_t' structure.  The output will be
     stored in 'crq'.

     If the Certificate is PEM encoded it should have a header of "NEW
     CERTIFICATE REQUEST".

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crq_init
--------------------

 -- Function: int gnutls_x509_crq_init (gnutls_x509_crq_t * CRQ)
     CRQ: The structure to be initialized

     This function will initialize a PKCS'10' certificate request
     structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crq_print
---------------------

 -- Function: int gnutls_x509_crq_print (gnutls_x509_crq_t CRQ,
          gnutls_certificate_print_formats_t FORMAT, gnutls_datum_t *
          OUT)
     CRQ: The structure to be printed

     FORMAT: Indicate the format to use

     OUT: Newly allocated datum with zero terminated string.

     This function will pretty print a certificate request, suitable for
     display to a human.

     The output 'out' needs to be deallocate using 'gnutls_free()'.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

     *Since:* 2.8.0

gnutls_x509_crq_privkey_sign
----------------------------

 -- Function: int gnutls_x509_crq_privkey_sign (gnutls_x509_crq_t CRQ,
          gnutls_privkey_t KEY, gnutls_digest_algorithm_t DIG, unsigned
          int FLAGS)
     CRQ: should contain a 'gnutls_x509_crq_t' structure

     KEY: holds a private key

     DIG: The message digest to use, i.e., 'GNUTLS_DIG_SHA1'

     FLAGS: must be 0

     This function will sign the certificate request with a private key.
     This must be the same key as the one used in
     'gnutls_x509_crt_set_key()' since a certificate request is self
     signed.

     This must be the last step in a certificate request generation
     since all the previously set parameters are now signed.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise an error.
     'GNUTLS_E_ASN1_VALUE_NOT_FOUND' is returned if you didn't set all
     information in the certificate request (e.g., the version using
     'gnutls_x509_crq_set_version()').

gnutls_x509_crq_set_attribute_by_oid
------------------------------------

 -- Function: int gnutls_x509_crq_set_attribute_by_oid
          (gnutls_x509_crq_t CRQ, const char * OID, void * BUF, size_t
          SIZEOF_BUF)
     CRQ: should contain a 'gnutls_x509_crq_t' structure

     OID: holds an Object Identified in zero-terminated string

     BUF: a pointer to a structure that holds the attribute data

     SIZEOF_BUF: holds the size of 'buf'

     This function will set the attribute in the certificate request
     specified by the given Object ID. The attribute must be be DER
     encoded.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crq_set_basic_constraints
-------------------------------------

 -- Function: int gnutls_x509_crq_set_basic_constraints
          (gnutls_x509_crq_t CRQ, unsigned int CA, int
          PATHLENCONSTRAINT)
     CRQ: a certificate request of type 'gnutls_x509_crq_t'

     CA: true(1) or false(0) depending on the Certificate authority
     status.

     PATHLENCONSTRAINT: non-negative values indicate maximum length of
     path, and negative values indicate that the pathLenConstraints
     field should not be present.

     This function will set the basicConstraints certificate extension.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

     *Since:* 2.8.0

gnutls_x509_crq_set_challenge_password
--------------------------------------

 -- Function: int gnutls_x509_crq_set_challenge_password
          (gnutls_x509_crq_t CRQ, const char * PASS)
     CRQ: should contain a 'gnutls_x509_crq_t' structure

     PASS: holds a zero-terminated password

     This function will set a challenge password to be used when
     revoking the request.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crq_set_dn_by_oid
-----------------------------

 -- Function: int gnutls_x509_crq_set_dn_by_oid (gnutls_x509_crq_t CRQ,
          const char * OID, unsigned int RAW_FLAG, const void * DATA,
          unsigned int SIZEOF_DATA)
     CRQ: should contain a 'gnutls_x509_crq_t' structure

     OID: holds an Object Identifier in a zero-terminated string

     RAW_FLAG: must be 0, or 1 if the data are DER encoded

     DATA: a pointer to the input data

     SIZEOF_DATA: holds the size of 'data'

     This function will set the part of the name of the Certificate
     request subject, specified by the given OID. The input string
     should be ASCII or UTF-8 encoded.

     Some helper macros with popular OIDs can be found in gnutls/x509.h
     With this function you can only set the known OIDs.  You can test
     for known OIDs using 'gnutls_x509_dn_oid_known()'.  For OIDs that
     are not known (by gnutls) you should properly DER encode your data,
     and call this function with raw_flag set.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crq_set_key_purpose_oid
-----------------------------------

 -- Function: int gnutls_x509_crq_set_key_purpose_oid (gnutls_x509_crq_t
          CRQ, const void * OID, unsigned int CRITICAL)
     CRQ: a certificate of type 'gnutls_x509_crq_t'

     OID: a pointer to a zero-terminated string that holds the OID

     CRITICAL: Whether this extension will be critical or not

     This function will set the key purpose OIDs of the Certificate.
     These are stored in the Extended Key Usage extension (2.5.29.37)
     See the GNUTLS_KP_* definitions for human readable names.

     Subsequent calls to this function will append OIDs to the OID list.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

     *Since:* 2.8.0

gnutls_x509_crq_set_key_rsa_raw
-------------------------------

 -- Function: int gnutls_x509_crq_set_key_rsa_raw (gnutls_x509_crq_t
          CRQ, const gnutls_datum_t * M, const gnutls_datum_t * E)
     CRQ: should contain a 'gnutls_x509_crq_t' structure

     M: holds the modulus

     E: holds the public exponent

     This function will set the public parameters from the given private
     key to the request.  Only RSA keys are currently supported.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

     *Since:* 2.6.0

gnutls_x509_crq_set_key_usage
-----------------------------

 -- Function: int gnutls_x509_crq_set_key_usage (gnutls_x509_crq_t CRQ,
          unsigned int USAGE)
     CRQ: a certificate request of type 'gnutls_x509_crq_t'

     USAGE: an ORed sequence of the GNUTLS_KEY_* elements.

     This function will set the keyUsage certificate extension.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

     *Since:* 2.8.0

gnutls_x509_crq_set_key
-----------------------

 -- Function: int gnutls_x509_crq_set_key (gnutls_x509_crq_t CRQ,
          gnutls_x509_privkey_t KEY)
     CRQ: should contain a 'gnutls_x509_crq_t' structure

     KEY: holds a private key

     This function will set the public parameters from the given private
     key to the request.  Only RSA keys are currently supported.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crq_set_subject_alt_name
------------------------------------

 -- Function: int gnutls_x509_crq_set_subject_alt_name
          (gnutls_x509_crq_t CRQ, gnutls_x509_subject_alt_name_t NT,
          const void * DATA, unsigned int DATA_SIZE, unsigned int FLAGS)
     CRQ: a certificate request of type 'gnutls_x509_crq_t'

     NT: is one of the 'gnutls_x509_subject_alt_name_t' enumerations

     DATA: The data to be set

     DATA_SIZE: The size of data to be set

     FLAGS: 'GNUTLS_FSAN_SET' to clear previous data or
     'GNUTLS_FSAN_APPEND' to append.

     This function will set the subject alternative name certificate
     extension.  It can set the following types:

     &GNUTLS_SAN_DNSNAME: as a text string

     &GNUTLS_SAN_RFC822NAME: as a text string

     &GNUTLS_SAN_URI: as a text string

     &GNUTLS_SAN_IPADDRESS: as a binary IP address (4 or 16 bytes)

     Other values can be set as binary values with the proper DER
     encoding.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

     *Since:* 2.8.0

gnutls_x509_crq_set_version
---------------------------

 -- Function: int gnutls_x509_crq_set_version (gnutls_x509_crq_t CRQ,
          unsigned int VERSION)
     CRQ: should contain a 'gnutls_x509_crq_t' structure

     VERSION: holds the version number, for v1 Requests must be 1

     This function will set the version of the certificate request.  For
     version 1 requests this must be one.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crq_sign2
---------------------

 -- Function: int gnutls_x509_crq_sign2 (gnutls_x509_crq_t CRQ,
          gnutls_x509_privkey_t KEY, gnutls_digest_algorithm_t DIG,
          unsigned int FLAGS)
     CRQ: should contain a 'gnutls_x509_crq_t' structure

     KEY: holds a private key

     DIG: The message digest to use, i.e., 'GNUTLS_DIG_SHA1'

     FLAGS: must be 0

     This function will sign the certificate request with a private key.
     This must be the same key as the one used in
     'gnutls_x509_crt_set_key()' since a certificate request is self
     signed.

     This must be the last step in a certificate request generation
     since all the previously set parameters are now signed.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise an error.
     'GNUTLS_E_ASN1_VALUE_NOT_FOUND' is returned if you didn't set all
     information in the certificate request (e.g., the version using
     'gnutls_x509_crq_set_version()').

     *Deprecated:* Use 'gnutls_x509_crq_privkey_sign()' instead.

gnutls_x509_crq_sign
--------------------

 -- Function: int gnutls_x509_crq_sign (gnutls_x509_crq_t CRQ,
          gnutls_x509_privkey_t KEY)
     CRQ: should contain a 'gnutls_x509_crq_t' structure

     KEY: holds a private key

     This function is the same a 'gnutls_x509_crq_sign2()' with no
     flags, and SHA1 as the hash algorithm.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

     *Deprecated:* Use 'gnutls_x509_crq_privkey_sign()' instead.

gnutls_x509_crq_verify
----------------------

 -- Function: int gnutls_x509_crq_verify (gnutls_x509_crq_t CRQ,
          unsigned int FLAGS)
     CRQ: is the crq to be verified

     FLAGS: Flags that may be used to change the verification algorithm.
     Use OR of the gnutls_certificate_verify_flags enumerations.

     This function will verify self signature in the certificate request
     and return its status.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned,
     'GNUTLS_E_PK_SIG_VERIFY_FAILED' if verification failed, otherwise a
     negative error value.

gnutls_x509_crt_check_hostname
------------------------------

 -- Function: int gnutls_x509_crt_check_hostname (gnutls_x509_crt_t
          CERT, const char * HOSTNAME)
     CERT: should contain an gnutls_x509_crt_t structure

     HOSTNAME: A null terminated string that contains a DNS name

     This function will check if the given certificate's subject matches
     the given hostname.  This is a basic implementation of the matching
     described in RFC2818 (HTTPS), which takes into account wildcards,
     and the DNSName/IPAddress subject alternative name PKIX extension.

     *Returns:* non zero for a successful match, and zero on failure.

gnutls_x509_crt_check_issuer
----------------------------

 -- Function: int gnutls_x509_crt_check_issuer (gnutls_x509_crt_t CERT,
          gnutls_x509_crt_t ISSUER)
     CERT: is the certificate to be checked

     ISSUER: is the certificate of a possible issuer

     This function will check if the given certificate was issued by the
     given issuer.  It checks the DN fields and the authority key
     identifier and subject key identifier fields match.

     *Returns:* It will return true (1) if the given certificate is
     issued by the given issuer, and false (0) if not.  A negative value
     is returned in case of an error.

gnutls_x509_crt_check_revocation
--------------------------------

 -- Function: int gnutls_x509_crt_check_revocation (gnutls_x509_crt_t
          CERT, const gnutls_x509_crl_t * CRL_LIST, int CRL_LIST_LENGTH)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     CRL_LIST: should contain a list of gnutls_x509_crl_t structures

     CRL_LIST_LENGTH: the length of the crl_list

     This function will return check if the given certificate is
     revoked.  It is assumed that the CRLs have been verified before.

     *Returns:* 0 if the certificate is NOT revoked, and 1 if it is.  A
     negative value is returned on error.

gnutls_x509_crt_cpy_crl_dist_points
-----------------------------------

 -- Function: int gnutls_x509_crt_cpy_crl_dist_points (gnutls_x509_crt_t
          DST, gnutls_x509_crt_t SRC)
     DST: a certificate of type 'gnutls_x509_crt_t'

     SRC: the certificate where the dist points will be copied from

     This function will copy the CRL distribution points certificate
     extension, from the source to the destination certificate.  This
     may be useful to copy from a CA certificate to issued ones.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crt_deinit
----------------------

 -- Function: void gnutls_x509_crt_deinit (gnutls_x509_crt_t CERT)
     CERT: The structure to be deinitialized

     This function will deinitialize a certificate structure.

gnutls_x509_crt_export
----------------------

 -- Function: int gnutls_x509_crt_export (gnutls_x509_crt_t CERT,
          gnutls_x509_crt_fmt_t FORMAT, void * OUTPUT_DATA, size_t *
          OUTPUT_DATA_SIZE)
     CERT: Holds the certificate

     FORMAT: the format of output params.  One of PEM or DER.

     OUTPUT_DATA: will contain a certificate PEM or DER encoded

     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
     replaced by the actual size of parameters)

     This function will export the certificate to DER or PEM format.

     If the buffer provided is not long enough to hold the output, then
     *output_data_size is updated and GNUTLS_E_SHORT_MEMORY_BUFFER will
     be returned.

     If the structure is PEM encoded, it will have a header of "BEGIN
     CERTIFICATE".

     *Return value:* In case of failure a negative value will be
     returned, and 0 on success.

gnutls_x509_crt_get_activation_time
-----------------------------------

 -- Function: time_t gnutls_x509_crt_get_activation_time
          (gnutls_x509_crt_t CERT)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     This function will return the time this Certificate was or will be
     activated.

     *Returns:* activation time, or (time_t)-1 on error.

gnutls_x509_crt_get_authority_key_id
------------------------------------

 -- Function: int gnutls_x509_crt_get_authority_key_id
          (gnutls_x509_crt_t CERT, void * RET, size_t * RET_SIZE,
          unsigned int * CRITICAL)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     RET: The place where the identifier will be copied

     RET_SIZE: Holds the size of the result field.

     CRITICAL: will be non zero if the extension is marked as critical
     (may be null)

     This function will return the X.509v3 certificate authority's key
     identifier.  This is obtained by the X.509 Authority Key identifier
     extension field (2.5.29.35).  Note that this function only returns
     the keyIdentifier field of the extension.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crt_get_basic_constraints
-------------------------------------

 -- Function: int gnutls_x509_crt_get_basic_constraints
          (gnutls_x509_crt_t CERT, unsigned int * CRITICAL, int * CA,
          int * PATHLEN)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     CRITICAL: will be non zero if the extension is marked as critical

     CA: pointer to output integer indicating CA status, may be NULL,
     value is 1 if the certificate CA flag is set, 0 otherwise.

     PATHLEN: pointer to output integer indicating path length (may be
     NULL), non-negative values indicate a present pathLenConstraint
     field and the actual value, -1 indicate that the field is absent.

     This function will read the certificate's basic constraints, and
     return the certificates CA status.  It reads the basicConstraints
     X.509 extension (2.5.29.19).

     *Return value:* If the certificate is a CA a positive value will be
     returned, or zero if the certificate does not have CA flag set.  A
     negative value may be returned in case of errors.  If the
     certificate does not contain the basicConstraints extension
     GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE will be returned.

gnutls_x509_crt_get_ca_status
-----------------------------

 -- Function: int gnutls_x509_crt_get_ca_status (gnutls_x509_crt_t CERT,
          unsigned int * CRITICAL)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     CRITICAL: will be non zero if the extension is marked as critical

     This function will return certificates CA status, by reading the
     basicConstraints X.509 extension (2.5.29.19).  If the certificate
     is a CA a positive value will be returned, or zero if the
     certificate does not have CA flag set.

     Use 'gnutls_x509_crt_get_basic_constraints()' if you want to read
     the pathLenConstraint field too.

     *Returns:* A negative value may be returned in case of parsing
     error.  If the certificate does not contain the basicConstraints
     extension 'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.

gnutls_x509_crt_get_crl_dist_points
-----------------------------------

 -- Function: int gnutls_x509_crt_get_crl_dist_points (gnutls_x509_crt_t
          CERT, unsigned int SEQ, void * RET, size_t * RET_SIZE,
          unsigned int * REASON_FLAGS, unsigned int * CRITICAL)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     SEQ: specifies the sequence number of the distribution point (0 for
     the first one, 1 for the second etc.)

     RET: is the place where the distribution point will be copied to

     RET_SIZE: holds the size of ret.

     REASON_FLAGS: Revocation reasons flags.

     CRITICAL: will be non zero if the extension is marked as critical
     (may be null)

     This function retrieves the CRL distribution points (2.5.29.31),
     contained in the given certificate in the X509v3 Certificate
     Extensions.

     'reason_flags' should be an ORed sequence of
     'GNUTLS_CRL_REASON_UNUSED', 'GNUTLS_CRL_REASON_KEY_COMPROMISE',
     'GNUTLS_CRL_REASON_CA_COMPROMISE',
     'GNUTLS_CRL_REASON_AFFILIATION_CHANGED',
     'GNUTLS_CRL_REASON_SUPERSEEDED',
     'GNUTLS_CRL_REASON_CESSATION_OF_OPERATION',
     'GNUTLS_CRL_REASON_CERTIFICATE_HOLD',
     'GNUTLS_CRL_REASON_PRIVILEGE_WITHDRAWN',
     'GNUTLS_CRL_REASON_AA_COMPROMISE', or zero for all possible
     reasons.

     *Returns:* 'GNUTLS_E_SHORT_MEMORY_BUFFER' and updates &'ret_size'
     if &'ret_size' is not enough to hold the distribution point, or the
     type of the distribution point if everything was ok.  The type is
     one of the enumerated 'gnutls_x509_subject_alt_name_t'.  If the
     certificate does not have an Alternative name with the specified
     sequence number then 'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' is
     returned.

gnutls_x509_crt_get_dn_by_oid
-----------------------------

 -- Function: int gnutls_x509_crt_get_dn_by_oid (gnutls_x509_crt_t CERT,
          const char * OID, int INDX, unsigned int RAW_FLAG, void * BUF,
          size_t * SIZEOF_BUF)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     OID: holds an Object Identified in null terminated string

     INDX: In case multiple same OIDs exist in the RDN, this specifies
     which to send.  Use zero to get the first one.

     RAW_FLAG: If non zero returns the raw DER data of the DN part.

     BUF: a pointer where the DN part will be copied (may be null).

     SIZEOF_BUF: initially holds the size of 'buf'

     This function will extract the part of the name of the Certificate
     subject specified by the given OID. The output, if the raw flag is
     not used, will be encoded as described in RFC2253.  Thus a string
     that is ASCII or UTF-8 encoded, depending on the certificate data.

     Some helper macros with popular OIDs can be found in gnutls/x509.h
     If raw flag is zero, this function will only return known OIDs as
     text.  Other OIDs will be DER encoded, as described in RFC2253 - in
     hex format with a '\#' prefix.  You can check about known OIDs
     using 'gnutls_x509_dn_oid_known()'.

     If 'buf' is null then only the size will be filled.

     *Returns:* 'GNUTLS_E_SHORT_MEMORY_BUFFER' if the provided buffer is
     not long enough, and in that case the *sizeof_buf will be updated
     with the required size.  On success 0 is returned.

gnutls_x509_crt_get_dn_oid
--------------------------

 -- Function: int gnutls_x509_crt_get_dn_oid (gnutls_x509_crt_t CERT,
          int INDX, void * OID, size_t * SIZEOF_OID)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     INDX: This specifies which OID to return.  Use zero to get the
     first one.

     OID: a pointer to a buffer to hold the OID (may be null)

     SIZEOF_OID: initially holds the size of 'oid'

     This function will extract the OIDs of the name of the Certificate
     subject specified by the given index.

     If oid is null then only the size will be filled.

     *Returns:* 'GNUTLS_E_SHORT_MEMORY_BUFFER' if the provided buffer is
     not long enough, and in that case the *sizeof_oid will be updated
     with the required size.  On success 0 is returned.

gnutls_x509_crt_get_dn
----------------------

 -- Function: int gnutls_x509_crt_get_dn (gnutls_x509_crt_t CERT, char *
          BUF, size_t * SIZEOF_BUF)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     BUF: a pointer to a structure to hold the name (may be null)

     SIZEOF_BUF: initially holds the size of 'buf'

     This function will copy the name of the Certificate in the provided
     buffer.  The name will be in the form "C=xxxx,O=yyyy,CN=zzzz" as
     described in RFC2253.  The output string will be ASCII or UTF-8
     encoded, depending on the certificate data.

     If 'buf' is null then only the size will be filled.

     *Returns:* 'GNUTLS_E_SHORT_MEMORY_BUFFER' if the provided buffer is
     not long enough, and in that case the *sizeof_buf will be updated
     with the required size.  On success 0 is returned.

gnutls_x509_crt_get_expiration_time
-----------------------------------

 -- Function: time_t gnutls_x509_crt_get_expiration_time
          (gnutls_x509_crt_t CERT)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     This function will return the time this Certificate was or will be
     expired.

     *Returns:* expiration time, or (time_t)-1 on error.

gnutls_x509_crt_get_extension_by_oid
------------------------------------

 -- Function: int gnutls_x509_crt_get_extension_by_oid
          (gnutls_x509_crt_t CERT, const char * OID, int INDX, void *
          BUF, size_t * SIZEOF_BUF, unsigned int * CRITICAL)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     OID: holds an Object Identified in null terminated string

     INDX: In case multiple same OIDs exist in the extensions, this
     specifies which to send.  Use zero to get the first one.

     BUF: a pointer to a structure to hold the name (may be null)

     SIZEOF_BUF: initially holds the size of 'buf'

     CRITICAL: will be non zero if the extension is marked as critical

     This function will return the extension specified by the OID in the
     certificate.  The extensions will be returned as binary data DER
     encoded, in the provided buffer.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (zero) is returned,
     otherwise an error code is returned.  If the certificate does not
     contain the specified extension
     GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE will be returned.

gnutls_x509_crt_get_extension_data
----------------------------------

 -- Function: int gnutls_x509_crt_get_extension_data (gnutls_x509_crt_t
          CERT, int INDX, void * DATA, size_t * SIZEOF_DATA)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     INDX: Specifies which extension OID to send.  Use zero to get the
     first one.

     DATA: a pointer to a structure to hold the data (may be null)

     SIZEOF_DATA: initially holds the size of 'oid'

     This function will return the requested extension data in the
     certificate.  The extension data will be stored as a string in the
     provided buffer.

     Use 'gnutls_x509_crt_get_extension_info()' to extract the OID and
     critical flag.  Use 'gnutls_x509_crt_get_extension_by_oid()'
     instead, if you want to get data indexed by the extension OID
     rather than sequence.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (zero) is returned,
     otherwise an error code is returned.  If you have reached the last
     extension available 'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be
     returned.

gnutls_x509_crt_get_extension_info
----------------------------------

 -- Function: int gnutls_x509_crt_get_extension_info (gnutls_x509_crt_t
          CERT, int INDX, void * OID, size_t * SIZEOF_OID, int *
          CRITICAL)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     INDX: Specifies which extension OID to send.  Use zero to get the
     first one.

     OID: a pointer to a structure to hold the OID

     SIZEOF_OID: initially holds the maximum size of 'oid', on return
     holds actual size of 'oid'.

     CRITICAL: output variable with critical flag, may be NULL.

     This function will return the requested extension OID in the
     certificate, and the critical flag for it.  The extension OID will
     be stored as a string in the provided buffer.  Use
     'gnutls_x509_crt_get_extension_data()' to extract the data.

     If the buffer provided is not long enough to hold the output, then
     *'sizeof_oid' is updated and 'GNUTLS_E_SHORT_MEMORY_BUFFER' will be
     returned.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (zero) is returned,
     otherwise an error code is returned.  If you have reached the last
     extension available 'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be
     returned.

gnutls_x509_crt_get_extension_oid
---------------------------------

 -- Function: int gnutls_x509_crt_get_extension_oid (gnutls_x509_crt_t
          CERT, int INDX, void * OID, size_t * SIZEOF_OID)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     INDX: Specifies which extension OID to send.  Use zero to get the
     first one.

     OID: a pointer to a structure to hold the OID (may be null)

     SIZEOF_OID: initially holds the size of 'oid'

     This function will return the requested extension OID in the
     certificate.  The extension OID will be stored as a string in the
     provided buffer.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (zero) is returned,
     otherwise an error code is returned.  If you have reached the last
     extension available 'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be
     returned.

gnutls_x509_crt_get_fingerprint
-------------------------------

 -- Function: int gnutls_x509_crt_get_fingerprint (gnutls_x509_crt_t
          CERT, gnutls_digest_algorithm_t ALGO, void * BUF, size_t *
          SIZEOF_BUF)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     ALGO: is a digest algorithm

     BUF: a pointer to a structure to hold the fingerprint (may be null)

     SIZEOF_BUF: initially holds the size of 'buf'

     This function will calculate and copy the certificate's fingerprint
     in the provided buffer.

     If the buffer is null then only the size will be filled.

     *Returns:* 'GNUTLS_E_SHORT_MEMORY_BUFFER' if the provided buffer is
     not long enough, and in that case the *sizeof_buf will be updated
     with the required size.  On success 0 is returned.

gnutls_x509_crt_get_issuer_alt_name2
------------------------------------

 -- Function: int gnutls_x509_crt_get_issuer_alt_name2
          (gnutls_x509_crt_t CERT, unsigned int SEQ, void * RET, size_t
          * RET_SIZE, unsigned int * RET_TYPE, unsigned int * CRITICAL)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     SEQ: specifies the sequence number of the alt name (0 for the first
     one, 1 for the second etc.)

     RET: is the place where the alternative name will be copied to

     RET_SIZE: holds the size of ret.

     RET_TYPE: holds the type of the alternative name (one of
     gnutls_x509_subject_alt_name_t).

     CRITICAL: will be non zero if the extension is marked as critical
     (may be null)

     This function will return the alternative names, contained in the
     given certificate.  It is the same as
     'gnutls_x509_crt_get_issuer_alt_name()' except for the fact that it
     will return the type of the alternative name in 'ret_type' even if
     the function fails for some reason (i.e.  the buffer provided is
     not enough).

     *Returns:* the alternative issuer name type on success, one of the
     enumerated 'gnutls_x509_subject_alt_name_t'.  It will return
     'GNUTLS_E_SHORT_MEMORY_BUFFER' if 'ret_size' is not large enough to
     hold the value.  In that case 'ret_size' will be updated with the
     required size.  If the certificate does not have an Alternative
     name with the specified sequence number then
     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' is returned.

     *Since:* 2.10.0

gnutls_x509_crt_get_issuer_alt_name
-----------------------------------

 -- Function: int gnutls_x509_crt_get_issuer_alt_name (gnutls_x509_crt_t
          CERT, unsigned int SEQ, void * RET, size_t * RET_SIZE,
          unsigned int * CRITICAL)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     SEQ: specifies the sequence number of the alt name (0 for the first
     one, 1 for the second etc.)

     RET: is the place where the alternative name will be copied to

     RET_SIZE: holds the size of ret.

     CRITICAL: will be non zero if the extension is marked as critical
     (may be null)

     This function retrieves the Issuer Alternative Name (2.5.29.18),
     contained in the given certificate in the X509v3 Certificate
     Extensions.

     When the SAN type is otherName, it will extract the data in the
     otherName's value field, and 'GNUTLS_SAN_OTHERNAME' is returned.
     You may use 'gnutls_x509_crt_get_subject_alt_othername_oid()' to
     get the corresponding OID and the "virtual" SAN types (e.g.,
     'GNUTLS_SAN_OTHERNAME_XMPP').

     If an otherName OID is known, the data will be decoded.  Otherwise
     the returned data will be DER encoded, and you will have to decode
     it yourself.  Currently, only the RFC 3920 id-on-xmppAddr Issuer
     AltName is recognized.

     *Returns:* the alternative issuer name type on success, one of the
     enumerated 'gnutls_x509_subject_alt_name_t'.  It will return
     'GNUTLS_E_SHORT_MEMORY_BUFFER' if 'ret_size' is not large enough to
     hold the value.  In that case 'ret_size' will be updated with the
     required size.  If the certificate does not have an Alternative
     name with the specified sequence number then
     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' is returned.

     *Since:* 2.10.0

gnutls_x509_crt_get_issuer_alt_othername_oid
--------------------------------------------

 -- Function: int gnutls_x509_crt_get_issuer_alt_othername_oid
          (gnutls_x509_crt_t CERT, unsigned int SEQ, void * RET, size_t
          * RET_SIZE)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     SEQ: specifies the sequence number of the alt name (0 for the first
     one, 1 for the second etc.)

     RET: is the place where the otherName OID will be copied to

     RET_SIZE: holds the size of ret.

     This function will extract the type OID of an otherName Subject
     Alternative Name, contained in the given certificate, and return
     the type as an enumerated element.

     This function is only useful if
     'gnutls_x509_crt_get_issuer_alt_name()' returned
     'GNUTLS_SAN_OTHERNAME'.

     *Returns:* the alternative issuer name type on success, one of the
     enumerated gnutls_x509_subject_alt_name_t.  For supported OIDs, it
     will return one of the virtual (GNUTLS_SAN_OTHERNAME_*) types, e.g.
     'GNUTLS_SAN_OTHERNAME_XMPP', and 'GNUTLS_SAN_OTHERNAME' for unknown
     OIDs.  It will return 'GNUTLS_E_SHORT_MEMORY_BUFFER' if 'ret_size'
     is not large enough to hold the value.  In that case 'ret_size'
     will be updated with the required size.  If the certificate does
     not have an Alternative name with the specified sequence number and
     with the otherName type then
     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' is returned.

     *Since:* 2.10.0

gnutls_x509_crt_get_issuer_dn_by_oid
------------------------------------

 -- Function: int gnutls_x509_crt_get_issuer_dn_by_oid
          (gnutls_x509_crt_t CERT, const char * OID, int INDX, unsigned
          int RAW_FLAG, void * BUF, size_t * SIZEOF_BUF)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     OID: holds an Object Identified in null terminated string

     INDX: In case multiple same OIDs exist in the RDN, this specifies
     which to send.  Use zero to get the first one.

     RAW_FLAG: If non zero returns the raw DER data of the DN part.

     BUF: a pointer to a structure to hold the name (may be null)

     SIZEOF_BUF: initially holds the size of 'buf'

     This function will extract the part of the name of the Certificate
     issuer specified by the given OID. The output, if the raw flag is
     not used, will be encoded as described in RFC2253.  Thus a string
     that is ASCII or UTF-8 encoded, depending on the certificate data.

     Some helper macros with popular OIDs can be found in gnutls/x509.h
     If raw flag is zero, this function will only return known OIDs as
     text.  Other OIDs will be DER encoded, as described in RFC2253 - in
     hex format with a '\#' prefix.  You can check about known OIDs
     using 'gnutls_x509_dn_oid_known()'.

     If 'buf' is null then only the size will be filled.

     *Returns:* GNUTLS_E_SHORT_MEMORY_BUFFER if the provided buffer is
     not long enough, and in that case the *sizeof_buf will be updated
     with the required size.  On success 0 is returned.

gnutls_x509_crt_get_issuer_dn_oid
---------------------------------

 -- Function: int gnutls_x509_crt_get_issuer_dn_oid (gnutls_x509_crt_t
          CERT, int INDX, void * OID, size_t * SIZEOF_OID)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     INDX: This specifies which OID to return.  Use zero to get the
     first one.

     OID: a pointer to a buffer to hold the OID (may be null)

     SIZEOF_OID: initially holds the size of 'oid'

     This function will extract the OIDs of the name of the Certificate
     issuer specified by the given index.

     If 'oid' is null then only the size will be filled.

     *Returns:* GNUTLS_E_SHORT_MEMORY_BUFFER if the provided buffer is
     not long enough, and in that case the *sizeof_oid will be updated
     with the required size.  On success 0 is returned.

gnutls_x509_crt_get_issuer_dn
-----------------------------

 -- Function: int gnutls_x509_crt_get_issuer_dn (gnutls_x509_crt_t CERT,
          char * BUF, size_t * SIZEOF_BUF)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     BUF: a pointer to a structure to hold the name (may be null)

     SIZEOF_BUF: initially holds the size of 'buf'

     This function will copy the name of the Certificate issuer in the
     provided buffer.  The name will be in the form
     "C=xxxx,O=yyyy,CN=zzzz" as described in RFC2253.  The output string
     will be ASCII or UTF-8 encoded, depending on the certificate data.

     If 'buf' is null then only the size will be filled.

     *Returns:* GNUTLS_E_SHORT_MEMORY_BUFFER if the provided buffer is
     not long enough, and in that case the *sizeof_buf will be updated
     with the required size.  On success 0 is returned.

gnutls_x509_crt_get_issuer_unique_id
------------------------------------

 -- Function: int gnutls_x509_crt_get_issuer_unique_id
          (gnutls_x509_crt_t CRT, char * BUF, size_t * SIZEOF_BUF)
     CRT: Holds the certificate

     BUF: user allocated memory buffer, will hold the unique id

     SIZEOF_BUF: size of user allocated memory buffer (on input), will
     hold actual size of the unique ID on return.

     This function will extract the issuerUniqueID value (if present)
     for the given certificate.

     If the user allocated memory buffer is not large enough to hold the
     full subjectUniqueID, then a GNUTLS_E_SHORT_MEMORY_BUFFER error
     will be returned, and sizeof_buf will be set to the actual length.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise an error.

gnutls_x509_crt_get_issuer
--------------------------

 -- Function: int gnutls_x509_crt_get_issuer (gnutls_x509_crt_t CERT,
          gnutls_x509_dn_t * DN)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     DN: output variable with pointer to opaque DN

     Return the Certificate's Issuer DN as an opaque data type.  You may
     use 'gnutls_x509_dn_get_rdn_ava()' to decode the DN.

     Note that 'dn' should be treated as constant.  Because points into
     the 'cert' object, you may not deallocate 'cert' and continue to
     access 'dn'.

     *Returns:* Returns 0 on success, or an error code.

gnutls_x509_crt_get_key_id
--------------------------

 -- Function: int gnutls_x509_crt_get_key_id (gnutls_x509_crt_t CRT,
          unsigned int FLAGS, unsigned char * OUTPUT_DATA, size_t *
          OUTPUT_DATA_SIZE)
     CRT: Holds the certificate

     FLAGS: should be 0 for now

     OUTPUT_DATA: will contain the key ID

     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
     replaced by the actual size of parameters)

     This function will return a unique ID the depends on the public key
     parameters.  This ID can be used in checking whether a certificate
     corresponds to the given private key.

     If the buffer provided is not long enough to hold the output, then
     *output_data_size is updated and GNUTLS_E_SHORT_MEMORY_BUFFER will
     be returned.  The output will normally be a SHA-1 hash output,
     which is 20 bytes.

     *Return value:* In case of failure a negative value will be
     returned, and 0 on success.

gnutls_x509_crt_get_key_purpose_oid
-----------------------------------

 -- Function: int gnutls_x509_crt_get_key_purpose_oid (gnutls_x509_crt_t
          CERT, int INDX, void * OID, size_t * SIZEOF_OID, unsigned int
          * CRITICAL)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     INDX: This specifies which OID to return.  Use zero to get the
     first one.

     OID: a pointer to a buffer to hold the OID (may be null)

     SIZEOF_OID: initially holds the size of 'oid'

     CRITICAL: output flag to indicate criticality of extension

     This function will extract the key purpose OIDs of the Certificate
     specified by the given index.  These are stored in the Extended Key
     Usage extension (2.5.29.37) See the GNUTLS_KP_* definitions for
     human readable names.

     If 'oid' is null then only the size will be filled.

     *Returns:* 'GNUTLS_E_SHORT_MEMORY_BUFFER' if the provided buffer is
     not long enough, and in that case the *sizeof_oid will be updated
     with the required size.  On success 0 is returned.

gnutls_x509_crt_get_key_usage
-----------------------------

 -- Function: int gnutls_x509_crt_get_key_usage (gnutls_x509_crt_t CERT,
          unsigned int * KEY_USAGE, unsigned int * CRITICAL)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     KEY_USAGE: where the key usage bits will be stored

     CRITICAL: will be non zero if the extension is marked as critical

     This function will return certificate's key usage, by reading the
     keyUsage X.509 extension (2.5.29.15).  The key usage value will
     ORed values of the: 'GNUTLS_KEY_DIGITAL_SIGNATURE',
     'GNUTLS_KEY_NON_REPUDIATION', 'GNUTLS_KEY_KEY_ENCIPHERMENT',
     'GNUTLS_KEY_DATA_ENCIPHERMENT', 'GNUTLS_KEY_KEY_AGREEMENT',
     'GNUTLS_KEY_KEY_CERT_SIGN', 'GNUTLS_KEY_CRL_SIGN',
     'GNUTLS_KEY_ENCIPHER_ONLY', 'GNUTLS_KEY_DECIPHER_ONLY'.

     *Returns:* the certificate key usage, or a negative value in case
     of parsing error.  If the certificate does not contain the keyUsage
     extension 'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.

gnutls_x509_crt_get_pk_algorithm
--------------------------------

 -- Function: int gnutls_x509_crt_get_pk_algorithm (gnutls_x509_crt_t
          CERT, unsigned int * BITS)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     BITS: if bits is non null it will hold the size of the parameters'
     in bits

     This function will return the public key algorithm of an X.509
     certificate.

     If bits is non null, it should have enough size to hold the
     parameters size in bits.  For RSA the bits returned is the modulus.
     For DSA the bits returned are of the public exponent.

     *Returns:* a member of the 'gnutls_pk_algorithm_t' enumeration on
     success, or a negative value on error.

gnutls_x509_crt_get_pk_dsa_raw
------------------------------

 -- Function: int gnutls_x509_crt_get_pk_dsa_raw (gnutls_x509_crt_t CRT,
          gnutls_datum_t * P, gnutls_datum_t * Q, gnutls_datum_t * G,
          gnutls_datum_t * Y)
     CRT: Holds the certificate

     P: will hold the p

     Q: will hold the q

     G: will hold the g

     Y: will hold the y

     This function will export the DSA public key's parameters found in
     the given certificate.  The new parameters will be allocated using
     'gnutls_malloc()' and will be stored in the appropriate datum.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise an error.

gnutls_x509_crt_get_pk_rsa_raw
------------------------------

 -- Function: int gnutls_x509_crt_get_pk_rsa_raw (gnutls_x509_crt_t CRT,
          gnutls_datum_t * M, gnutls_datum_t * E)
     CRT: Holds the certificate

     M: will hold the modulus

     E: will hold the public exponent

     This function will export the RSA public key's parameters found in
     the given structure.  The new parameters will be allocated using
     'gnutls_malloc()' and will be stored in the appropriate datum.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise an error.

gnutls_x509_crt_get_preferred_hash_algorithm
--------------------------------------------

 -- Function: int gnutls_x509_crt_get_preferred_hash_algorithm
          (gnutls_x509_crt_t CRT, gnutls_digest_algorithm_t * HASH,
          unsigned int * MAND)
     CRT: Holds the certificate

     HASH: The result of the call with the hash algorithm used for
     signature

     MAND: If non zero it means that the algorithm MUST use this hash.
     May be NULL.

     This function will read the certifcate and return the appropriate
     digest algorithm to use for signing with this certificate.  Some
     certificates (i.e.  DSA might not be able to sign without the
     preferred algorithm).

     *Deprecated:* Please use
     'gnutls_pubkey_get_preferred_hash_algorithm()'.

     *Returns:* the 0 if the hash algorithm is found.  A negative value
     is returned on error.

     *Since:* 2.11.0

gnutls_x509_crt_get_proxy
-------------------------

 -- Function: int gnutls_x509_crt_get_proxy (gnutls_x509_crt_t CERT,
          unsigned int * CRITICAL, int * PATHLEN, char **
          POLICYLANGUAGE, char ** POLICY, size_t * SIZEOF_POLICY)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     CRITICAL: will be non zero if the extension is marked as critical

     PATHLEN: pointer to output integer indicating path length (may be
     NULL), non-negative values indicate a present pCPathLenConstraint
     field and the actual value, -1 indicate that the field is absent.

     POLICYLANGUAGE: output variable with OID of policy language

     POLICY: output variable with policy data

     SIZEOF_POLICY: output variable size of policy data

     This function will get information from a proxy certificate.  It
     reads the ProxyCertInfo X.509 extension (1.3.6.1.5.5.7.1.14).

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (zero) is returned,
     otherwise an error code is returned.

gnutls_x509_crt_get_raw_dn
--------------------------

 -- Function: int gnutls_x509_crt_get_raw_dn (gnutls_x509_crt_t CERT,
          gnutls_datum_t * START)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     START: will hold the starting point of the DN

     This function will return a pointer to the DER encoded DN structure
     and the length.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.  or a negative value on error.

gnutls_x509_crt_get_raw_issuer_dn
---------------------------------

 -- Function: int gnutls_x509_crt_get_raw_issuer_dn (gnutls_x509_crt_t
          CERT, gnutls_datum_t * START)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     START: will hold the starting point of the DN

     This function will return a pointer to the DER encoded DN structure
     and the length.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.or a negative value on error.

gnutls_x509_crt_get_serial
--------------------------

 -- Function: int gnutls_x509_crt_get_serial (gnutls_x509_crt_t CERT,
          void * RESULT, size_t * RESULT_SIZE)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     RESULT: The place where the serial number will be copied

     RESULT_SIZE: Holds the size of the result field.

     This function will return the X.509 certificate's serial number.
     This is obtained by the X509 Certificate serialNumber field.
     Serial is not always a 32 or 64bit number.  Some CAs use large
     serial numbers, thus it may be wise to handle it as something
     opaque.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crt_get_signature_algorithm
---------------------------------------

 -- Function: int gnutls_x509_crt_get_signature_algorithm
          (gnutls_x509_crt_t CERT)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     This function will return a value of the 'gnutls_sign_algorithm_t'
     enumeration that is the signature algorithm that has been used to
     sign this certificate.

     *Returns:* a 'gnutls_sign_algorithm_t' value, or a negative value
     on error.

gnutls_x509_crt_get_signature
-----------------------------

 -- Function: int gnutls_x509_crt_get_signature (gnutls_x509_crt_t CERT,
          char * SIG, size_t * SIZEOF_SIG)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     SIG: a pointer where the signature part will be copied (may be
     null).

     SIZEOF_SIG: initially holds the size of 'sig'

     This function will extract the signature field of a certificate.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.  and a negative value on error.

gnutls_x509_crt_get_subject_alt_name2
-------------------------------------

 -- Function: int gnutls_x509_crt_get_subject_alt_name2
          (gnutls_x509_crt_t CERT, unsigned int SEQ, void * RET, size_t
          * RET_SIZE, unsigned int * RET_TYPE, unsigned int * CRITICAL)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     SEQ: specifies the sequence number of the alt name (0 for the first
     one, 1 for the second etc.)

     RET: is the place where the alternative name will be copied to

     RET_SIZE: holds the size of ret.

     RET_TYPE: holds the type of the alternative name (one of
     gnutls_x509_subject_alt_name_t).

     CRITICAL: will be non zero if the extension is marked as critical
     (may be null)

     This function will return the alternative names, contained in the
     given certificate.  It is the same as
     'gnutls_x509_crt_get_subject_alt_name()' except for the fact that
     it will return the type of the alternative name in 'ret_type' even
     if the function fails for some reason (i.e.  the buffer provided is
     not enough).

     *Returns:* the alternative subject name type on success, one of the
     enumerated 'gnutls_x509_subject_alt_name_t'.  It will return
     'GNUTLS_E_SHORT_MEMORY_BUFFER' if 'ret_size' is not large enough to
     hold the value.  In that case 'ret_size' will be updated with the
     required size.  If the certificate does not have an Alternative
     name with the specified sequence number then
     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' is returned.

gnutls_x509_crt_get_subject_alt_name
------------------------------------

 -- Function: int gnutls_x509_crt_get_subject_alt_name
          (gnutls_x509_crt_t CERT, unsigned int SEQ, void * RET, size_t
          * RET_SIZE, unsigned int * CRITICAL)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     SEQ: specifies the sequence number of the alt name (0 for the first
     one, 1 for the second etc.)

     RET: is the place where the alternative name will be copied to

     RET_SIZE: holds the size of ret.

     CRITICAL: will be non zero if the extension is marked as critical
     (may be null)

     This function retrieves the Alternative Name (2.5.29.17), contained
     in the given certificate in the X509v3 Certificate Extensions.

     When the SAN type is otherName, it will extract the data in the
     otherName's value field, and 'GNUTLS_SAN_OTHERNAME' is returned.
     You may use 'gnutls_x509_crt_get_subject_alt_othername_oid()' to
     get the corresponding OID and the "virtual" SAN types (e.g.,
     'GNUTLS_SAN_OTHERNAME_XMPP').

     If an otherName OID is known, the data will be decoded.  Otherwise
     the returned data will be DER encoded, and you will have to decode
     it yourself.  Currently, only the RFC 3920 id-on-xmppAddr SAN is
     recognized.

     *Returns:* the alternative subject name type on success, one of the
     enumerated 'gnutls_x509_subject_alt_name_t'.  It will return
     'GNUTLS_E_SHORT_MEMORY_BUFFER' if 'ret_size' is not large enough to
     hold the value.  In that case 'ret_size' will be updated with the
     required size.  If the certificate does not have an Alternative
     name with the specified sequence number then
     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' is returned.

gnutls_x509_crt_get_subject_alt_othername_oid
---------------------------------------------

 -- Function: int gnutls_x509_crt_get_subject_alt_othername_oid
          (gnutls_x509_crt_t CERT, unsigned int SEQ, void * RET, size_t
          * RET_SIZE)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     SEQ: specifies the sequence number of the alt name (0 for the first
     one, 1 for the second etc.)

     RET: is the place where the otherName OID will be copied to

     RET_SIZE: holds the size of ret.

     This function will extract the type OID of an otherName Subject
     Alternative Name, contained in the given certificate, and return
     the type as an enumerated element.

     This function is only useful if
     'gnutls_x509_crt_get_subject_alt_name()' returned
     'GNUTLS_SAN_OTHERNAME'.

     *Returns:* the alternative subject name type on success, one of the
     enumerated gnutls_x509_subject_alt_name_t.  For supported OIDs, it
     will return one of the virtual (GNUTLS_SAN_OTHERNAME_*) types, e.g.
     'GNUTLS_SAN_OTHERNAME_XMPP', and 'GNUTLS_SAN_OTHERNAME' for unknown
     OIDs.  It will return 'GNUTLS_E_SHORT_MEMORY_BUFFER' if 'ret_size'
     is not large enough to hold the value.  In that case 'ret_size'
     will be updated with the required size.  If the certificate does
     not have an Alternative name with the specified sequence number and
     with the otherName type then
     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' is returned.

gnutls_x509_crt_get_subject_key_id
----------------------------------

 -- Function: int gnutls_x509_crt_get_subject_key_id (gnutls_x509_crt_t
          CERT, void * RET, size_t * RET_SIZE, unsigned int * CRITICAL)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     RET: The place where the identifier will be copied

     RET_SIZE: Holds the size of the result field.

     CRITICAL: will be non zero if the extension is marked as critical
     (may be null)

     This function will return the X.509v3 certificate's subject key
     identifier.  This is obtained by the X.509 Subject Key identifier
     extension field (2.5.29.14).

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crt_get_subject_unique_id
-------------------------------------

 -- Function: int gnutls_x509_crt_get_subject_unique_id
          (gnutls_x509_crt_t CRT, char * BUF, size_t * SIZEOF_BUF)
     CRT: Holds the certificate

     BUF: user allocated memory buffer, will hold the unique id

     SIZEOF_BUF: size of user allocated memory buffer (on input), will
     hold actual size of the unique ID on return.

     This function will extract the subjectUniqueID value (if present)
     for the given certificate.

     If the user allocated memory buffer is not large enough to hold the
     full subjectUniqueID, then a GNUTLS_E_SHORT_MEMORY_BUFFER error
     will be returned, and sizeof_buf will be set to the actual length.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise an error.

gnutls_x509_crt_get_subject
---------------------------

 -- Function: int gnutls_x509_crt_get_subject (gnutls_x509_crt_t CERT,
          gnutls_x509_dn_t * DN)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     DN: output variable with pointer to opaque DN.

     Return the Certificate's Subject DN as an opaque data type.  You
     may use 'gnutls_x509_dn_get_rdn_ava()' to decode the DN.

     Note that 'dn' should be treated as constant.  Because points into
     the 'cert' object, you may not deallocate 'cert' and continue to
     access 'dn'.

     *Returns:* Returns 0 on success, or an error code.

gnutls_x509_crt_get_verify_algorithm
------------------------------------

 -- Function: int gnutls_x509_crt_get_verify_algorithm
          (gnutls_x509_crt_t CRT, const gnutls_datum_t * SIGNATURE,
          gnutls_digest_algorithm_t * HASH)
     CRT: Holds the certificate

     SIGNATURE: contains the signature

     HASH: The result of the call with the hash algorithm used for
     signature

     This function will read the certifcate and the signed data to
     determine the hash algorithm used to generate the signature.

     *Deprecated:* Use 'gnutls_pubkey_get_verify_algorithm()' instead.

     *Returns:* the 0 if the hash algorithm is found.  A negative value
     is returned on error.

     *Since:* 2.8.0

gnutls_x509_crt_get_version
---------------------------

 -- Function: int gnutls_x509_crt_get_version (gnutls_x509_crt_t CERT)
     CERT: should contain a 'gnutls_x509_crt_t' structure

     This function will return the version of the specified Certificate.

     *Returns:* version of certificate, or a negative value on error.

gnutls_x509_crt_import
----------------------

 -- Function: int gnutls_x509_crt_import (gnutls_x509_crt_t CERT, const
          gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FORMAT)
     CERT: The structure to store the parsed certificate.

     DATA: The DER or PEM encoded certificate.

     FORMAT: One of DER or PEM

     This function will convert the given DER or PEM encoded Certificate
     to the native gnutls_x509_crt_t format.  The output will be stored
     in 'cert'.

     If the Certificate is PEM encoded it should have a header of "X509
     CERTIFICATE", or "CERTIFICATE".

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crt_init
--------------------

 -- Function: int gnutls_x509_crt_init (gnutls_x509_crt_t * CERT)
     CERT: The structure to be initialized

     This function will initialize an X.509 certificate structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crt_list_import
---------------------------

 -- Function: int gnutls_x509_crt_list_import (gnutls_x509_crt_t *
          CERTS, unsigned int * CERT_MAX, const gnutls_datum_t * DATA,
          gnutls_x509_crt_fmt_t FORMAT, unsigned int FLAGS)
     CERTS: The structures to store the parsed certificate.  Must not be
     initialized.

     CERT_MAX: Initially must hold the maximum number of certs.  It will
     be updated with the number of certs available.

     DATA: The PEM encoded certificate.

     FORMAT: One of DER or PEM.

     FLAGS: must be zero or an OR'd sequence of
     gnutls_certificate_import_flags.

     This function will convert the given PEM encoded certificate list
     to the native gnutls_x509_crt_t format.  The output will be stored
     in 'certs'.  They will be automatically initialized.

     The flag 'GNUTLS_X509_CRT_LIST_IMPORT_FAIL_IF_EXCEED' will cause
     import to fail if the certificates in the provided buffer are more
     than the available structures.  The
     'GNUTLS_X509_CRT_LIST_FAIL_IF_UNSORTED' flag will cause the
     function to fail if the provided list is not sorted from subject to
     issuer.

     If the Certificate is PEM encoded it should have a header of "X509
     CERTIFICATE", or "CERTIFICATE".

     *Returns:* the number of certificates read or a negative error
     value.

gnutls_x509_crt_list_verify
---------------------------

 -- Function: int gnutls_x509_crt_list_verify (const gnutls_x509_crt_t *
          CERT_LIST, int CERT_LIST_LENGTH, const gnutls_x509_crt_t *
          CA_LIST, int CA_LIST_LENGTH, const gnutls_x509_crl_t *
          CRL_LIST, int CRL_LIST_LENGTH, unsigned int FLAGS, unsigned
          int * VERIFY)
     CERT_LIST: is the certificate list to be verified

     CERT_LIST_LENGTH: holds the number of certificate in cert_list

     CA_LIST: is the CA list which will be used in verification

     CA_LIST_LENGTH: holds the number of CA certificate in CA_list

     CRL_LIST: holds a list of CRLs.

     CRL_LIST_LENGTH: the length of CRL list.

     FLAGS: Flags that may be used to change the verification algorithm.
     Use OR of the gnutls_certificate_verify_flags enumerations.

     VERIFY: will hold the certificate verification output.

     This function will try to verify the given certificate list and
     return its status.  If no flags are specified (0), this function
     will use the basicConstraints (2.5.29.19) PKIX extension.  This
     means that only a certificate authority is allowed to sign a
     certificate.

     You must also check the peer's name in order to check if the
     verified certificate belongs to the actual peer.

     The certificate verification output will be put in 'verify' and
     will be one or more of the gnutls_certificate_status_t enumerated
     elements bitwise or'd.  For a more detailed verification status use
     'gnutls_x509_crt_verify()' per list element.

     *GNUTLS_CERT_INVALID:* the certificate chain is not valid.

     *GNUTLS_CERT_REVOKED:* a certificate in the chain has been revoked.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crt_print
---------------------

 -- Function: int gnutls_x509_crt_print (gnutls_x509_crt_t CERT,
          gnutls_certificate_print_formats_t FORMAT, gnutls_datum_t *
          OUT)
     CERT: The structure to be printed

     FORMAT: Indicate the format to use

     OUT: Newly allocated datum with zero terminated string.

     This function will pretty print a X.509 certificate, suitable for
     display to a human.

     If the format is 'GNUTLS_CRT_PRINT_FULL' then all fields of the
     certificate will be output, on multiple lines.  The
     'GNUTLS_CRT_PRINT_ONELINE' format will generate one line with some
     selected fields, which is useful for logging purposes.

     The output 'out' needs to be deallocate using 'gnutls_free()'.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crt_privkey_sign
----------------------------

 -- Function: int gnutls_x509_crt_privkey_sign (gnutls_x509_crt_t CRT,
          gnutls_x509_crt_t ISSUER, gnutls_privkey_t ISSUER_KEY,
          gnutls_digest_algorithm_t DIG, unsigned int FLAGS)
     CRT: a certificate of type 'gnutls_x509_crt_t'

     ISSUER: is the certificate of the certificate issuer

     ISSUER_KEY: holds the issuer's private key

     DIG: The message digest to use, 'GNUTLS_DIG_SHA1' is a safe choice

     FLAGS: must be 0

     This function will sign the certificate with the issuer's private
     key, and will copy the issuer's information into the certificate.

     This must be the last step in a certificate generation since all
     the previously set parameters are now signed.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crt_set_activation_time
-----------------------------------

 -- Function: int gnutls_x509_crt_set_activation_time (gnutls_x509_crt_t
          CERT, time_t ACT_TIME)
     CERT: a certificate of type 'gnutls_x509_crt_t'

     ACT_TIME: The actual time

     This function will set the time this Certificate was or will be
     activated.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crt_set_authority_key_id
------------------------------------

 -- Function: int gnutls_x509_crt_set_authority_key_id
          (gnutls_x509_crt_t CERT, const void * ID, size_t ID_SIZE)
     CERT: a certificate of type 'gnutls_x509_crt_t'

     ID: The key ID

     ID_SIZE: Holds the size of the serial field.

     This function will set the X.509 certificate's authority key ID
     extension.  Only the keyIdentifier field can be set with this
     function.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crt_set_basic_constraints
-------------------------------------

 -- Function: int gnutls_x509_crt_set_basic_constraints
          (gnutls_x509_crt_t CRT, unsigned int CA, int
          PATHLENCONSTRAINT)
     CRT: a certificate of type 'gnutls_x509_crt_t'

     CA: true(1) or false(0).  Depending on the Certificate authority
     status.

     PATHLENCONSTRAINT: non-negative values indicate maximum length of
     path, and negative values indicate that the pathLenConstraints
     field should not be present.

     This function will set the basicConstraints certificate extension.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crt_set_ca_status
-----------------------------

 -- Function: int gnutls_x509_crt_set_ca_status (gnutls_x509_crt_t CRT,
          unsigned int CA)
     CRT: a certificate of type 'gnutls_x509_crt_t'

     CA: true(1) or false(0).  Depending on the Certificate authority
     status.

     This function will set the basicConstraints certificate extension.
     Use 'gnutls_x509_crt_set_basic_constraints()' if you want to
     control the pathLenConstraint field too.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crt_set_crl_dist_points2
------------------------------------

 -- Function: int gnutls_x509_crt_set_crl_dist_points2
          (gnutls_x509_crt_t CRT, gnutls_x509_subject_alt_name_t TYPE,
          const void * DATA, unsigned int DATA_SIZE, unsigned int
          REASON_FLAGS)
     CRT: a certificate of type 'gnutls_x509_crt_t'

     TYPE: is one of the gnutls_x509_subject_alt_name_t enumerations

     DATA: The data to be set

     DATA_SIZE: The data size

     REASON_FLAGS: revocation reasons

     This function will set the CRL distribution points certificate
     extension.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

     *Since:* 2.6.0

gnutls_x509_crt_set_crl_dist_points
-----------------------------------

 -- Function: int gnutls_x509_crt_set_crl_dist_points (gnutls_x509_crt_t
          CRT, gnutls_x509_subject_alt_name_t TYPE, const void *
          DATA_STRING, unsigned int REASON_FLAGS)
     CRT: a certificate of type 'gnutls_x509_crt_t'

     TYPE: is one of the gnutls_x509_subject_alt_name_t enumerations

     DATA_STRING: The data to be set

     REASON_FLAGS: revocation reasons

     This function will set the CRL distribution points certificate
     extension.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crt_set_crq_extensions
----------------------------------

 -- Function: int gnutls_x509_crt_set_crq_extensions (gnutls_x509_crt_t
          CRT, gnutls_x509_crq_t CRQ)
     CRT: a certificate of type 'gnutls_x509_crt_t'

     CRQ: holds a certificate request

     This function will set extensions from the given request to the
     certificate.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

     *Since:* 2.8.0

gnutls_x509_crt_set_crq
-----------------------

 -- Function: int gnutls_x509_crt_set_crq (gnutls_x509_crt_t CRT,
          gnutls_x509_crq_t CRQ)
     CRT: a certificate of type 'gnutls_x509_crt_t'

     CRQ: holds a certificate request

     This function will set the name and public parameters as well as
     the extensions from the given certificate request to the
     certificate.  Only RSA keys are currently supported.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crt_set_dn_by_oid
-----------------------------

 -- Function: int gnutls_x509_crt_set_dn_by_oid (gnutls_x509_crt_t CRT,
          const char * OID, unsigned int RAW_FLAG, const void * NAME,
          unsigned int SIZEOF_NAME)
     CRT: a certificate of type 'gnutls_x509_crt_t'

     OID: holds an Object Identifier in a null terminated string

     RAW_FLAG: must be 0, or 1 if the data are DER encoded

     NAME: a pointer to the name

     SIZEOF_NAME: holds the size of 'name'

     This function will set the part of the name of the Certificate
     subject, specified by the given OID. The input string should be
     ASCII or UTF-8 encoded.

     Some helper macros with popular OIDs can be found in gnutls/x509.h
     With this function you can only set the known OIDs.  You can test
     for known OIDs using 'gnutls_x509_dn_oid_known()'.  For OIDs that
     are not known (by gnutls) you should properly DER encode your data,
     and call this function with 'raw_flag' set.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crt_set_expiration_time
-----------------------------------

 -- Function: int gnutls_x509_crt_set_expiration_time (gnutls_x509_crt_t
          CERT, time_t EXP_TIME)
     CERT: a certificate of type 'gnutls_x509_crt_t'

     EXP_TIME: The actual time

     This function will set the time this Certificate will expire.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crt_set_extension_by_oid
------------------------------------

 -- Function: int gnutls_x509_crt_set_extension_by_oid
          (gnutls_x509_crt_t CRT, const char * OID, const void * BUF,
          size_t SIZEOF_BUF, unsigned int CRITICAL)
     CRT: a certificate of type 'gnutls_x509_crt_t'

     OID: holds an Object Identified in null terminated string

     BUF: a pointer to a DER encoded data

     SIZEOF_BUF: holds the size of 'buf'

     CRITICAL: should be non zero if the extension is to be marked as
     critical

     This function will set an the extension, by the specified OID, in
     the certificate.  The extension data should be binary data DER
     encoded.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crt_set_issuer_dn_by_oid
------------------------------------

 -- Function: int gnutls_x509_crt_set_issuer_dn_by_oid
          (gnutls_x509_crt_t CRT, const char * OID, unsigned int
          RAW_FLAG, const void * NAME, unsigned int SIZEOF_NAME)
     CRT: a certificate of type 'gnutls_x509_crt_t'

     OID: holds an Object Identifier in a null terminated string

     RAW_FLAG: must be 0, or 1 if the data are DER encoded

     NAME: a pointer to the name

     SIZEOF_NAME: holds the size of 'name'

     This function will set the part of the name of the Certificate
     issuer, specified by the given OID. The input string should be
     ASCII or UTF-8 encoded.

     Some helper macros with popular OIDs can be found in gnutls/x509.h
     With this function you can only set the known OIDs.  You can test
     for known OIDs using 'gnutls_x509_dn_oid_known()'.  For OIDs that
     are not known (by gnutls) you should properly DER encode your data,
     and call this function with 'raw_flag' set.

     Normally you do not need to call this function, since the signing
     operation will copy the signer's name as the issuer of the
     certificate.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crt_set_key_purpose_oid
-----------------------------------

 -- Function: int gnutls_x509_crt_set_key_purpose_oid (gnutls_x509_crt_t
          CERT, const void * OID, unsigned int CRITICAL)
     CERT: a certificate of type 'gnutls_x509_crt_t'

     OID: a pointer to a null terminated string that holds the OID

     CRITICAL: Whether this extension will be critical or not

     This function will set the key purpose OIDs of the Certificate.
     These are stored in the Extended Key Usage extension (2.5.29.37)
     See the GNUTLS_KP_* definitions for human readable names.

     Subsequent calls to this function will append OIDs to the OID list.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (zero) is returned,
     otherwise an error code is returned.

gnutls_x509_crt_set_key_usage
-----------------------------

 -- Function: int gnutls_x509_crt_set_key_usage (gnutls_x509_crt_t CRT,
          unsigned int USAGE)
     CRT: a certificate of type 'gnutls_x509_crt_t'

     USAGE: an ORed sequence of the GNUTLS_KEY_* elements.

     This function will set the keyUsage certificate extension.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crt_set_key
-----------------------

 -- Function: int gnutls_x509_crt_set_key (gnutls_x509_crt_t CRT,
          gnutls_x509_privkey_t KEY)
     CRT: a certificate of type 'gnutls_x509_crt_t'

     KEY: holds a private key

     This function will set the public parameters from the given private
     key to the certificate.  Only RSA keys are currently supported.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crt_set_proxy_dn
----------------------------

 -- Function: int gnutls_x509_crt_set_proxy_dn (gnutls_x509_crt_t CRT,
          gnutls_x509_crt_t EECRT, unsigned int RAW_FLAG, const void *
          NAME, unsigned int SIZEOF_NAME)
     CRT: a gnutls_x509_crt_t structure with the new proxy cert

     EECRT: the end entity certificate that will be issuing the proxy

     RAW_FLAG: must be 0, or 1 if the CN is DER encoded

     NAME: a pointer to the CN name, may be NULL (but MUST then be added
     later)

     SIZEOF_NAME: holds the size of 'name'

     This function will set the subject in 'crt' to the end entity's
     'eecrt' subject name, and add a single Common Name component 'name'
     of size 'sizeof_name'.  This corresponds to the required proxy
     certificate naming style.  Note that if 'name' is 'NULL', you MUST
     set it later by using 'gnutls_x509_crt_set_dn_by_oid()' or similar.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crt_set_proxy
-------------------------

 -- Function: int gnutls_x509_crt_set_proxy (gnutls_x509_crt_t CRT, int
          PATHLENCONSTRAINT, const char * POLICYLANGUAGE, const char *
          POLICY, size_t SIZEOF_POLICY)
     CRT: a certificate of type 'gnutls_x509_crt_t'

     PATHLENCONSTRAINT: non-negative values indicate maximum length of
     path, and negative values indicate that the pathLenConstraints
     field should not be present.

     POLICYLANGUAGE: OID describing the language of 'policy'.

     POLICY: opaque byte array with policy language, can be 'NULL'

     SIZEOF_POLICY: size of 'policy'.

     This function will set the proxyCertInfo extension.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crt_set_serial
--------------------------

 -- Function: int gnutls_x509_crt_set_serial (gnutls_x509_crt_t CERT,
          const void * SERIAL, size_t SERIAL_SIZE)
     CERT: a certificate of type 'gnutls_x509_crt_t'

     SERIAL: The serial number

     SERIAL_SIZE: Holds the size of the serial field.

     This function will set the X.509 certificate's serial number.
     Serial is not always a 32 or 64bit number.  Some CAs use large
     serial numbers, thus it may be wise to handle it as something
     opaque.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crt_set_subject_alt_name
------------------------------------

 -- Function: int gnutls_x509_crt_set_subject_alt_name
          (gnutls_x509_crt_t CRT, gnutls_x509_subject_alt_name_t TYPE,
          const void * DATA, unsigned int DATA_SIZE, unsigned int FLAGS)
     CRT: a certificate of type 'gnutls_x509_crt_t'

     TYPE: is one of the gnutls_x509_subject_alt_name_t enumerations

     DATA: The data to be set

     DATA_SIZE: The size of data to be set

     FLAGS: GNUTLS_FSAN_SET to clear previous data or GNUTLS_FSAN_APPEND
     to append.

     This function will set the subject alternative name certificate
     extension.  It can set the following types:

     &GNUTLS_SAN_DNSNAME: as a text string

     &GNUTLS_SAN_RFC822NAME: as a text string

     &GNUTLS_SAN_URI: as a text string

     &GNUTLS_SAN_IPADDRESS: as a binary IP address (4 or 16 bytes)

     Other values can be set as binary values with the proper DER
     encoding.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

     *Since:* 2.6.0

gnutls_x509_crt_set_subject_alternative_name
--------------------------------------------

 -- Function: int gnutls_x509_crt_set_subject_alternative_name
          (gnutls_x509_crt_t CRT, gnutls_x509_subject_alt_name_t TYPE,
          const char * DATA_STRING)
     CRT: a certificate of type 'gnutls_x509_crt_t'

     TYPE: is one of the gnutls_x509_subject_alt_name_t enumerations

     DATA_STRING: The data to be set, a zero terminated string

     This function will set the subject alternative name certificate
     extension.  This function assumes that data can be expressed as a
     null terminated string.

     The name of the function is unfortunate since it is incosistent
     with 'gnutls_x509_crt_get_subject_alt_name()'.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crt_set_subject_key_id
----------------------------------

 -- Function: int gnutls_x509_crt_set_subject_key_id (gnutls_x509_crt_t
          CERT, const void * ID, size_t ID_SIZE)
     CERT: a certificate of type 'gnutls_x509_crt_t'

     ID: The key ID

     ID_SIZE: Holds the size of the serial field.

     This function will set the X.509 certificate's subject key ID
     extension.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crt_set_version
---------------------------

 -- Function: int gnutls_x509_crt_set_version (gnutls_x509_crt_t CRT,
          unsigned int VERSION)
     CRT: a certificate of type 'gnutls_x509_crt_t'

     VERSION: holds the version number.  For X.509v1 certificates must
     be 1.

     This function will set the version of the certificate.  This must
     be one for X.509 version 1, and so on.  Plain certificates without
     extensions must have version set to one.

     To create well-formed certificates, you must specify version 3 if
     you use any certificate extensions.  Extensions are created by
     functions such as 'gnutls_x509_crt_set_subject_alt_name()' or
     'gnutls_x509_crt_set_key_usage()'.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crt_sign2
---------------------

 -- Function: int gnutls_x509_crt_sign2 (gnutls_x509_crt_t CRT,
          gnutls_x509_crt_t ISSUER, gnutls_x509_privkey_t ISSUER_KEY,
          gnutls_digest_algorithm_t DIG, unsigned int FLAGS)
     CRT: a certificate of type 'gnutls_x509_crt_t'

     ISSUER: is the certificate of the certificate issuer

     ISSUER_KEY: holds the issuer's private key

     DIG: The message digest to use, 'GNUTLS_DIG_SHA1' is a safe choice

     FLAGS: must be 0

     This function will sign the certificate with the issuer's private
     key, and will copy the issuer's information into the certificate.

     This must be the last step in a certificate generation since all
     the previously set parameters are now signed.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crt_sign
--------------------

 -- Function: int gnutls_x509_crt_sign (gnutls_x509_crt_t CRT,
          gnutls_x509_crt_t ISSUER, gnutls_x509_privkey_t ISSUER_KEY)
     CRT: a certificate of type 'gnutls_x509_crt_t'

     ISSUER: is the certificate of the certificate issuer

     ISSUER_KEY: holds the issuer's private key

     This function is the same a 'gnutls_x509_crt_sign2()' with no
     flags, and SHA1 as the hash algorithm.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_crt_verify_data
---------------------------

 -- Function: int gnutls_x509_crt_verify_data (gnutls_x509_crt_t CRT,
          unsigned int FLAGS, const gnutls_datum_t * DATA, const
          gnutls_datum_t * SIGNATURE)
     CRT: Holds the certificate

     FLAGS: should be 0 for now

     DATA: holds the data to be signed

     SIGNATURE: contains the signature

     This function will verify the given signed data, using the
     parameters from the certificate.

     Deprecated.  Please use 'gnutls_pubkey_verify_data()'.

     *Returns:* In case of a verification failure
     'GNUTLS_E_PK_SIG_VERIFY_FAILED' is returned, and a positive code on
     success.

gnutls_x509_crt_verify_hash
---------------------------

 -- Function: int gnutls_x509_crt_verify_hash (gnutls_x509_crt_t CRT,
          unsigned int FLAGS, const gnutls_datum_t * HASH, const
          gnutls_datum_t * SIGNATURE)
     CRT: Holds the certificate

     FLAGS: should be 0 for now

     HASH: holds the hash digest to be verified

     SIGNATURE: contains the signature

     This function will verify the given signed digest, using the
     parameters from the certificate.

     Deprecated.  Please use 'gnutls_pubkey_verify_data()'.

     *Returns:* In case of a verification failure
     'GNUTLS_E_PK_SIG_VERIFY_FAILED' is returned, and a positive code on
     success.

gnutls_x509_crt_verify
----------------------

 -- Function: int gnutls_x509_crt_verify (gnutls_x509_crt_t CERT, const
          gnutls_x509_crt_t * CA_LIST, int CA_LIST_LENGTH, unsigned int
          FLAGS, unsigned int * VERIFY)
     CERT: is the certificate to be verified

     CA_LIST: is one certificate that is considered to be trusted one

     CA_LIST_LENGTH: holds the number of CA certificate in CA_list

     FLAGS: Flags that may be used to change the verification algorithm.
     Use OR of the gnutls_certificate_verify_flags enumerations.

     VERIFY: will hold the certificate verification output.

     This function will try to verify the given certificate and return
     its status.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_dn_deinit
---------------------

 -- Function: void gnutls_x509_dn_deinit (gnutls_x509_dn_t DN)
     DN: a DN opaque object pointer.

     This function deallocates the DN object as returned by
     'gnutls_x509_dn_import()'.

     *Since:* 2.4.0

gnutls_x509_dn_export
---------------------

 -- Function: int gnutls_x509_dn_export (gnutls_x509_dn_t DN,
          gnutls_x509_crt_fmt_t FORMAT, void * OUTPUT_DATA, size_t *
          OUTPUT_DATA_SIZE)
     DN: Holds the opaque DN object

     FORMAT: the format of output params.  One of PEM or DER.

     OUTPUT_DATA: will contain a DN PEM or DER encoded

     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
     replaced by the actual size of parameters)

     This function will export the DN to DER or PEM format.

     If the buffer provided is not long enough to hold the output, then
     *'output_data_size' is updated and 'GNUTLS_E_SHORT_MEMORY_BUFFER'
     will be returned.

     If the structure is PEM encoded, it will have a header of "BEGIN
     NAME".

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_dn_get_rdn_ava
--------------------------

 -- Function: int gnutls_x509_dn_get_rdn_ava (gnutls_x509_dn_t DN, int
          IRDN, int IAVA, gnutls_x509_ava_st * AVA)
     DN: input variable with opaque DN pointer

     IRDN: index of RDN

     IAVA: index of AVA.

     AVA: Pointer to structure which will hold output information.

     Get pointers to data within the DN.

     Note that 'ava' will contain pointers into the 'dn' structure, so
     you should not modify any data or deallocate it.  Note also that
     the DN in turn points into the original certificate structure, and
     thus you may not deallocate the certificate and continue to access
     'dn'.

     *Returns:* Returns 0 on success, or an error code.

gnutls_x509_dn_import
---------------------

 -- Function: int gnutls_x509_dn_import (gnutls_x509_dn_t DN, const
          gnutls_datum_t * DATA)
     DN: the structure that will hold the imported DN

     DATA: should contain a DER encoded RDN sequence

     This function parses an RDN sequence and stores the result to a
     'gnutls_x509_dn_t' structure.  The structure must have been
     initialized with 'gnutls_x509_dn_init()'.  You may use
     'gnutls_x509_dn_get_rdn_ava()' to decode the DN.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

     *Since:* 2.4.0

gnutls_x509_dn_init
-------------------

 -- Function: int gnutls_x509_dn_init (gnutls_x509_dn_t * DN)
     DN: the object to be initialized

     This function initializes a 'gnutls_x509_dn_t' structure.

     The object returned must be deallocated using
     'gnutls_x509_dn_deinit()'.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

     *Since:* 2.4.0

gnutls_x509_dn_oid_known
------------------------

 -- Function: int gnutls_x509_dn_oid_known (const char * OID)
     OID: holds an Object Identifier in a null terminated string

     This function will inform about known DN OIDs.  This is useful
     since functions like 'gnutls_x509_crt_set_dn_by_oid()' use the
     information on known OIDs to properly encode their input.  Object
     Identifiers that are not known are not encoded by these functions,
     and their input is stored directly into the ASN.1 structure.  In
     that case of unknown OIDs, you have the responsibility of DER
     encoding your data.

     *Returns:* 1 on known OIDs and 0 otherwise.

gnutls_x509_privkey_cpy
-----------------------

 -- Function: int gnutls_x509_privkey_cpy (gnutls_x509_privkey_t DST,
          gnutls_x509_privkey_t SRC)
     DST: The destination key, which should be initialized.

     SRC: The source key

     This function will copy a private key from source to destination
     key.  Destination has to be initialized.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_privkey_deinit
--------------------------

 -- Function: void gnutls_x509_privkey_deinit (gnutls_x509_privkey_t
          KEY)
     KEY: The structure to be deinitialized

     This function will deinitialize a private key structure.

gnutls_x509_privkey_export_dsa_raw
----------------------------------

 -- Function: int gnutls_x509_privkey_export_dsa_raw
          (gnutls_x509_privkey_t KEY, gnutls_datum_t * P, gnutls_datum_t
          * Q, gnutls_datum_t * G, gnutls_datum_t * Y, gnutls_datum_t *
          X)
     KEY: a structure that holds the DSA parameters

     P: will hold the p

     Q: will hold the q

     G: will hold the g

     Y: will hold the y

     X: will hold the x

     This function will export the DSA private key's parameters found in
     the given structure.  The new parameters will be allocated using
     'gnutls_malloc()' and will be stored in the appropriate datum.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_privkey_export_pkcs8
--------------------------------

 -- Function: int gnutls_x509_privkey_export_pkcs8
          (gnutls_x509_privkey_t KEY, gnutls_x509_crt_fmt_t FORMAT,
          const char * PASSWORD, unsigned int FLAGS, void * OUTPUT_DATA,
          size_t * OUTPUT_DATA_SIZE)
     KEY: Holds the key

     FORMAT: the format of output params.  One of PEM or DER.

     PASSWORD: the password that will be used to encrypt the key.

     FLAGS: an ORed sequence of gnutls_pkcs_encrypt_flags_t

     OUTPUT_DATA: will contain a private key PEM or DER encoded

     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
     replaced by the actual size of parameters)

     This function will export the private key to a PKCS8 structure.
     Both RSA and DSA keys can be exported.  For DSA keys we use PKCS
     '11' definitions.  If the flags do not specify the encryption
     cipher, then the default 3DES (PBES2) will be used.

     The 'password' can be either ASCII or UTF-8 in the default PBES2
     encryption schemas, or ASCII for the PKCS12 schemas.

     If the buffer provided is not long enough to hold the output, then
     *output_data_size is updated and GNUTLS_E_SHORT_MEMORY_BUFFER will
     be returned.

     If the structure is PEM encoded, it will have a header of "BEGIN
     ENCRYPTED PRIVATE KEY" or "BEGIN PRIVATE KEY" if encryption is not
     used.

     *Return value:* In case of failure a negative value will be
     returned, and 0 on success.

gnutls_x509_privkey_export_rsa_raw2
-----------------------------------

 -- Function: int gnutls_x509_privkey_export_rsa_raw2
          (gnutls_x509_privkey_t KEY, gnutls_datum_t * M, gnutls_datum_t
          * E, gnutls_datum_t * D, gnutls_datum_t * P, gnutls_datum_t *
          Q, gnutls_datum_t * U, gnutls_datum_t * E1, gnutls_datum_t *
          E2)
     KEY: a structure that holds the rsa parameters

     M: will hold the modulus

     E: will hold the public exponent

     D: will hold the private exponent

     P: will hold the first prime (p)

     Q: will hold the second prime (q)

     U: will hold the coefficient

     E1: will hold e1 = d mod (p-1)

     E2: will hold e2 = d mod (q-1)

     This function will export the RSA private key's parameters found in
     the given structure.  The new parameters will be allocated using
     'gnutls_malloc()' and will be stored in the appropriate datum.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_privkey_export_rsa_raw
----------------------------------

 -- Function: int gnutls_x509_privkey_export_rsa_raw
          (gnutls_x509_privkey_t KEY, gnutls_datum_t * M, gnutls_datum_t
          * E, gnutls_datum_t * D, gnutls_datum_t * P, gnutls_datum_t *
          Q, gnutls_datum_t * U)
     KEY: a structure that holds the rsa parameters

     M: will hold the modulus

     E: will hold the public exponent

     D: will hold the private exponent

     P: will hold the first prime (p)

     Q: will hold the second prime (q)

     U: will hold the coefficient

     This function will export the RSA private key's parameters found in
     the given structure.  The new parameters will be allocated using
     'gnutls_malloc()' and will be stored in the appropriate datum.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_privkey_export
--------------------------

 -- Function: int gnutls_x509_privkey_export (gnutls_x509_privkey_t KEY,
          gnutls_x509_crt_fmt_t FORMAT, void * OUTPUT_DATA, size_t *
          OUTPUT_DATA_SIZE)
     KEY: Holds the key

     FORMAT: the format of output params.  One of PEM or DER.

     OUTPUT_DATA: will contain a private key PEM or DER encoded

     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
     replaced by the actual size of parameters)

     This function will export the private key to a PKCS1 structure for
     RSA keys, or an integer sequence for DSA keys.  The DSA keys are in
     the same format with the parameters used by openssl.

     If the buffer provided is not long enough to hold the output, then
     *'output_data_size' is updated and 'GNUTLS_E_SHORT_MEMORY_BUFFER'
     will be returned.

     If the structure is PEM encoded, it will have a header of "BEGIN
     RSA PRIVATE KEY".

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_privkey_fix
-----------------------

 -- Function: int gnutls_x509_privkey_fix (gnutls_x509_privkey_t KEY)
     KEY: Holds the key

     This function will recalculate the secondary parameters in a key.
     In RSA keys, this can be the coefficient and exponent1,2.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_privkey_generate
----------------------------

 -- Function: int gnutls_x509_privkey_generate (gnutls_x509_privkey_t
          KEY, gnutls_pk_algorithm_t ALGO, unsigned int BITS, unsigned
          int FLAGS)
     KEY: should contain a 'gnutls_x509_privkey_t' structure

     ALGO: is one of RSA or DSA.

     BITS: the size of the modulus

     FLAGS: unused for now.  Must be 0.

     This function will generate a random private key.  Note that this
     function must be called on an empty private key.

     Do not set the number of bits directly, use
     'gnutls_sec_param_to_pk_bits()'.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_privkey_get_key_id
------------------------------

 -- Function: int gnutls_x509_privkey_get_key_id (gnutls_x509_privkey_t
          KEY, unsigned int FLAGS, unsigned char * OUTPUT_DATA, size_t *
          OUTPUT_DATA_SIZE)
     KEY: Holds the key

     FLAGS: should be 0 for now

     OUTPUT_DATA: will contain the key ID

     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
     replaced by the actual size of parameters)

     This function will return a unique ID the depends on the public key
     parameters.  This ID can be used in checking whether a certificate
     corresponds to the given key.

     If the buffer provided is not long enough to hold the output, then
     *'output_data_size' is updated and 'GNUTLS_E_SHORT_MEMORY_BUFFER'
     will be returned.  The output will normally be a SHA-1 hash output,
     which is 20 bytes.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_privkey_get_pk_algorithm
------------------------------------

 -- Function: int gnutls_x509_privkey_get_pk_algorithm
          (gnutls_x509_privkey_t KEY)
     KEY: should contain a 'gnutls_x509_privkey_t' structure

     This function will return the public key algorithm of a private
     key.

     *Returns:* a member of the 'gnutls_pk_algorithm_t' enumeration on
     success, or a negative value on error.

gnutls_x509_privkey_import_dsa_raw
----------------------------------

 -- Function: int gnutls_x509_privkey_import_dsa_raw
          (gnutls_x509_privkey_t KEY, const gnutls_datum_t * P, const
          gnutls_datum_t * Q, const gnutls_datum_t * G, const
          gnutls_datum_t * Y, const gnutls_datum_t * X)
     KEY: The structure to store the parsed key

     P: holds the p

     Q: holds the q

     G: holds the g

     Y: holds the y

     X: holds the x

     This function will convert the given DSA raw parameters to the
     native 'gnutls_x509_privkey_t' format.  The output will be stored
     in 'key'.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_privkey_import_pkcs8
--------------------------------

 -- Function: int gnutls_x509_privkey_import_pkcs8
          (gnutls_x509_privkey_t KEY, const gnutls_datum_t * DATA,
          gnutls_x509_crt_fmt_t FORMAT, const char * PASSWORD, unsigned
          int FLAGS)
     KEY: The structure to store the parsed key

     DATA: The DER or PEM encoded key.

     FORMAT: One of DER or PEM

     PASSWORD: the password to decrypt the key (if it is encrypted).

     FLAGS: 0 if encrypted or GNUTLS_PKCS_PLAIN if not encrypted.

     This function will convert the given DER or PEM encoded PKCS8 2.0
     encrypted key to the native gnutls_x509_privkey_t format.  The
     output will be stored in 'key'.  Both RSA and DSA keys can be
     imported, and flags can only be used to indicate an unencrypted
     key.

     The 'password' can be either ASCII or UTF-8 in the default PBES2
     encryption schemas, or ASCII for the PKCS12 schemas.

     If the Certificate is PEM encoded it should have a header of
     "ENCRYPTED PRIVATE KEY", or "PRIVATE KEY". You only need to specify
     the flags if the key is DER encoded, since in that case the
     encryption status cannot be auto-detected.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_privkey_import_rsa_raw2
-----------------------------------

 -- Function: int gnutls_x509_privkey_import_rsa_raw2
          (gnutls_x509_privkey_t KEY, const gnutls_datum_t * M, const
          gnutls_datum_t * E, const gnutls_datum_t * D, const
          gnutls_datum_t * P, const gnutls_datum_t * Q, const
          gnutls_datum_t * U, const gnutls_datum_t * E1, const
          gnutls_datum_t * E2)
     KEY: The structure to store the parsed key

     M: holds the modulus

     E: holds the public exponent

     D: holds the private exponent

     P: holds the first prime (p)

     Q: holds the second prime (q)

     U: holds the coefficient

     E1: holds e1 = d mod (p-1)

     E2: holds e2 = d mod (q-1)

     This function will convert the given RSA raw parameters to the
     native 'gnutls_x509_privkey_t' format.  The output will be stored
     in 'key'.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_privkey_import_rsa_raw
----------------------------------

 -- Function: int gnutls_x509_privkey_import_rsa_raw
          (gnutls_x509_privkey_t KEY, const gnutls_datum_t * M, const
          gnutls_datum_t * E, const gnutls_datum_t * D, const
          gnutls_datum_t * P, const gnutls_datum_t * Q, const
          gnutls_datum_t * U)
     KEY: The structure to store the parsed key

     M: holds the modulus

     E: holds the public exponent

     D: holds the private exponent

     P: holds the first prime (p)

     Q: holds the second prime (q)

     U: holds the coefficient

     This function will convert the given RSA raw parameters to the
     native 'gnutls_x509_privkey_t' format.  The output will be stored
     in 'key'.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_privkey_import
--------------------------

 -- Function: int gnutls_x509_privkey_import (gnutls_x509_privkey_t KEY,
          const gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FORMAT)
     KEY: The structure to store the parsed key

     DATA: The DER or PEM encoded certificate.

     FORMAT: One of DER or PEM

     This function will convert the given DER or PEM encoded key to the
     native 'gnutls_x509_privkey_t' format.  The output will be stored
     in 'key' .

     If the key is PEM encoded it should have a header of "RSA PRIVATE
     KEY", or "DSA PRIVATE KEY".

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_privkey_init
------------------------

 -- Function: int gnutls_x509_privkey_init (gnutls_x509_privkey_t * KEY)
     KEY: The structure to be initialized

     This function will initialize an private key structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

gnutls_x509_privkey_sec_param
-----------------------------

 -- Function: gnutls_sec_param_t gnutls_x509_privkey_sec_param
          (gnutls_x509_privkey_t KEY)
     KEY: a key structure

     This function will return the security parameter appropriate with
     this private key.

     *Returns:* On success, a valid security parameter is returned
     otherwise 'GNUTLS_SEC_PARAM_UNKNOWN' is returned.

gnutls_x509_privkey_sign_data
-----------------------------

 -- Function: int gnutls_x509_privkey_sign_data (gnutls_x509_privkey_t
          KEY, gnutls_digest_algorithm_t DIGEST, unsigned int FLAGS,
          const gnutls_datum_t * DATA, void * SIGNATURE, size_t *
          SIGNATURE_SIZE)
     KEY: Holds the key

     DIGEST: should be MD5 or SHA1

     FLAGS: should be 0 for now

     DATA: holds the data to be signed

     SIGNATURE: will contain the signature

     SIGNATURE_SIZE: holds the size of signature (and will be replaced
     by the new size)

     This function will sign the given data using a signature algorithm
     supported by the private key.  Signature algorithms are always used
     together with a hash functions.  Different hash functions may be
     used for the RSA algorithm, but only SHA-1 for the DSA keys.

     If the buffer provided is not long enough to hold the output, then
     *'signature_size' is updated and 'GNUTLS_E_SHORT_MEMORY_BUFFER'
     will be returned.

     Use 'gnutls_x509_crt_get_preferred_hash_algorithm()' to determine
     the hash algorithm.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

     *Deprecated:* Use 'gnutls_privkey_sign_data()'.

gnutls_x509_privkey_sign_hash
-----------------------------

 -- Function: int gnutls_x509_privkey_sign_hash (gnutls_x509_privkey_t
          KEY, const gnutls_datum_t * HASH, gnutls_datum_t * SIGNATURE)
     KEY: Holds the key

     HASH: holds the data to be signed

     SIGNATURE: will contain newly allocated signature

     This function will sign the given hash using the private key.  Do
     not use this function directly unless you know what it is.  Typical
     signing requires the data to be hashed and stored in special
     formats (e.g.  BER Digest-Info for RSA).

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, otherwise a
     negative error value.

     *Deprecated in:* 2.12.0

gnutls_x509_privkey_verify_data
-------------------------------

 -- Function: int gnutls_x509_privkey_verify_data (gnutls_x509_privkey_t
          KEY, unsigned int FLAGS, const gnutls_datum_t * DATA, const
          gnutls_datum_t * SIGNATURE)
     KEY: Holds the key

     FLAGS: should be 0 for now

     DATA: holds the data to be signed

     SIGNATURE: contains the signature

     This function will verify the given signed data, using the
     parameters in the private key.

     *Returns:* In case of a verification failure
     'GNUTLS_E_PK_SIG_VERIFY_FAILED' is returned, and a positive code on
     success.

     *Deprecated:* Use 'gnutls_pubkey_verify_data()'.

gnutls_x509_rdn_get_by_oid
--------------------------

 -- Function: int gnutls_x509_rdn_get_by_oid (const gnutls_datum_t *
          IDN, const char * OID, int INDX, unsigned int RAW_FLAG, void *
          BUF, size_t * SIZEOF_BUF)
     IDN: should contain a DER encoded RDN sequence

     OID: an Object Identifier

     INDX: In case multiple same OIDs exist in the RDN indicates which
     to send.  Use 0 for the first one.

     RAW_FLAG: If non zero then the raw DER data are returned.

     BUF: a pointer to a structure to hold the peer's name

     SIZEOF_BUF: holds the size of 'buf'

     This function will return the name of the given Object identifier,
     of the RDN sequence.  The name will be encoded using the rules from
     RFC2253.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, or
     'GNUTLS_E_SHORT_MEMORY_BUFFER' is returned and *'sizeof_buf' is
     updated if the provided buffer is not long enough, otherwise a
     negative error value.

gnutls_x509_rdn_get_oid
-----------------------

 -- Function: int gnutls_x509_rdn_get_oid (const gnutls_datum_t * IDN,
          int INDX, void * BUF, size_t * SIZEOF_BUF)
     IDN: should contain a DER encoded RDN sequence

     INDX: Indicates which OID to return.  Use 0 for the first one.

     BUF: a pointer to a structure to hold the peer's name OID

     SIZEOF_BUF: holds the size of 'buf'

     This function will return the specified Object identifier, of the
     RDN sequence.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, or
     'GNUTLS_E_SHORT_MEMORY_BUFFER' is returned and *'sizeof_buf' is
     updated if the provided buffer is not long enough, otherwise a
     negative error value.

     *Since:* 2.4.0

gnutls_x509_rdn_get
-------------------

 -- Function: int gnutls_x509_rdn_get (const gnutls_datum_t * IDN, char
          * BUF, size_t * SIZEOF_BUF)
     IDN: should contain a DER encoded RDN sequence

     BUF: a pointer to a structure to hold the peer's name

     SIZEOF_BUF: holds the size of 'buf'

     This function will return the name of the given RDN sequence.  The
     name will be in the form "C=xxxx,O=yyyy,CN=zzzz" as described in
     RFC2253.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' is returned, or
     'GNUTLS_E_SHORT_MEMORY_BUFFER' is returned and *'sizeof_buf' is
     updated if the provided buffer is not long enough, otherwise a
     negative error value.
