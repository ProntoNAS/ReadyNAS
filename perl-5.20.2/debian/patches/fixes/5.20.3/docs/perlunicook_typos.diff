From 011f35f1a10e440ab67f0ce07dc72ce4d5d88dec Mon Sep 17 00:00:00 2001
From: Randy Stauner <rwstauner@cpan.org>
Date: Tue, 17 Feb 2015 07:43:18 -0700
Subject: Fix minor code typos in perlunicook

(cherry picked from commit 7b237c8f3da9b9cd57a5cbd035ff4d3e70dcbb7b)

Bug-Debian: https://bugs.debian.org/822336
Patch-Name: fixes/5.20.3/docs/perlunicook_typos.diff
---
 pod/perlunicook.pod | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/pod/perlunicook.pod b/pod/perlunicook.pod
index 7fd8f141e..3e5496ec0 100644
--- a/pod/perlunicook.pod
+++ b/pod/perlunicook.pod
@@ -440,7 +440,7 @@ convert such strings manually.
  use Unicode::UCD qw(num);
  my $str = "got Ⅻ and ४५६७ and ⅞ and here";
  my @nums = ();
- while (/$str =~ (\d+|\N)/g) {  # not just ASCII!
+ while ($str =~ /(\d+|\N)/g) {  # not just ASCII!
     push @nums, num($1);
  }
  say "@nums";   #     12      4567      0.875
@@ -638,7 +638,7 @@ won’t fit into a byte.  Here’s how to manually manage the translation:
     # assume $uni_key holds a normal Perl string (abstract Unicode)
     my $enc_key   = encode("UTF-8", $uni_key, 1);
     my $enc_value = $dbhash{$enc_key};
-    my $uni_value = decode("UTF-8", $enc_key, 1);
+    my $uni_value = decode("UTF-8", $enc_value, 1);
 
 =head2 ℞ 43: Unicode text in DBM hashes, the easy way
 
