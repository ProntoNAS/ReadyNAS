/* tracker-control.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Tracker", gir_namespace = "TrackerControl", gir_version = "1.0", lower_case_cprefix = "tracker_")]
namespace Tracker {
	[CCode (cheader_filename = "libtracker-control/tracker-control.h", type_id = "tracker_miner_manager_get_type ()")]
	public class MinerManager : GLib.Object, GLib.Initable {
		[CCode (has_construct_function = false)]
		public MinerManager ();
		public static GLib.Quark error_quark ();
		[CCode (has_construct_function = false)]
		public MinerManager.full (bool auto_start) throws GLib.Error;
		public GLib.SList<string>? get_available ();
		public unowned string get_description (string miner);
		public unowned string get_display_name (string miner);
		public GLib.SList<string>? get_running ();
		public bool get_status (string miner, out string status, out double progress, out int remaining_time);
		[Deprecated (since = "0.12")]
		public bool ignore_next_update (string miner, string urls);
		public bool index_file (GLib.File file) throws GLib.Error;
		public async bool index_file_async (GLib.File file, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public bool is_active (string miner);
		public bool is_paused (string miner, [CCode (array_length = false, array_null_terminated = true)] out string[] applications, [CCode (array_length = false, array_null_terminated = true)] out string[] reasons);
		public bool pause (string miner, string reason, out uint32 cookie);
		public bool pause_for_process (string miner, string reason, out uint32 cookie);
		public bool reindex_by_mimetype ([CCode (array_length = false, array_null_terminated = true)] string[] mimetypes) throws GLib.Error;
		public bool resume (string miner, uint32 cookie);
		[NoAccessorMethod]
		public bool auto_start { get; construct; }
		public virtual signal void miner_activated (string miner_name);
		public virtual signal void miner_deactivated (string miner_name);
		public virtual signal void miner_paused (string miner_name);
		public virtual signal void miner_progress (string miner_name, string status, double progress, int remaining_time);
		public virtual signal void miner_resumed (string miner_name);
	}
	[CCode (cheader_filename = "libtracker-control/tracker-control.h", cprefix = "TRACKER_MINER_MANAGER_ERROR_")]
	public errordomain MinerManagerError {
		NOT_AVAILABLE,
		NOENT
	}
}
