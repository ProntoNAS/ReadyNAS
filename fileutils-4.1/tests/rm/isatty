#!/bin/sh
# Make sure `chown 0 f; rm f' prompts before removing f.

if test "$VERBOSE" = yes; then
  set -x
  rm --version
fi

. $srcdir/../lang-default

pwd=`pwd`
tmp=isatty.$$
trap 'status=$?; cd $pwd; rm -rf $tmp && exit $status' 0
trap '(exit $?); exit' 1 2 13 15

framework_failure=0
mkdir $tmp || framework_failure=1
cd $tmp || framework_failure=1

if test $framework_failure = 1; then
  echo 'failure in testing framework' 1>&2
  (exit 1); exit
fi

fail=0

# Skip this test if there is no /dev/stdin file.
ls /dev/stdin >/dev/null 2>&1 \
  || { (exit 77); exit; }

# FIXME: skip this test, for now.
# FIXME: reenable it once I find a way to test whether rm's read (below)
# would cause the test to hang (i.e., when run in the background).
(exit 77); exit

touch f
chmod 0 f
rm f < /dev/stdin > out 2>&1 &
pid=$!

# Wait a second, to give a buggy rm (as in fileutils-4.0.40)
# enough time to remove the file.
sleep 1

# The file must still exist.
test -f f || fail=1

kill $pid

# Note the trailing `x' -- so I don't have to have a trailing
# blank in this file :-)
cat > exp <<\EOF
rm: remove write-protected file `f'? x
EOF
#`

# Append an `x' and a newline.
echo x >> out

cmp out exp || fail=1
test $fail = 1 && diff out exp 2> /dev/null

(exit $fail); exit
