/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _YPBIND_H_RPCGEN
#define _YPBIND_H_RPCGEN

#include <rpc/rpc.h>

#include <pthread.h>

#ifdef __cplusplus
extern "C" {
#endif

#define YPMAXDOMAIN 256

#define SET_NO 0
#define SET_YPSET 1
#define SET_YPSETME 2

extern int ypset;

typedef char *domainname;

typedef char olddomainname;
/*
 * Response structure and overall result status codes.  Success and failure
 * represent two separate response message types.
 */

enum ypbind_resptype {
	YPBIND_SUCC_VAL = 1,
	YPBIND_FAIL_VAL = 2,
};
typedef enum ypbind_resptype ypbind_resptype;

struct ypbind_binding {
	char ypbind_binding_addr[4];
	char ypbind_binding_port[2];
};
typedef struct ypbind_binding ypbind_binding;

struct ypbind_resp {
	ypbind_resptype ypbind_status;
	union {
		u_int ypbind_error;
		ypbind_binding ypbind_bindinfo;
	} ypbind_resp_u;
};
typedef struct ypbind_resp ypbind_resp;

/* Detailed failure reason codes for response field ypbind_error*/
#define YPBIND_ERR_ERR 1
#define YPBIND_ERR_NOSERV 2
#define YPBIND_ERR_RESC 3

/*
 * Request data structure for ypbind "Set domain" procedure.
 */

struct ypbind_oldsetdom {
	char ypoldsetdom_domain[YPMAXDOMAIN];
	ypbind_binding ypoldsetdom_binding;
};
typedef struct ypbind_oldsetdom ypbind_oldsetdom;
#define ypoldsetdom_addr ypoldsetdom_binding.ypbind_binding_addr
#define ypoldsetdom_port ypoldsetdom_binding.ypbind_binding_port

struct ypbind_setdom {
	domainname ypsetdom_domain;
	ypbind_binding ypsetdom_binding;
	u_int ypsetdom_vers;
};
typedef struct ypbind_setdom ypbind_setdom;

/*
 * NIS binding protocol
 */

#define YPBINDPROG ((unsigned long)100007)
#define YPBINDOLDVERS ((unsigned long)1)

#if defined(__STDC__) || defined(__cplusplus)
#define YPBINDPROC_OLDNULL ((unsigned long)0)
extern  enum clnt_stat ypbindproc_oldnull_1(void *, void *, CLIENT *);
extern  bool_t ypbindproc_oldnull_1_svc(void *, void *, struct svc_req *);
#define YPBINDPROC_OLDDOMAIN ((unsigned long)1)
extern  enum clnt_stat ypbindproc_olddomain_1(olddomainname *, ypbind_resp *, CLIENT *);
extern  bool_t ypbindproc_olddomain_1_svc(olddomainname *, ypbind_resp *, struct svc_req *);
#define YPBINDPROC_OLDSETDOM ((unsigned long)2)
extern  enum clnt_stat ypbindproc_oldsetdom_1(ypbind_oldsetdom *, void *, CLIENT *);
extern  bool_t ypbindproc_oldsetdom_1_svc(ypbind_oldsetdom *, void *, struct svc_req *);
extern int ypbindprog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define YPBINDPROC_OLDNULL ((unsigned long)0)
extern  enum clnt_stat ypbindproc_oldnull_1();
extern  bool_t ypbindproc_oldnull_1_svc();
#define YPBINDPROC_OLDDOMAIN ((unsigned long)1)
extern  enum clnt_stat ypbindproc_olddomain_1();
extern  bool_t ypbindproc_olddomain_1_svc();
#define YPBINDPROC_OLDSETDOM ((unsigned long)2)
extern  enum clnt_stat ypbindproc_oldsetdom_1();
extern  bool_t ypbindproc_oldsetdom_1_svc();
extern int ypbindprog_1_freeresult ();
#endif /* K&R C */
#define YPBINDVERS ((unsigned long)2)

#if defined(__STDC__) || defined(__cplusplus)
#define YPBINDPROC_NULL ((unsigned long)0)
extern  enum clnt_stat ypbindproc_null_2(void *, void *, CLIENT *);
extern  bool_t ypbindproc_null_2_svc(void *, void *, struct svc_req *);
#define YPBINDPROC_DOMAIN ((unsigned long)1)
extern  enum clnt_stat ypbindproc_domain_2(domainname *, ypbind_resp *, CLIENT *);
extern  bool_t ypbindproc_domain_2_svc(domainname *, ypbind_resp *, struct svc_req *);
#define YPBINDPROC_SETDOM ((unsigned long)2)
extern  enum clnt_stat ypbindproc_setdom_2(ypbind_setdom *, void *, CLIENT *);
extern  bool_t ypbindproc_setdom_2_svc(ypbind_setdom *, void *, struct svc_req *);
extern int ypbindprog_2_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define YPBINDPROC_NULL ((unsigned long)0)
extern  enum clnt_stat ypbindproc_null_2();
extern  bool_t ypbindproc_null_2_svc();
#define YPBINDPROC_DOMAIN ((unsigned long)1)
extern  enum clnt_stat ypbindproc_domain_2();
extern  bool_t ypbindproc_domain_2_svc();
#define YPBINDPROC_SETDOM ((unsigned long)2)
extern  enum clnt_stat ypbindproc_setdom_2();
extern  bool_t ypbindproc_setdom_2_svc();
extern int ypbindprog_2_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t ypbind_xdr_domainname (XDR *, domainname*);
extern  bool_t ypbind_xdr_olddomainname (XDR *, olddomainname*);
extern  bool_t ypbind_xdr_resptype (XDR *, ypbind_resptype*);
extern  bool_t ypbind_xdr_binding (XDR *, ypbind_binding*);
extern  bool_t ypbind_xdr_resp (XDR *, ypbind_resp*);
extern  bool_t ypbind_xdr_oldsetdom (XDR *, ypbind_oldsetdom*);
extern  bool_t ypbind_xdr_setdom (XDR *, ypbind_setdom*);

#else /* K&R C */
extern bool_t ypbind_xdr_domainname ();
extern bool_t ypbind_xdr_olddomainname ();
extern bool_t ypbind_xdr_resptype ();
extern bool_t ypbind_xdr_binding ();
extern bool_t ypbind_xdr_resp ();
extern bool_t ypbind_xdr_oldsetdom ();
extern bool_t ypbind_xdr_setdom ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_YPBIND_H_RPCGEN */
