Originally reported by HIBINO Kei <ex8k-hbn@asahi-net.or.jp> as Bug#83106

   Date: Mon, 22 Jan 2001 16:50:48 +0900
   Message-ID: <87u26svxd3.wl@strawberry.hibi-local.net>
   From: HIBINO Kei <ex8k-hbn@asahi-net.or.jp>
   To: submit@bugs.debian.org
   Subject: ypbind don't terminate with signals
   
   'ypbind' program is multi-threaded.
   Main thread has a sub signal handler thread.
   Multi-threaded programs on linux has different process ID for each thread.
   So, main thread and sub signal handler thread have different process ID.
   Recorded process ID in '/var/run/ypbind.pid' is main thread process ID.
   Main thread ignore signals,
   therefore for example ypbind doesn't exit with '/etc/init.d/nis stop'.
   
   If we use recorded process ID with only sending signal,
   sub signal handler thread's process ID should be recorded in
   '/var/run/ypbind.pid'.

I (miquels) think this is actually a bug in glibc. If any thread
sets up a signal handler, and it is ignored in other threads, then
a signal delivered to the 'main' process ID should be relayed to
the appropriate thread.

Anyway, this workaround should indeed work. I've added ifdef __linux__
even though it should work on all systems.

--- nis-3.9.orig/ypbind-mt-1.8/src/ypbind-mt.c	Sun Mar 11 10:43:12 2001
+++ nis-3.9/ypbind-mt-1.8/src/ypbind-mt.c	Tue May  8 17:54:33 2001
@@ -308,6 +308,10 @@
   sigset_t sigs_to_catch;
   int caught;
 
+#ifdef __linux__ /* Create pidfile in signal handling thread. */
+  create_pidfile ();
+#endif
+
   sigemptyset (&sigs_to_catch);
   sigaddset (&sigs_to_catch, SIGCHLD);
   sigaddset (&sigs_to_catch, SIGTERM);
@@ -549,7 +553,9 @@
   __nss_configure_lookup ("hosts", "files dns");
 #endif /* HAVE___NSS_CONFIGURE_LOOKUP */
 
+#ifndef __linux__ /* Linux needs to do this in the signal-handling thread */
   create_pidfile ();
+#endif
 
   sigemptyset (&sigs_to_block);
   sigaddset (&sigs_to_block, SIGCHLD);
@@ -669,6 +675,10 @@
   svc_run ();
   log_msg (LOG_ERR, _("svc_run returned."));
   unlink (_YPBIND_PIDFILE);
+#ifdef __linux__
+  /* Linux -- exit by signalling signal handler thread. */
+  pthread_kill(sig_thread, SIGTERM);
+#endif
   exit (1);
   /* NOTREACHED */
 }
