From: Stefan Lippers-Hollmann <s.l-h@gmx.de>
Date: Thu, 25 Feb 2016 00:29:28 +0100
Subject: Revert "Revert "networkd: ndisc - revert to letting the kernel
 handle NDisc""

networkd v229 introduces many regressions in IPv6 related RA handling,
reverting this at least fixes:
 * https://bugs.debian.org/814566
   networkd >= 229-1 starts assigning IPv6 addresses/ routes to lower bridge
   members
   which may be https://github.com/systemd/systemd/issues/2572
   [networkd] bridged intefaces still get RA ipv6 addresses #2572
and is quite likely to also fix:
 * https://bugs.debian.org/814667
   systemd-networkd overrides default kernel net.ipv6.conf.interface.accept_ra
 * https://bugs.debian.org/815586
   does its own RA handling and is doing it wrong

This reverts commit fe30727643a7c53faa29f1caa8dcabcb2b6f6fcb.

Signed-off-by: Stefan Lippers-Hollmann <s.l-h@gmx.de>
---
 src/network/networkd-link.c  | 20 ++++++++++++--------
 src/network/networkd-ndisc.c | 12 ++++++++----
 2 files changed, 20 insertions(+), 12 deletions(-)

diff --git a/src/network/networkd-link.c b/src/network/networkd-link.c
index a021fc8..999f6d5 100644
--- a/src/network/networkd-link.c
+++ b/src/network/networkd-link.c
@@ -712,9 +712,6 @@ void link_check_ready(Link *link) {
              !link->dhcp4_configured && !link->dhcp6_configured))
                 return;
 
-        if (link_ipv6_accept_ra_enabled(link) && !link->ndisc_configured)
-                return;
-
         SET_FOREACH(a, link->addresses, i)
                 if (!address_is_ready(a))
                         return;
@@ -2132,6 +2129,7 @@ static int link_set_ipv6_privacy_extensions(Link *link) {
 
 static int link_set_ipv6_accept_ra(Link *link) {
         const char *p = NULL;
+        const char *v;
         int r;
 
         /* Make this a NOP if IPv6 is not available */
@@ -2144,12 +2142,16 @@ static int link_set_ipv6_accept_ra(Link *link) {
         if (!link->network)
                 return 0;
 
+        if (link_ipv6_accept_ra_enabled(link))
+                v = "1";
+        else
+                v = "0";
+
         p = strjoina("/proc/sys/net/ipv6/conf/", link->ifname, "/accept_ra");
 
-        /* We handle router advertisments ourselves, tell the kernel to GTFO */
-        r = write_string_file(p, "0", WRITE_STRING_FILE_VERIFY_ON_FAILURE);
+        r = write_string_file(p, v, WRITE_STRING_FILE_VERIFY_ON_FAILURE);
         if (r < 0)
-                log_link_warning_errno(link, r, "Cannot disable kernel IPv6 accept_ra for interface: %m");
+                log_link_warning_errno(link, r, "Cannot configure kernel IPv6 accept_ra for interface: %m");
 
         return 0;
 }
@@ -2210,6 +2212,7 @@ static int link_set_ipv6_hop_limit(Link *link) {
         return 0;
 }
 
+/*
 static int link_drop_foreign_config(Link *link) {
         Address *address;
         Route *route;
@@ -2217,7 +2220,6 @@ static int link_drop_foreign_config(Link *link) {
         int r;
 
         SET_FOREACH(address, link->addresses_foreign, i) {
-                /* we consider IPv6LL addresses to be managed by the kernel */
                 if (address->family == AF_INET6 && in_addr_is_link_local(AF_INET6, &address->in_addr) == 1)
                         continue;
 
@@ -2227,7 +2229,6 @@ static int link_drop_foreign_config(Link *link) {
         }
 
         SET_FOREACH(route, link->routes_foreign, i) {
-                /* do not touch routes managed by the kernel */
                 if (route->protocol == RTPROT_KERNEL)
                         continue;
 
@@ -2238,6 +2239,7 @@ static int link_drop_foreign_config(Link *link) {
 
         return 0;
 }
+*/
 
 static int link_update_lldp(Link *link) {
         int r;
@@ -2269,11 +2271,13 @@ static int link_configure(Link *link) {
 
         /* Drop foreign config, but ignore loopback or critical devices.
          * We do not want to remove loopback address or addresses used for root NFS. */
+/*
         if (!(link->flags & IFF_LOOPBACK) && !(link->network->dhcp_critical)) {
                 r = link_drop_foreign_config(link);
                 if (r < 0)
                         return r;
         }
+*/
 
         r = link_set_bridge_fdb(link);
         if (r < 0)
diff --git a/src/network/networkd-ndisc.c b/src/network/networkd-ndisc.c
index 1a380bd..22bc79d 100644
--- a/src/network/networkd-ndisc.c
+++ b/src/network/networkd-ndisc.c
@@ -26,6 +26,7 @@
 
 #include "networkd.h"
 
+/*
 static int ndisc_netlink_handler(sd_netlink *rtnl, sd_netlink_message *m, void *userdata) {
         _cleanup_link_unref_ Link *link = userdata;
         int r;
@@ -76,7 +77,6 @@ static void ndisc_prefix_autonomous_handler(sd_ndisc *nd, const struct in6_addr
         if (in_addr_is_null(AF_INET6, (const union in_addr_union *) &link->network->ipv6_token) == 0)
                 memcpy(((char *)&address->in_addr.in6) + 8, ((char *)&link->network->ipv6_token) + 8, 8);
         else {
-                /* see RFC4291 section 2.5.1 */
                 address->in_addr.in6.s6_addr[8]  = link->mac.ether_addr_octet[0];
                 address->in_addr.in6.s6_addr[8] ^= 1 << 1;
                 address->in_addr.in6.s6_addr[9]  = link->mac.ether_addr_octet[1];
@@ -139,11 +139,12 @@ static void ndisc_prefix_onlink_handler(sd_ndisc *nd, const struct in6_addr *pre
 
         link->ndisc_messages++;
 }
+*/
 
 static void ndisc_router_handler(sd_ndisc *nd, uint8_t flags, const struct in6_addr *gateway, unsigned lifetime, int pref, void *userdata) {
         _cleanup_route_free_ Route *route = NULL;
         Link *link = userdata;
-        usec_t time_now;
+        /* usec_t time_now; */
         int r;
 
         assert(link);
@@ -166,6 +167,8 @@ static void ndisc_router_handler(sd_ndisc *nd, uint8_t flags, const struct in6_a
                         log_link_warning_errno(link, r, "Starting DHCPv6 client on NDisc request failed: %m");
         }
 
+        return;
+/*
         if (!gateway)
                 return;
 
@@ -192,6 +195,7 @@ static void ndisc_router_handler(sd_ndisc *nd, uint8_t flags, const struct in6_a
         }
 
         link->ndisc_messages++;
+*/
 }
 
 static void ndisc_handler(sd_ndisc *nd, int event, void *userdata) {
@@ -249,8 +253,8 @@ int ndisc_configure(Link *link) {
 
         r = sd_ndisc_set_callback(link->ndisc_router_discovery,
                                   ndisc_router_handler,
-                                  ndisc_prefix_onlink_handler,
-                                  ndisc_prefix_autonomous_handler,
+                                  NULL,
+                                  NULL,
                                   ndisc_handler,
                                   link);
 
