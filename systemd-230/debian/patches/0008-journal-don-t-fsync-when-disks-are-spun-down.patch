From 7e7982a662088ef50b3d1e47f652b3c6a44eff91 Mon Sep 17 00:00:00 2001
From: Justin Maggard <jmaggard@netgear.com>
Date: Tue, 16 Aug 2016 17:52:13 -0700
Subject: [PATCH] journal: don't fsync when disks are spun down

---
 src/journal/journal-file.c | 25 +++++++++++++++++++++----
 1 file changed, 21 insertions(+), 4 deletions(-)

diff --git a/src/journal/journal-file.c- b/src/journal/journal-file.c
index 7504326..4de6456 100644
--- a/src/journal/journal-file.c-
+++ b/src/journal/journal-file.c
@@ -89,6 +89,23 @@
 /* The mmap context to use for the header we pick as one above the last defined typed */
 #define CONTEXT_HEADER _OBJECT_TYPE_MAX
 
+static int Fsync(int fd)
+{
+        FILE *fp;
+        if (access("/run/noflushd.pid", F_OK) == 0) {
+                fp = fopen("/proc/sys/vm/dirty_expire_centisecs", "r");
+                if (fp) {
+                        int n;
+                        if (fscanf(fp, "%9d", &n) != 1)
+                                n = 0;
+                        fclose(fp);
+                        if (n >= 360000)
+                                return 0;
+                }
+        }
+        return fsync(fd);
+}
+
 /* This may be called from a separate thread to prevent blocking the caller for the duration of fsync().
  * As a result we use atomic operations on f->offline_state for inter-thread communications with
  * journal_file_set_offline() and journal_file_set_online(). */
@@ -115,13 +132,13 @@ static void journal_file_set_offline_internal(JournalFile *f) {
                         break;
 
                 case OFFLINE_SYNCING:
-                        (void) fsync(f->fd);
+                        (void) Fsync(f->fd);
 
                         if (!__sync_bool_compare_and_swap(&f->offline_state, OFFLINE_SYNCING, OFFLINE_OFFLINING))
                                 continue;
 
                         f->header->state = f->archive ? STATE_ARCHIVED : STATE_OFFLINE;
-                        (void) fsync(f->fd);
+                        (void) Fsync(f->fd);
                         break;
 
                 case OFFLINE_OFFLINING:
@@ -308,7 +325,7 @@ static int journal_file_set_online(JournalFile *f) {
 
                 case STATE_OFFLINE:
                         f->header->state = STATE_ONLINE;
-                        (void) fsync(f->fd);
+                        (void) Fsync(f->fd);
                         return 0;
 
                 default:
@@ -466,7 +483,7 @@ static int fsync_directory_of_file(int fd) {
         if (dfd < 0)
                 return -errno;
 
-        if (fsync(dfd) < 0)
+        if (Fsync(dfd) < 0)
                 return -errno;
 
         return 0;
@@ -495,7 +512,7 @@ static int journal_file_refresh_header(JournalFile *f) {
         r = journal_file_set_online(f);
 
         /* Sync the online state to disk */
-        (void) fsync(f->fd);
+        (void) Fsync(f->fd);
 
         /* We likely just created a new file, also sync the directory this file is located in. */
         (void) fsync_directory_of_file(f->fd);
-- 
2.9.3

