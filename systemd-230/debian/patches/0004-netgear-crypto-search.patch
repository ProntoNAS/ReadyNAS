From aeb863ba750e03de1934a5ed4b16ae50f9de4999 Mon Sep 17 00:00:00 2001
From: Justin Maggard <jmaggard@netgear.com>
Date: Wed, 10 Aug 2016 14:34:35 -0700
Subject: [PATCH 4/7] netgear crypto search

---
 src/core/device.c                     |   5 +-
 src/cryptsetup/cryptsetup-generator.c | 129 +++++++++++++++++++++++++++++++---
 tmpfiles.d/systemd.conf.m4            |   2 +
 3 files changed, 124 insertions(+), 12 deletions(-)

diff --git a/src/core/device.c b/src/core/device.c
index c64e01c..4efc911 100644
--- a/src/core/device.c
+++ b/src/core/device.c
@@ -112,7 +112,10 @@ static void device_init(Unit *u) {
          * indefinitely for plugged in devices, something which cannot
          * happen for the other units since their operations time out
          * anyway. */
-        u->job_timeout = u->manager->default_timeout_start_usec;
+        if (strneq(u->id, "dev-mapper-", 11))
+                u->job_timeout = 600 * USEC_PER_SEC;
+        else
+                u->job_timeout = u->manager->default_timeout_start_usec;
 
         u->ignore_on_isolate = true;
 }
diff --git a/src/cryptsetup/cryptsetup-generator.c b/src/cryptsetup/cryptsetup-generator.c
index 8ac5ab7..129dc4f 100644
--- a/src/cryptsetup/cryptsetup-generator.c
+++ b/src/cryptsetup/cryptsetup-generator.c
@@ -44,6 +44,8 @@ typedef struct crypto_device {
         bool create;
 } crypto_device;
 
+#define TIMEOUT_SEC 600
+
 static const char *arg_dest = "/tmp";
 static bool arg_enabled = true;
 static bool arg_read_crypttab = true;
@@ -52,11 +54,94 @@ static Hashmap *arg_disks = NULL;
 static char *arg_default_options = NULL;
 static char *arg_default_keyfile = NULL;
 
+static int create_keysearch(const char *name, const char *volname, const char *keyfile) {
+        char *p, *n = NULL, *to = NULL, *from = NULL;
+        FILE *f;
+        int r = 0;
+
+        assert(name);
+        assert(volname);
+
+        mkdir_parents_label(keyfile, 0755);
+
+        p = strjoin(arg_dest, "/", volname, "-key.service", NULL);
+        if (!p) {
+                log_error("Failed to allocate unit file name.");
+                return -ENOMEM;
+        }
+
+        f = fopen(p, "wxe");
+        if (!f) {
+               if (errno == EEXIST)
+                       goto make_symlinks;
+                log_error("Failed to create unit file: %m");
+                r = -errno;
+                goto fail2;
+        }
+
+        fprintf(f,
+                "[Unit]\n"
+                "Description=Cryptography Key Search for %s\n"
+                "DefaultDependencies=no\n"
+                "Before=local-fs-pre.target\n",
+                volname);
+
+        fprintf(f,
+                "\n[Service]\n"
+                "Type=oneshot\n"
+                "ExecStart=/usr/bin/rnutil search_for_key '%s' '%s' %d\n",
+                volname, keyfile, TIMEOUT_SEC);
+
+        fflush(f);
+
+        if (ferror(f)) {
+                log_error("Failed to write file: %m");
+                r = -errno;
+                fclose(f);
+                goto fail2;
+        }
+
+        fclose(f);
+
+make_symlinks:
+        if (asprintf(&from, "../%s-key.service", volname) < 0) {
+                r = -ENOMEM;
+                goto fail2;
+        }
+
+        r = unit_name_from_path_instance("systemd-cryptsetup", name, ".service", &n);
+        if (r) {
+                log_error("Failed to allocate unit name.");
+                goto fail2;
+        }
+
+        to = strjoin(arg_dest, "/", n, ".requires/", volname, "-key.service", NULL);
+        if (!to) {
+                r = -ENOMEM;
+                goto fail2;
+        }
+
+        mkdir_parents_label(to, 0755);
+        if (symlink(from, to) < 0) {
+                log_error("Failed to create symlink '%s' to '%s': %m", from, to);
+                r = -errno;
+                goto fail2;
+        }
+fail2:
+       free(p);
+       free(n);
+       free(to);
+       free(from);
+
+       return r;
+}
+
 static int create_disk(
                 const char *name,
                 const char *device,
                 const char *password,
-                const char *options) {
+                const char *options,
+                const char *volname) {
 
         _cleanup_free_ char *p = NULL, *n = NULL, *d = NULL, *u = NULL, *to = NULL, *e = NULL,
                 *filtered = NULL;
@@ -102,18 +188,20 @@ static int create_disk(
         if (!f)
                 return log_error_errno(errno, "Failed to create unit file %s: %m", p);
 
-        fputs(
+        fprintf(f,
                 "# Automatically generated by systemd-cryptsetup-generator\n\n"
                 "[Unit]\n"
-                "Description=Cryptography Setup for %I\n"
+                "Description=Cryptography Setup for %%I\n"
                 "Documentation=man:crypttab(5) man:systemd-cryptsetup-generator(8) man:systemd-cryptsetup@.service(8)\n"
                 "SourcePath=/etc/crypttab\n"
                 "DefaultDependencies=no\n"
                 "Conflicts=umount.target\n"
-                "BindsTo=dev-mapper-%i.device\n"
+                "BindsTo=dev-mapper-%%i.device\n"
                 "IgnoreOnIsolate=true\n"
-                "After=cryptsetup-pre.target\n",
-                f);
+                "After=cryptsetup-pre.target %s-key.service\n"
+                "Before=umount.target local-fs-pre.target\n"
+                "JobTimeoutSec=%d\n",
+                volname, TIMEOUT_SEC);
 
         if (!nofail)
                 fprintf(f,
@@ -165,10 +253,10 @@ static int create_disk(
                 "Type=oneshot\n"
                 "RemainAfterExit=yes\n"
                 "TimeoutSec=0\n" /* the binary handles timeouts anyway */
-                "ExecStart=" SYSTEMD_CRYPTSETUP_PATH " attach '%s' '%s' '%s' '%s'\n"
+                "ExecStart=" SYSTEMD_CRYPTSETUP_PATH " attach '%s' '%s' '%s' '%s' ; /sbin/btrfs device scan '/dev/mapper/%s'\n"
                 "ExecStop=" SYSTEMD_CRYPTSETUP_PATH " detach '%s'\n",
                 name, u, strempty(password), strempty(filtered),
-                name);
+                name, name);
 
         if (tmp)
                 fprintf(f,
@@ -382,7 +470,7 @@ static int add_crypttab_devices(void) {
                 int r, k;
                 char line[LINE_MAX], *l, *uuid;
                 crypto_device *d = NULL;
-                _cleanup_free_ char *name = NULL, *device = NULL, *keyfile = NULL, *options = NULL;
+                _cleanup_free_ char *name = NULL, *device = NULL, *keyfile = NULL, *options = NULL, *volname = NULL;
 
                 if (!fgets(line, sizeof(line), f))
                         break;
@@ -412,7 +500,27 @@ static int add_crypttab_devices(void) {
                         continue;
                 }
 
-                r = create_disk(name, device, keyfile, (d && d->options) ? d->options : options);
+		volname = strdup(name);
+		if (!volname)
+			continue;
+		l = strrchr(volname, '-');
+		if (l)
+			*l = '\0';
+
+		if (streq(keyfile, "search")) {
+			free(keyfile);
+			if (asprintf(&keyfile, "/run/systemd/cryptsetup/%s.key", volname) < 0) {
+				r = -ENOMEM;
+				log_error("Failed to allocate key file path.");
+				free(volname);
+				continue;
+			}
+			r = create_keysearch(name, volname, keyfile);
+			if (r < 0)
+				return r;
+		}
+
+                r = create_disk(name, device, keyfile, (d && d->options) ? d->options : options, volname);
                 if (r < 0)
                         return r;
 
@@ -452,7 +559,7 @@ static int add_proc_cmdline_devices(void) {
                 else
                         options = "timeout=0";
 
-                r = create_disk(d->name, device, d->keyfile ?: arg_default_keyfile, options);
+                r = create_disk(d->name, device, d->keyfile ?: arg_default_keyfile, options, "");
                 if (r < 0)
                         return r;
         }
diff --git a/tmpfiles.d/systemd.conf.m4 b/tmpfiles.d/systemd.conf.m4
index 0575408..aba93ee 100644
--- a/tmpfiles.d/systemd.conf.m4
+++ b/tmpfiles.d/systemd.conf.m4
@@ -10,6 +10,8 @@
 d /run/user 0755 root root -
 F! /run/utmp 0664 root utmp -
 
+R /run/systemd/cryptsetup
+
 d /run/systemd/ask-password 0755 root root -
 d /run/systemd/seats 0755 root root -
 d /run/systemd/sessions 0755 root root -
-- 
2.9.2

