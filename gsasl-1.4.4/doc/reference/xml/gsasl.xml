<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
          "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="gsasl-gsasl">
<refmeta>
<refentrytitle role="top_of_page" id="gsasl-gsasl.top_of_page">gsasl</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>
  GSASL Library
</refmiscinfo>
</refmeta>
<refnamediv>
<refname>gsasl</refname>
<refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv id="gsasl-gsasl.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>#define             <link linkend="GSASL-API:CAPS">GSASL_API</link>
#define             <link linkend="GSASL-VERSION:CAPS">GSASL_VERSION</link>
#define             <link linkend="GSASL-VERSION-MAJOR:CAPS">GSASL_VERSION_MAJOR</link>
#define             <link linkend="GSASL-VERSION-MINOR:CAPS">GSASL_VERSION_MINOR</link>
#define             <link linkend="GSASL-VERSION-PATCH:CAPS">GSASL_VERSION_PATCH</link>
#define             <link linkend="GSASL-VERSION-NUMBER:CAPS">GSASL_VERSION_NUMBER</link>
enum                <link linkend="Gsasl-rc">Gsasl_rc</link>;
enum                <link linkend="Gsasl-qop">Gsasl_qop</link>;
enum                <link linkend="Gsasl-cipher">Gsasl_cipher</link>;
enum                <link linkend="Gsasl-saslprep-flags">Gsasl_saslprep_flags</link>;
typedef             <link linkend="Gsasl">Gsasl</link>;
typedef             <link linkend="Gsasl-session">Gsasl_session</link>;
enum                <link linkend="Gsasl-property">Gsasl_property</link>;
<link linkend="int"><returnvalue>int</returnvalue></link>                 (<link linkend="Gsasl-callback-function">*Gsasl_callback_function</link>)          (<parameter><link linkend="Gsasl"><type>Gsasl</type></link> *ctx</parameter>,
                                                         <parameter><link linkend="Gsasl-session"><type>Gsasl_session</type></link> *sctx</parameter>,
                                                         <parameter><link linkend="Gsasl-property"><type>Gsasl_property</type></link> prop</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gsasl-init">gsasl_init</link>                          (<parameter><link linkend="Gsasl"><type>Gsasl</type></link> **ctx</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gsasl-done">gsasl_done</link>                          (<parameter><link linkend="Gsasl"><type>Gsasl</type></link> *ctx</parameter>);
const <link linkend="char"><returnvalue>char</returnvalue></link> *        <link linkend="gsasl-check-version">gsasl_check_version</link>                 (<parameter>const <link linkend="char"><type>char</type></link> *req_version</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gsasl-callback-set">gsasl_callback_set</link>                  (<parameter><link linkend="Gsasl"><type>Gsasl</type></link> *ctx</parameter>,
                                                         <parameter><link linkend="Gsasl-callback-function"><type>Gsasl_callback_function</type></link> cb</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gsasl-callback">gsasl_callback</link>                      (<parameter><link linkend="Gsasl"><type>Gsasl</type></link> *ctx</parameter>,
                                                         <parameter><link linkend="Gsasl-session"><type>Gsasl_session</type></link> *sctx</parameter>,
                                                         <parameter><link linkend="Gsasl-property"><type>Gsasl_property</type></link> prop</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gsasl-callback-hook-set">gsasl_callback_hook_set</link>             (<parameter><link linkend="Gsasl"><type>Gsasl</type></link> *ctx</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *hook</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link> *              <link linkend="gsasl-callback-hook-get">gsasl_callback_hook_get</link>             (<parameter><link linkend="Gsasl"><type>Gsasl</type></link> *ctx</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gsasl-session-hook-set">gsasl_session_hook_set</link>              (<parameter><link linkend="Gsasl-session"><type>Gsasl_session</type></link> *sctx</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *hook</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link> *              <link linkend="gsasl-session-hook-get">gsasl_session_hook_get</link>              (<parameter><link linkend="Gsasl-session"><type>Gsasl_session</type></link> *sctx</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gsasl-property-set">gsasl_property_set</link>                  (<parameter><link linkend="Gsasl-session"><type>Gsasl_session</type></link> *sctx</parameter>,
                                                         <parameter><link linkend="Gsasl-property"><type>Gsasl_property</type></link> prop</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *data</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gsasl-property-set-raw">gsasl_property_set_raw</link>              (<parameter><link linkend="Gsasl-session"><type>Gsasl_session</type></link> *sctx</parameter>,
                                                         <parameter><link linkend="Gsasl-property"><type>Gsasl_property</type></link> prop</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *data</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> len</parameter>);
const <link linkend="char"><returnvalue>char</returnvalue></link> *        <link linkend="gsasl-property-get">gsasl_property_get</link>                  (<parameter><link linkend="Gsasl-session"><type>Gsasl_session</type></link> *sctx</parameter>,
                                                         <parameter><link linkend="Gsasl-property"><type>Gsasl_property</type></link> prop</parameter>);
const <link linkend="char"><returnvalue>char</returnvalue></link> *        <link linkend="gsasl-property-fast">gsasl_property_fast</link>                 (<parameter><link linkend="Gsasl-session"><type>Gsasl_session</type></link> *sctx</parameter>,
                                                         <parameter><link linkend="Gsasl-property"><type>Gsasl_property</type></link> prop</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gsasl-client-mechlist">gsasl_client_mechlist</link>               (<parameter><link linkend="Gsasl"><type>Gsasl</type></link> *ctx</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> **out</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gsasl-client-support-p">gsasl_client_support_p</link>              (<parameter><link linkend="Gsasl"><type>Gsasl</type></link> *ctx</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *name</parameter>);
const <link linkend="char"><returnvalue>char</returnvalue></link> *        <link linkend="gsasl-client-suggest-mechanism">gsasl_client_suggest_mechanism</link>      (<parameter><link linkend="Gsasl"><type>Gsasl</type></link> *ctx</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *mechlist</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gsasl-server-mechlist">gsasl_server_mechlist</link>               (<parameter><link linkend="Gsasl"><type>Gsasl</type></link> *ctx</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> **out</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gsasl-server-support-p">gsasl_server_support_p</link>              (<parameter><link linkend="Gsasl"><type>Gsasl</type></link> *ctx</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *name</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gsasl-client-start">gsasl_client_start</link>                  (<parameter><link linkend="Gsasl"><type>Gsasl</type></link> *ctx</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *mech</parameter>,
                                                         <parameter><link linkend="Gsasl-session"><type>Gsasl_session</type></link> **sctx</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gsasl-server-start">gsasl_server_start</link>                  (<parameter><link linkend="Gsasl"><type>Gsasl</type></link> *ctx</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *mech</parameter>,
                                                         <parameter><link linkend="Gsasl-session"><type>Gsasl_session</type></link> **sctx</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gsasl-step">gsasl_step</link>                          (<parameter><link linkend="Gsasl-session"><type>Gsasl_session</type></link> *sctx</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *input</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> input_len</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> **output</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *output_len</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gsasl-step64">gsasl_step64</link>                        (<parameter><link linkend="Gsasl-session"><type>Gsasl_session</type></link> *sctx</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *b64input</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> **b64output</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gsasl-finish">gsasl_finish</link>                        (<parameter><link linkend="Gsasl-session"><type>Gsasl_session</type></link> *sctx</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gsasl-encode">gsasl_encode</link>                        (<parameter><link linkend="Gsasl-session"><type>Gsasl_session</type></link> *sctx</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *input</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> input_len</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> **output</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *output_len</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gsasl-decode">gsasl_decode</link>                        (<parameter><link linkend="Gsasl-session"><type>Gsasl_session</type></link> *sctx</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *input</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> input_len</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> **output</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *output_len</parameter>);
const <link linkend="char"><returnvalue>char</returnvalue></link> *        <link linkend="gsasl-mechanism-name">gsasl_mechanism_name</link>                (<parameter><link linkend="Gsasl-session"><type>Gsasl_session</type></link> *sctx</parameter>);
const <link linkend="char"><returnvalue>char</returnvalue></link> *        <link linkend="gsasl-strerror">gsasl_strerror</link>                      (<parameter><link linkend="int"><type>int</type></link> err</parameter>);
const <link linkend="char"><returnvalue>char</returnvalue></link> *        <link linkend="gsasl-strerror-name">gsasl_strerror_name</link>                 (<parameter><link linkend="int"><type>int</type></link> err</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gsasl-saslprep">gsasl_saslprep</link>                      (<parameter>const <link linkend="char"><type>char</type></link> *in</parameter>,
                                                         <parameter><link linkend="Gsasl-saslprep-flags"><type>Gsasl_saslprep_flags</type></link> flags</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> **out</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> *stringpreprc</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gsasl-simple-getpass">gsasl_simple_getpass</link>                (<parameter>const <link linkend="char"><type>char</type></link> *filename</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *username</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> **key</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gsasl-base64-to">gsasl_base64_to</link>                     (<parameter>const <link linkend="char"><type>char</type></link> *in</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> inlen</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> **out</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *outlen</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gsasl-base64-from">gsasl_base64_from</link>                   (<parameter>const <link linkend="char"><type>char</type></link> *in</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> inlen</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> **out</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *outlen</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gsasl-nonce">gsasl_nonce</link>                         (<parameter><link linkend="char"><type>char</type></link> *data</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> datalen</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gsasl-random">gsasl_random</link>                        (<parameter><link linkend="char"><type>char</type></link> *data</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> datalen</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gsasl-md5">gsasl_md5</link>                           (<parameter>const <link linkend="char"><type>char</type></link> *in</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> inlen</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *out[16]</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gsasl-hmac-md5">gsasl_hmac_md5</link>                      (<parameter>const <link linkend="char"><type>char</type></link> *key</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> keylen</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *in</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> inlen</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *outhash[16]</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gsasl-sha1">gsasl_sha1</link>                          (<parameter>const <link linkend="char"><type>char</type></link> *in</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> inlen</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *out[20]</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gsasl-hmac-sha1">gsasl_hmac_sha1</link>                     (<parameter>const <link linkend="char"><type>char</type></link> *key</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> keylen</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *in</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> inlen</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *outhash[20]</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gsasl-free">gsasl_free</link>                          (<parameter><link linkend="void"><type>void</type></link> *ptr</parameter>);
</synopsis>
</refsynopsisdiv>

<refsect1 id="gsasl-gsasl.description" role="desc">
<title role="desc.title">Description</title>
<para>
</para>
</refsect1>
<refsect1 id="gsasl-gsasl.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="GSASL-API:CAPS" role="macro">
<title>GSASL_API</title>
<indexterm zone="GSASL-API:CAPS"><primary>GSASL_API</primary></indexterm>
<programlisting>#define             GSASL_API</programlisting>
<para>
</para></refsect2>
<refsect2 id="GSASL-VERSION:CAPS" role="macro">
<title>GSASL_VERSION</title>
<indexterm zone="GSASL-VERSION:CAPS"><primary>GSASL_VERSION</primary></indexterm>
<programlisting># define GSASL_VERSION "1.4.4"
</programlisting>
<para>
Pre-processor symbol with a string that describe the header file
version number.  Used together with <link linkend="gsasl-check-version"><function>gsasl_check_version()</function></link> to
verify header file and run-time library consistency.</para>
</refsect2>
<refsect2 id="GSASL-VERSION-MAJOR:CAPS" role="macro" condition="since:1.1">
<title>GSASL_VERSION_MAJOR</title>
<indexterm zone="GSASL-VERSION-MAJOR:CAPS" role="1.1"><primary>GSASL_VERSION_MAJOR</primary></indexterm>
<programlisting># define GSASL_VERSION_MAJOR 1
</programlisting>
<para>
Pre-processor symbol with a decimal value that describe the major
level of the header file version number.  For example, when the
header version is 1.2.3 this symbol will be 1.</para>
<para role="since">Since 1.1</para></refsect2>
<refsect2 id="GSASL-VERSION-MINOR:CAPS" role="macro" condition="since:1.1">
<title>GSASL_VERSION_MINOR</title>
<indexterm zone="GSASL-VERSION-MINOR:CAPS" role="1.1"><primary>GSASL_VERSION_MINOR</primary></indexterm>
<programlisting># define GSASL_VERSION_MINOR 4
</programlisting>
<para>
Pre-processor symbol with a decimal value that describe the minor
level of the header file version number.  For example, when the
header version is 1.2.3 this symbol will be 2.</para>
<para role="since">Since 1.1</para></refsect2>
<refsect2 id="GSASL-VERSION-PATCH:CAPS" role="macro" condition="since:1.1">
<title>GSASL_VERSION_PATCH</title>
<indexterm zone="GSASL-VERSION-PATCH:CAPS" role="1.1"><primary>GSASL_VERSION_PATCH</primary></indexterm>
<programlisting># define GSASL_VERSION_PATCH 4
</programlisting>
<para>
Pre-processor symbol with a decimal value that describe the patch
level of the header file version number.  For example, when the
header version is 1.2.3 this symbol will be 3.</para>
<para role="since">Since 1.1</para></refsect2>
<refsect2 id="GSASL-VERSION-NUMBER:CAPS" role="macro" condition="since:1.1">
<title>GSASL_VERSION_NUMBER</title>
<indexterm zone="GSASL-VERSION-NUMBER:CAPS" role="1.1"><primary>GSASL_VERSION_NUMBER</primary></indexterm>
<programlisting># define GSASL_VERSION_NUMBER 0x010404
</programlisting>
<para>
Pre-processor symbol with a hexadecimal value describing the
header file version number.  For example, when the header version
is 1.2.3 this symbol will have the value 0x010203.</para>
<para role="since">Since 1.1</para></refsect2>
<refsect2 id="Gsasl-rc" role="enum">
<title>enum Gsasl_rc</title>
<indexterm zone="Gsasl-rc"><primary>Gsasl_rc</primary></indexterm>
<programlisting>  typedef enum
  {
    GSASL_OK = 0,
    GSASL_NEEDS_MORE = 1,
    GSASL_UNKNOWN_MECHANISM = 2,
    GSASL_MECHANISM_CALLED_TOO_MANY_TIMES = 3,
    GSASL_MALLOC_ERROR = 7,
    GSASL_BASE64_ERROR = 8,
    GSASL_CRYPTO_ERROR = 9,
    GSASL_SASLPREP_ERROR = 29,
    GSASL_MECHANISM_PARSE_ERROR = 30,
    GSASL_AUTHENTICATION_ERROR = 31,
    GSASL_INTEGRITY_ERROR = 33,
    GSASL_NO_CLIENT_CODE = 35,
    GSASL_NO_SERVER_CODE = 36,
    GSASL_NO_CALLBACK = 51,
    GSASL_NO_ANONYMOUS_TOKEN = 52,
    GSASL_NO_AUTHID = 53,
    GSASL_NO_AUTHZID = 54,
    GSASL_NO_PASSWORD = 55,
    GSASL_NO_PASSCODE = 56,
    GSASL_NO_PIN = 57,
    GSASL_NO_SERVICE = 58,
    GSASL_NO_HOSTNAME = 59,
    /* Mechanism specific errors. */
    GSASL_GSSAPI_RELEASE_BUFFER_ERROR = 37,
    GSASL_GSSAPI_IMPORT_NAME_ERROR = 38,
    GSASL_GSSAPI_INIT_SEC_CONTEXT_ERROR = 39,
    GSASL_GSSAPI_ACCEPT_SEC_CONTEXT_ERROR = 40,
    GSASL_GSSAPI_UNWRAP_ERROR = 41,
    GSASL_GSSAPI_WRAP_ERROR = 42,
    GSASL_GSSAPI_ACQUIRE_CRED_ERROR = 43,
    GSASL_GSSAPI_DISPLAY_NAME_ERROR = 44,
    GSASL_GSSAPI_UNSUPPORTED_PROTECTION_ERROR = 45,
    GSASL_KERBEROS_V5_INIT_ERROR = 46,
    GSASL_KERBEROS_V5_INTERNAL_ERROR = 47,
    GSASL_SHISHI_ERROR = GSASL_KERBEROS_V5_INTERNAL_ERROR,
    GSASL_SECURID_SERVER_NEED_ADDITIONAL_PASSCODE = 48,
    GSASL_SECURID_SERVER_NEED_NEW_PIN = 49
  } Gsasl_rc;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="Gsasl-qop" role="enum">
<title>enum Gsasl_qop</title>
<indexterm zone="Gsasl-qop"><primary>Gsasl_qop</primary></indexterm>
<programlisting>  typedef enum
  {
    GSASL_QOP_AUTH = 1,
    GSASL_QOP_AUTH_INT = 2,
    GSASL_QOP_AUTH_CONF = 4
  } Gsasl_qop;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="Gsasl-cipher" role="enum">
<title>enum Gsasl_cipher</title>
<indexterm zone="Gsasl-cipher"><primary>Gsasl_cipher</primary></indexterm>
<programlisting>  typedef enum
  {
    GSASL_CIPHER_DES = 1,
    GSASL_CIPHER_3DES = 2,
    GSASL_CIPHER_RC4 = 4,
    GSASL_CIPHER_RC4_40 = 8,
    GSASL_CIPHER_RC4_56 = 16,
    GSASL_CIPHER_AES = 32
  } Gsasl_cipher;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="Gsasl-saslprep-flags" role="enum">
<title>enum Gsasl_saslprep_flags</title>
<indexterm zone="Gsasl-saslprep-flags"><primary>Gsasl_saslprep_flags</primary></indexterm>
<programlisting>  typedef enum
  {
    GSASL_ALLOW_UNASSIGNED = 1
  } Gsasl_saslprep_flags;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="Gsasl" role="typedef">
<title>Gsasl</title>
<indexterm zone="Gsasl"><primary>Gsasl</primary></indexterm>
<programlisting>  typedef struct Gsasl Gsasl;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="Gsasl-session" role="typedef">
<title>Gsasl_session</title>
<indexterm zone="Gsasl-session"><primary>Gsasl_session</primary></indexterm>
<programlisting>  typedef struct Gsasl_session Gsasl_session;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="Gsasl-property" role="enum">
<title>enum Gsasl_property</title>
<indexterm zone="Gsasl-property"><primary>Gsasl_property</primary></indexterm>
<programlisting>  typedef enum
  {
    /* Information properties, e.g., username. */
    GSASL_AUTHID = 1,
    GSASL_AUTHZID = 2,
    GSASL_PASSWORD = 3,
    GSASL_ANONYMOUS_TOKEN = 4,
    GSASL_SERVICE = 5,
    GSASL_HOSTNAME = 6,
    GSASL_GSSAPI_DISPLAY_NAME = 7,
    GSASL_PASSCODE = 8,
    GSASL_SUGGESTED_PIN = 9,
    GSASL_PIN = 10,
    GSASL_REALM = 11,
    GSASL_DIGEST_MD5_HASHED_PASSWORD = 12,
    GSASL_QOPS = 13,
    GSASL_QOP = 14,
    GSASL_SCRAM_ITER = 15,
    GSASL_SCRAM_SALT = 16,
    GSASL_SCRAM_SALTED_PASSWORD = 17,
    /* Server validation callback properties. */
    GSASL_VALIDATE_SIMPLE = 500,
    GSASL_VALIDATE_EXTERNAL = 501,
    GSASL_VALIDATE_ANONYMOUS = 502,
    GSASL_VALIDATE_GSSAPI = 503,
    GSASL_VALIDATE_SECURID = 504
  } Gsasl_property;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="Gsasl-callback-function" role="function" condition="since:0.2.0">
<title>Gsasl_callback_function ()</title>
<indexterm zone="Gsasl-callback-function" role="0.2.0"><primary>Gsasl_callback_function</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 (*Gsasl_callback_function)          (<parameter><link linkend="Gsasl"><type>Gsasl</type></link> *ctx</parameter>,
                                                         <parameter><link linkend="Gsasl-session"><type>Gsasl_session</type></link> *sctx</parameter>,
                                                         <parameter><link linkend="Gsasl-property"><type>Gsasl_property</type></link> prop</parameter>);</programlisting>
<para>
Prototype of function that the application should implement.  Use
<link linkend="gsasl-callback-set"><function>gsasl_callback_set()</function></link> to inform the library about your callback
function.
</para>
<para>
It is called by the SASL library when it need some information
from the application.  Depending on the value of <parameter>prop</parameter>, it should
either set some property (e.g., username or password) using
<link linkend="gsasl-property-set"><function>gsasl_property_set()</function></link>, or it should extract some properties (e.g.,
authentication and authorization identities) using
<link linkend="gsasl-property-fast"><function>gsasl_property_fast()</function></link> and use them to make a policy decision,
perhaps returning GSASL_AUTHENTICATION_ERROR or GSASL_OK
depending on whether the policy permitted the operation.</para>
<variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>libgsasl handle.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sctx</parameter>&#160;:</term>
<listitem><simpara>session handle, may be NULL.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>prop</parameter>&#160;:</term>
<listitem><simpara>enumerated value of Gsasl_property type.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Any valid return code, the interpretation of which
  depend on the <parameter>prop</parameter> value.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.2.0</para></refsect2>
<refsect2 id="gsasl-init" role="function">
<title>gsasl_init ()</title>
<indexterm zone="gsasl-init"><primary>gsasl_init</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gsasl_init                          (<parameter><link linkend="Gsasl"><type>Gsasl</type></link> **ctx</parameter>);</programlisting>
<para>
This functions initializes libgsasl.  The handle pointed to by ctx
is valid for use with other libgsasl functions iff this function is
successful.  It also register all builtin SASL mechanisms, using
<link linkend="gsasl-register"><function>gsasl_register()</function></link>.</para>
<variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>pointer to libgsasl handle.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> GSASL_OK iff successful, otherwise
<link linkend="GSASL-MALLOC-ERROR:CAPS"><literal>GSASL_MALLOC_ERROR</literal></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gsasl-done" role="function">
<title>gsasl_done ()</title>
<indexterm zone="gsasl-done"><primary>gsasl_done</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gsasl_done                          (<parameter><link linkend="Gsasl"><type>Gsasl</type></link> *ctx</parameter>);</programlisting>
<para>
This function destroys a libgsasl handle.  The handle must not be
used with other libgsasl functions after this call.</para>
<variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>libgsasl handle.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gsasl-check-version" role="function">
<title>gsasl_check_version ()</title>
<indexterm zone="gsasl-check-version"><primary>gsasl_check_version</primary></indexterm>
<programlisting>const <link linkend="char"><returnvalue>char</returnvalue></link> *        gsasl_check_version                 (<parameter>const <link linkend="char"><type>char</type></link> *req_version</parameter>);</programlisting>
<para>
Check GNU SASL Library version.
</para>
<para>
See <link linkend="GSASL-VERSION:CAPS"><literal>GSASL_VERSION</literal></link> for a suitable <parameter>req_version</parameter> string.
</para>
<para>
This function is one of few in the library that can be used without
a successful call to <link linkend="gsasl-init"><function>gsasl_init()</function></link>.</para>
<variablelist role="params">
<varlistentry><term><parameter>req_version</parameter>&#160;:</term>
<listitem><simpara>version string to compare with, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Check that the version of the library is at
  minimum the one given as a string in <parameter>req_version</parameter> and return the
  actual version string of the library; return <link linkend="NULL:CAPS"><literal>NULL</literal></link> if the
  condition is not met.  If <link linkend="NULL:CAPS"><literal>NULL</literal></link> is passed to this function no
  check is done and only the version string is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gsasl-callback-set" role="function" condition="since:0.2.0">
<title>gsasl_callback_set ()</title>
<indexterm zone="gsasl-callback-set" role="0.2.0"><primary>gsasl_callback_set</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gsasl_callback_set                  (<parameter><link linkend="Gsasl"><type>Gsasl</type></link> *ctx</parameter>,
                                                         <parameter><link linkend="Gsasl-callback-function"><type>Gsasl_callback_function</type></link> cb</parameter>);</programlisting>
<para>
Store the pointer to the application provided callback in the
library handle.  The callback will be used, via <link linkend="gsasl-callback"><function>gsasl_callback()</function></link>,
by mechanisms to discover various parameters (such as username and
passwords).  The callback function will be called with a
Gsasl_property value indicating the requested behaviour.  For
example, for <link linkend="GSASL-ANONYMOUS-TOKEN:CAPS"><literal>GSASL_ANONYMOUS_TOKEN</literal></link>, the function is expected to
invoke gsasl_property_set(<parameter>CTX</parameter>, <link linkend="GSASL-ANONYMOUS-TOKEN:CAPS"><literal>GSASL_ANONYMOUS_TOKEN</literal></link>, "token")
where "token" is the anonymous token the application wishes the
SASL mechanism to use.  See the manual for the meaning of all
parameters.</para>
<variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>handle received from <link linkend="gsasl-init"><function>gsasl_init()</function></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cb</parameter>&#160;:</term>
<listitem><simpara>pointer to function implemented by application.
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.2.0</para></refsect2>
<refsect2 id="gsasl-callback" role="function" condition="since:0.2.0">
<title>gsasl_callback ()</title>
<indexterm zone="gsasl-callback" role="0.2.0"><primary>gsasl_callback</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gsasl_callback                      (<parameter><link linkend="Gsasl"><type>Gsasl</type></link> *ctx</parameter>,
                                                         <parameter><link linkend="Gsasl-session"><type>Gsasl_session</type></link> *sctx</parameter>,
                                                         <parameter><link linkend="Gsasl-property"><type>Gsasl_property</type></link> prop</parameter>);</programlisting>
<para>
Invoke the application callback.  The <parameter>prop</parameter> value indicate what the
callback is expected to do.  For example, for
<link linkend="GSASL-ANONYMOUS-TOKEN:CAPS"><literal>GSASL_ANONYMOUS_TOKEN</literal></link>, the function is expected to invoke
gsasl_property_set(<parameter>SCTX</parameter>, <link linkend="GSASL-ANONYMOUS-TOKEN:CAPS"><literal>GSASL_ANONYMOUS_TOKEN</literal></link>, "token") where
"token" is the anonymous token the application wishes the SASL
mechanism to use.  See the manual for the meaning of all
parameters.
</para>
<para>
Note that if no callback has been set by the application, but the
obsolete callback interface has been used, this function will
translate the old callback interface into the new.  This interface
should be sufficient to invoke all callbacks, both new and old.</para>
<variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>handle received from <link linkend="gsasl-init"><function>gsasl_init()</function></link>, may be <link linkend="NULL:CAPS"><literal>NULL</literal></link> to derive it
  from <parameter>sctx</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sctx</parameter>&#160;:</term>
<listitem><simpara>session handle.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>prop</parameter>&#160;:</term>
<listitem><simpara>enumerated value of Gsasl_property type.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Returns whatever the application callback return, or
  <link linkend="GSASL-NO-CALLBACK:CAPS"><literal>GSASL_NO_CALLBACK</literal></link> if no application was known.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.2.0</para></refsect2>
<refsect2 id="gsasl-callback-hook-set" role="function" condition="since:0.2.0">
<title>gsasl_callback_hook_set ()</title>
<indexterm zone="gsasl-callback-hook-set" role="0.2.0"><primary>gsasl_callback_hook_set</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gsasl_callback_hook_set             (<parameter><link linkend="Gsasl"><type>Gsasl</type></link> *ctx</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *hook</parameter>);</programlisting>
<para>
Store application specific data in the libgsasl handle.
</para>
<para>
The application data can be later (for instance, inside a callback)
be retrieved by calling <link linkend="gsasl-callback-hook-get"><function>gsasl_callback_hook_get()</function></link>.  This is
normally used by the application to maintain a global state between
the main program and callbacks.</para>
<variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>libgsasl handle.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>hook</parameter>&#160;:</term>
<listitem><simpara>opaque pointer to application specific data.
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.2.0</para></refsect2>
<refsect2 id="gsasl-callback-hook-get" role="function" condition="since:0.2.0">
<title>gsasl_callback_hook_get ()</title>
<indexterm zone="gsasl-callback-hook-get" role="0.2.0"><primary>gsasl_callback_hook_get</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link> *              gsasl_callback_hook_get             (<parameter><link linkend="Gsasl"><type>Gsasl</type></link> *ctx</parameter>);</programlisting>
<para>
Retrieve application specific data from libgsasl handle.
</para>
<para>
The application data is set using <link linkend="gsasl-callback-hook-set"><function>gsasl_callback_hook_set()</function></link>.  This
is normally used by the application to maintain a global state
between the main program and callbacks.</para>
<variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>libgsasl handle.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Returns the application specific data, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.2.0</para></refsect2>
<refsect2 id="gsasl-session-hook-set" role="function" condition="since:0.2.14">
<title>gsasl_session_hook_set ()</title>
<indexterm zone="gsasl-session-hook-set" role="0.2.14"><primary>gsasl_session_hook_set</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gsasl_session_hook_set              (<parameter><link linkend="Gsasl-session"><type>Gsasl_session</type></link> *sctx</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *hook</parameter>);</programlisting>
<para>
Store application specific data in the libgsasl session handle.
</para>
<para>
The application data can be later (for instance, inside a callback)
be retrieved by calling <link linkend="gsasl-session-hook-get"><function>gsasl_session_hook_get()</function></link>.  This is normally
used by the application to maintain a per-session state between the
main program and callbacks.</para>
<variablelist role="params">
<varlistentry><term><parameter>sctx</parameter>&#160;:</term>
<listitem><simpara>libgsasl session handle.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>hook</parameter>&#160;:</term>
<listitem><simpara>opaque pointer to application specific data.
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.2.14</para></refsect2>
<refsect2 id="gsasl-session-hook-get" role="function" condition="since:0.2.14">
<title>gsasl_session_hook_get ()</title>
<indexterm zone="gsasl-session-hook-get" role="0.2.14"><primary>gsasl_session_hook_get</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link> *              gsasl_session_hook_get              (<parameter><link linkend="Gsasl-session"><type>Gsasl_session</type></link> *sctx</parameter>);</programlisting>
<para>
Retrieve application specific data from libgsasl session handle.
</para>
<para>
The application data is set using <link linkend="gsasl-callback-hook-set"><function>gsasl_callback_hook_set()</function></link>.  This
is normally used by the application to maintain a per-session state
between the main program and callbacks.</para>
<variablelist role="params">
<varlistentry><term><parameter>sctx</parameter>&#160;:</term>
<listitem><simpara>libgsasl session handle.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Returns the application specific data, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.2.14</para></refsect2>
<refsect2 id="gsasl-property-set" role="function" condition="since:0.2.0">
<title>gsasl_property_set ()</title>
<indexterm zone="gsasl-property-set" role="0.2.0"><primary>gsasl_property_set</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gsasl_property_set                  (<parameter><link linkend="Gsasl-session"><type>Gsasl_session</type></link> *sctx</parameter>,
                                                         <parameter><link linkend="Gsasl-property"><type>Gsasl_property</type></link> prop</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *data</parameter>);</programlisting>
<para>
Make a copy of <parameter>data</parameter> and store it in the session handle for the
indicated property <parameter>prop</parameter>.
</para>
<para>
You can immediately deallocate <parameter>data</parameter> after calling this function,
without affecting the data stored in the session handle.</para>
<variablelist role="params">
<varlistentry><term><parameter>sctx</parameter>&#160;:</term>
<listitem><simpara>session handle.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>prop</parameter>&#160;:</term>
<listitem><simpara>enumerated value of Gsasl_property type, indicating the
       type of data in <parameter>data</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>zero terminated character string to store.
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.2.0</para></refsect2>
<refsect2 id="gsasl-property-set-raw" role="function" condition="since:0.2.0">
<title>gsasl_property_set_raw ()</title>
<indexterm zone="gsasl-property-set-raw" role="0.2.0"><primary>gsasl_property_set_raw</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gsasl_property_set_raw              (<parameter><link linkend="Gsasl-session"><type>Gsasl_session</type></link> *sctx</parameter>,
                                                         <parameter><link linkend="Gsasl-property"><type>Gsasl_property</type></link> prop</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *data</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> len</parameter>);</programlisting>
<para>
Make a copy of <parameter>len</parameter> sized <parameter>data</parameter> and store a zero terminated version
of it in the session handle for the indicated property <parameter>prop</parameter>.
</para>
<para>
You can immediately deallocate <parameter>data</parameter> after calling this function,
without affecting the data stored in the session handle.
</para>
<para>
Except for the length indicator, this function is identical to
gsasl_property_set.</para>
<variablelist role="params">
<varlistentry><term><parameter>sctx</parameter>&#160;:</term>
<listitem><simpara>session handle.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>prop</parameter>&#160;:</term>
<listitem><simpara>enumerated value of Gsasl_property type, indicating the
       type of data in <parameter>data</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>character string to store.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&#160;:</term>
<listitem><simpara>length of character string to store.
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.2.0</para></refsect2>
<refsect2 id="gsasl-property-get" role="function" condition="since:0.2.0">
<title>gsasl_property_get ()</title>
<indexterm zone="gsasl-property-get" role="0.2.0"><primary>gsasl_property_get</primary></indexterm>
<programlisting>const <link linkend="char"><returnvalue>char</returnvalue></link> *        gsasl_property_get                  (<parameter><link linkend="Gsasl-session"><type>Gsasl_session</type></link> *sctx</parameter>,
                                                         <parameter><link linkend="Gsasl-property"><type>Gsasl_property</type></link> prop</parameter>);</programlisting>
<para>
Retrieve the data stored in the session handle for given property
<parameter>prop</parameter>, possibly invoking the application callback to get the value.
</para>
<para>
The pointer is to live data, and must not be deallocated or
modified in any way.
</para>
<para>
This function will invoke the application callback, using
<link linkend="gsasl-callback"><function>gsasl_callback()</function></link>, when a property value is not known.
</para>
<para>
If no value is known, and no callback is specified or if the
callback fail to return data, and if any obsolete callback
functions has been set by the application, this function will try
to call these obsolete callbacks, and store the returned data as
the corresponding property.  This behaviour of this function will
be removed when the obsolete callback interfaces are removed.</para>
<variablelist role="params">
<varlistentry><term><parameter>sctx</parameter>&#160;:</term>
<listitem><simpara>session handle.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>prop</parameter>&#160;:</term>
<listitem><simpara>enumerated value of Gsasl_property type, indicating the
       type of data in <parameter>data</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Return data for property, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if no value known.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.2.0</para></refsect2>
<refsect2 id="gsasl-property-fast" role="function" condition="since:0.2.0">
<title>gsasl_property_fast ()</title>
<indexterm zone="gsasl-property-fast" role="0.2.0"><primary>gsasl_property_fast</primary></indexterm>
<programlisting>const <link linkend="char"><returnvalue>char</returnvalue></link> *        gsasl_property_fast                 (<parameter><link linkend="Gsasl-session"><type>Gsasl_session</type></link> *sctx</parameter>,
                                                         <parameter><link linkend="Gsasl-property"><type>Gsasl_property</type></link> prop</parameter>);</programlisting>
<para>
Retrieve the data stored in the session handle for given property
<parameter>prop</parameter>.
</para>
<para>
The pointer is to live data, and must not be deallocated or
modified in any way.
</para>
<para>
This function will not invoke the application callback.</para>
<variablelist role="params">
<varlistentry><term><parameter>sctx</parameter>&#160;:</term>
<listitem><simpara>session handle.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>prop</parameter>&#160;:</term>
<listitem><simpara>enumerated value of Gsasl_property type, indicating the
       type of data in <parameter>data</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Return property value, if known, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if no value
  known.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.2.0</para></refsect2>
<refsect2 id="gsasl-client-mechlist" role="function">
<title>gsasl_client_mechlist ()</title>
<indexterm zone="gsasl-client-mechlist"><primary>gsasl_client_mechlist</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gsasl_client_mechlist               (<parameter><link linkend="Gsasl"><type>Gsasl</type></link> *ctx</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> **out</parameter>);</programlisting>
<para>
Return a newly allocated string containing SASL names, separated by
space, of mechanisms supported by the libgsasl client.  <parameter>out</parameter> is
allocated by this function, and it is the responsibility of caller
to deallocate it.</para>
<variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>libgsasl handle.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&#160;:</term>
<listitem><simpara>newly allocated output character array.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Returns <link linkend="GSASL-OK:CAPS"><literal>GSASL_OK</literal></link> if successful, or error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gsasl-client-support-p" role="function">
<title>gsasl_client_support_p ()</title>
<indexterm zone="gsasl-client-support-p"><primary>gsasl_client_support_p</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gsasl_client_support_p              (<parameter><link linkend="Gsasl"><type>Gsasl</type></link> *ctx</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *name</parameter>);</programlisting>
<para>
Decide whether there is client-side support for a specified
mechanism.</para>
<variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>libgsasl handle.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>name of SASL mechanism.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Returns 1 if the libgsasl client supports the named
mechanism, otherwise 0.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gsasl-client-suggest-mechanism" role="function">
<title>gsasl_client_suggest_mechanism ()</title>
<indexterm zone="gsasl-client-suggest-mechanism"><primary>gsasl_client_suggest_mechanism</primary></indexterm>
<programlisting>const <link linkend="char"><returnvalue>char</returnvalue></link> *        gsasl_client_suggest_mechanism      (<parameter><link linkend="Gsasl"><type>Gsasl</type></link> *ctx</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *mechlist</parameter>);</programlisting>
<para>
Given a list of mechanisms, suggest which to use.</para>
<variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>libgsasl handle.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mechlist</parameter>&#160;:</term>
<listitem><simpara>input character array with SASL mechanism names,
  separated by invalid characters (e.g. SPC).
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Returns name of "best" SASL mechanism supported by
  the libgsasl client which is present in the input string, or
  <link linkend="NULL:CAPS"><literal>NULL</literal></link> if no supported mechanism is found.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gsasl-server-mechlist" role="function">
<title>gsasl_server_mechlist ()</title>
<indexterm zone="gsasl-server-mechlist"><primary>gsasl_server_mechlist</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gsasl_server_mechlist               (<parameter><link linkend="Gsasl"><type>Gsasl</type></link> *ctx</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> **out</parameter>);</programlisting>
<para>
Return a newly allocated string containing SASL names, separated by
space, of mechanisms supported by the libgsasl server.  <parameter>out</parameter> is
allocated by this function, and it is the responsibility of caller
to deallocate it.</para>
<variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>libgsasl handle.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&#160;:</term>
<listitem><simpara>newly allocated output character array.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Returns <link linkend="GSASL-OK:CAPS"><literal>GSASL_OK</literal></link> if successful, or error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gsasl-server-support-p" role="function">
<title>gsasl_server_support_p ()</title>
<indexterm zone="gsasl-server-support-p"><primary>gsasl_server_support_p</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gsasl_server_support_p              (<parameter><link linkend="Gsasl"><type>Gsasl</type></link> *ctx</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *name</parameter>);</programlisting>
<para>
Decide whether there is server-side support for a specified
mechanism.</para>
<variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>libgsasl handle.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>name of SASL mechanism.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Returns 1 if the libgsasl server supports the named
mechanism, otherwise 0.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gsasl-client-start" role="function">
<title>gsasl_client_start ()</title>
<indexterm zone="gsasl-client-start"><primary>gsasl_client_start</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gsasl_client_start                  (<parameter><link linkend="Gsasl"><type>Gsasl</type></link> *ctx</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *mech</parameter>,
                                                         <parameter><link linkend="Gsasl-session"><type>Gsasl_session</type></link> **sctx</parameter>);</programlisting>
<para>
This functions initiates a client SASL authentication.  This
function must be called before any other gsasl_client_*() function
is called.</para>
<variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>libgsasl handle.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mech</parameter>&#160;:</term>
<listitem><simpara>name of SASL mechanism.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sctx</parameter>&#160;:</term>
<listitem><simpara>pointer to client handle.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Returns <link linkend="GSASL-OK:CAPS"><literal>GSASL_OK</literal></link> if successful, or error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gsasl-server-start" role="function">
<title>gsasl_server_start ()</title>
<indexterm zone="gsasl-server-start"><primary>gsasl_server_start</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gsasl_server_start                  (<parameter><link linkend="Gsasl"><type>Gsasl</type></link> *ctx</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *mech</parameter>,
                                                         <parameter><link linkend="Gsasl-session"><type>Gsasl_session</type></link> **sctx</parameter>);</programlisting>
<para>
This functions initiates a server SASL authentication.  This
function must be called before any other gsasl_server_*() function
is called.</para>
<variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>libgsasl handle.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mech</parameter>&#160;:</term>
<listitem><simpara>name of SASL mechanism.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sctx</parameter>&#160;:</term>
<listitem><simpara>pointer to server handle.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Returns <link linkend="GSASL-OK:CAPS"><literal>GSASL_OK</literal></link> if successful, or error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gsasl-step" role="function">
<title>gsasl_step ()</title>
<indexterm zone="gsasl-step"><primary>gsasl_step</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gsasl_step                          (<parameter><link linkend="Gsasl-session"><type>Gsasl_session</type></link> *sctx</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *input</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> input_len</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> **output</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *output_len</parameter>);</programlisting>
<para>
Perform one step of SASL authentication.  This reads data from the
other end (from <parameter>input</parameter> and <parameter>input_len</parameter>), processes it (potentially
invoking callbacks to the application), and writes data to server
(into newly allocated variable <parameter>output</parameter> and <parameter>output_len</parameter> that
indicate the length of <parameter>output</parameter>).
</para>
<para>
The contents of the <parameter>output</parameter> buffer is unspecified if this functions
returns anything other than <link linkend="GSASL-OK:CAPS"><literal>GSASL_OK</literal></link> or <link linkend="GSASL-NEEDS-MORE:CAPS"><literal>GSASL_NEEDS_MORE</literal></link>.  If
this function return <link linkend="GSASL-OK:CAPS"><literal>GSASL_OK</literal></link> or <link linkend="GSASL-NEEDS-MORE:CAPS"><literal>GSASL_NEEDS_MORE</literal></link>, however, the
<parameter>output</parameter> buffer is allocated by this function, and it is the
responsibility of caller to deallocate it by calling free
(<parameter>output</parameter>).</para>
<variablelist role="params">
<varlistentry><term><parameter>sctx</parameter>&#160;:</term>
<listitem><simpara>libgsasl session handle.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>input</parameter>&#160;:</term>
<listitem><simpara>input byte array.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>input_len</parameter>&#160;:</term>
<listitem><simpara>size of input byte array.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output</parameter>&#160;:</term>
<listitem><simpara>newly allocated output byte array.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output_len</parameter>&#160;:</term>
<listitem><simpara>pointer to output variable with size of output byte array.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Returns <link linkend="GSASL-OK:CAPS"><literal>GSASL_OK</literal></link> if authenticated terminated
  successfully, <link linkend="GSASL-NEEDS-MORE:CAPS"><literal>GSASL_NEEDS_MORE</literal></link> if more data is needed, or error
  code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gsasl-step64" role="function">
<title>gsasl_step64 ()</title>
<indexterm zone="gsasl-step64"><primary>gsasl_step64</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gsasl_step64                        (<parameter><link linkend="Gsasl-session"><type>Gsasl_session</type></link> *sctx</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *b64input</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> **b64output</parameter>);</programlisting>
<para>
This is a simple wrapper around <link linkend="gsasl-step"><function>gsasl_step()</function></link> that base64 decodes
the input and base64 encodes the output.
</para>
<para>
The contents of the <parameter>b64output</parameter> buffer is unspecified if this
functions returns anything other than <link linkend="GSASL-OK:CAPS"><literal>GSASL_OK</literal></link> or
<link linkend="GSASL-NEEDS-MORE:CAPS"><literal>GSASL_NEEDS_MORE</literal></link>.  If this function return <link linkend="GSASL-OK:CAPS"><literal>GSASL_OK</literal></link> or
<link linkend="GSASL-NEEDS-MORE:CAPS"><literal>GSASL_NEEDS_MORE</literal></link>, however, the <parameter>b64output</parameter> buffer is allocated by
this function, and it is the responsibility of caller to deallocate
it by calling free (<parameter>b64output</parameter>).</para>
<variablelist role="params">
<varlistentry><term><parameter>sctx</parameter>&#160;:</term>
<listitem><simpara>libgsasl client handle.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>b64input</parameter>&#160;:</term>
<listitem><simpara>input base64 encoded byte array.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>b64output</parameter>&#160;:</term>
<listitem><simpara>newly allocated output base64 encoded byte array.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Returns <link linkend="GSASL-OK:CAPS"><literal>GSASL_OK</literal></link> if authenticated terminated
  successfully, <link linkend="GSASL-NEEDS-MORE:CAPS"><literal>GSASL_NEEDS_MORE</literal></link> if more data is needed, or error
  code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gsasl-finish" role="function">
<title>gsasl_finish ()</title>
<indexterm zone="gsasl-finish"><primary>gsasl_finish</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gsasl_finish                        (<parameter><link linkend="Gsasl-session"><type>Gsasl_session</type></link> *sctx</parameter>);</programlisting>
<para>
Destroy a libgsasl client or server handle.  The handle must not be
used with other libgsasl functions after this call.</para>
<variablelist role="params">
<varlistentry><term><parameter>sctx</parameter>&#160;:</term>
<listitem><simpara>libgsasl session handle.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gsasl-encode" role="function">
<title>gsasl_encode ()</title>
<indexterm zone="gsasl-encode"><primary>gsasl_encode</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gsasl_encode                        (<parameter><link linkend="Gsasl-session"><type>Gsasl_session</type></link> *sctx</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *input</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> input_len</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> **output</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *output_len</parameter>);</programlisting>
<para>
Encode data according to negotiated SASL mechanism.  This might mean
that data is integrity or privacy protected.
</para>
<para>
The <parameter>output</parameter> buffer is allocated by this function, and it is the
responsibility of caller to deallocate it by calling free(<parameter>output</parameter>).</para>
<variablelist role="params">
<varlistentry><term><parameter>sctx</parameter>&#160;:</term>
<listitem><simpara>libgsasl session handle.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>input</parameter>&#160;:</term>
<listitem><simpara>input byte array.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>input_len</parameter>&#160;:</term>
<listitem><simpara>size of input byte array.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output</parameter>&#160;:</term>
<listitem><simpara>newly allocated output byte array.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output_len</parameter>&#160;:</term>
<listitem><simpara>size of output byte array.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Returns <link linkend="GSASL-OK:CAPS"><literal>GSASL_OK</literal></link> if encoding was successful,
  otherwise an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gsasl-decode" role="function">
<title>gsasl_decode ()</title>
<indexterm zone="gsasl-decode"><primary>gsasl_decode</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gsasl_decode                        (<parameter><link linkend="Gsasl-session"><type>Gsasl_session</type></link> *sctx</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *input</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> input_len</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> **output</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *output_len</parameter>);</programlisting>
<para>
Decode data according to negotiated SASL mechanism.  This might mean
that data is integrity or privacy protected.
</para>
<para>
The <parameter>output</parameter> buffer is allocated by this function, and it is the
responsibility of caller to deallocate it by calling free(<parameter>output</parameter>).</para>
<variablelist role="params">
<varlistentry><term><parameter>sctx</parameter>&#160;:</term>
<listitem><simpara>libgsasl session handle.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>input</parameter>&#160;:</term>
<listitem><simpara>input byte array.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>input_len</parameter>&#160;:</term>
<listitem><simpara>size of input byte array.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output</parameter>&#160;:</term>
<listitem><simpara>newly allocated output byte array.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>output_len</parameter>&#160;:</term>
<listitem><simpara>size of output byte array.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Returns <link linkend="GSASL-OK:CAPS"><literal>GSASL_OK</literal></link> if encoding was successful,
  otherwise an error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gsasl-mechanism-name" role="function" condition="since:0.2.28">
<title>gsasl_mechanism_name ()</title>
<indexterm zone="gsasl-mechanism-name" role="0.2.28"><primary>gsasl_mechanism_name</primary></indexterm>
<programlisting>const <link linkend="char"><returnvalue>char</returnvalue></link> *        gsasl_mechanism_name                (<parameter><link linkend="Gsasl-session"><type>Gsasl_session</type></link> *sctx</parameter>);</programlisting>
<para>
This function returns the name of the SASL mechanism used in the
session.</para>
<variablelist role="params">
<varlistentry><term><parameter>sctx</parameter>&#160;:</term>
<listitem><simpara>libgsasl session handle.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Returns a zero terminated character array with the
  name of the SASL mechanism, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if not known.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.2.28</para></refsect2>
<refsect2 id="gsasl-strerror" role="function">
<title>gsasl_strerror ()</title>
<indexterm zone="gsasl-strerror"><primary>gsasl_strerror</primary></indexterm>
<programlisting>const <link linkend="char"><returnvalue>char</returnvalue></link> *        gsasl_strerror                      (<parameter><link linkend="int"><type>int</type></link> err</parameter>);</programlisting>
<para>
Convert return code to human readable string explanation of the
reason for the particular error code.
</para>
<para>
This string can be used to output a diagnostic message to the user.
</para>
<para>
This function is one of few in the library that can be used without
a successful call to <link linkend="gsasl-init"><function>gsasl_init()</function></link>.</para>
<variablelist role="params">
<varlistentry><term><parameter>err</parameter>&#160;:</term>
<listitem><simpara>libgsasl error code
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Returns a pointer to a statically allocated string
  containing an explanation of the error code <parameter>err</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gsasl-strerror-name" role="function" condition="since:0.2.29">
<title>gsasl_strerror_name ()</title>
<indexterm zone="gsasl-strerror-name" role="0.2.29"><primary>gsasl_strerror_name</primary></indexterm>
<programlisting>const <link linkend="char"><returnvalue>char</returnvalue></link> *        gsasl_strerror_name                 (<parameter><link linkend="int"><type>int</type></link> err</parameter>);</programlisting>
<para>
Convert return code to human readable string representing the error
code symbol itself.  For example, gsasl_strerror_name(<link linkend="GSASL-OK:CAPS"><literal>GSASL_OK</literal></link>)
returns the string "GSASL_OK".
</para>
<para>
This string can be used to output a diagnostic message to the user.
</para>
<para>
This function is one of few in the library that can be used without
a successful call to <link linkend="gsasl-init"><function>gsasl_init()</function></link>.</para>
<variablelist role="params">
<varlistentry><term><parameter>err</parameter>&#160;:</term>
<listitem><simpara>libgsasl error code
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Returns a pointer to a statically allocated string
  containing a string version of the error code <parameter>err</parameter>, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> if
  the error code is not known.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.2.29</para></refsect2>
<refsect2 id="gsasl-saslprep" role="function">
<title>gsasl_saslprep ()</title>
<indexterm zone="gsasl-saslprep"><primary>gsasl_saslprep</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gsasl_saslprep                      (<parameter>const <link linkend="char"><type>char</type></link> *in</parameter>,
                                                         <parameter><link linkend="Gsasl-saslprep-flags"><type>Gsasl_saslprep_flags</type></link> flags</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> **out</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> *stringpreprc</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>in</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>stringpreprc</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gsasl-simple-getpass" role="function">
<title>gsasl_simple_getpass ()</title>
<indexterm zone="gsasl-simple-getpass"><primary>gsasl_simple_getpass</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gsasl_simple_getpass                (<parameter>const <link linkend="char"><type>char</type></link> *filename</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *username</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> **key</parameter>);</programlisting>
<para>
Retrieve password for user from specified file.  The buffer <parameter>key</parameter>
contain the password if this function is successful.  The caller is
responsible for deallocating it.
</para>
<para>
The file should be on the UoW "MD5 Based Authentication" format,
which means it is in text format with comments denoted by # first
on the line, with user entries looking as "usernameTABpassword".
This function removes CR and LF at the end of lines before
processing.  TAB, CR, and LF denote ASCII values 9, 13, and 10,
respectively.</para>
<variablelist role="params">
<varlistentry><term><parameter>filename</parameter>&#160;:</term>
<listitem><simpara>filename of file containing passwords.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>username</parameter>&#160;:</term>
<listitem><simpara>username string.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>newly allocated output character array.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Return <link linkend="GSASL-OK:CAPS"><literal>GSASL_OK</literal></link> if output buffer contains the
  password, <link linkend="GSASL-AUTHENTICATION-ERROR:CAPS"><literal>GSASL_AUTHENTICATION_ERROR</literal></link> if the user could not be
  found, or other error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gsasl-base64-to" role="function" condition="since:0.2.2">
<title>gsasl_base64_to ()</title>
<indexterm zone="gsasl-base64-to" role="0.2.2"><primary>gsasl_base64_to</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gsasl_base64_to                     (<parameter>const <link linkend="char"><type>char</type></link> *in</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> inlen</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> **out</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *outlen</parameter>);</programlisting>
<para>
Encode data as base64.  The string is zero terminated, and <parameter>outlen</parameter>
holds the length excluding the terminating zero.  The <parameter>out</parameter> buffer
must be deallocated by the caller.</para>
<variablelist role="params">
<varlistentry><term><parameter>in</parameter>&#160;:</term>
<listitem><simpara>input byte array
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>inlen</parameter>&#160;:</term>
<listitem><simpara>size of input byte array
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&#160;:</term>
<listitem><simpara>pointer to newly allocated output byte array
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>outlen</parameter>&#160;:</term>
<listitem><simpara>pointer to size of newly allocated output byte array
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Returns <link linkend="GSASL-OK:CAPS"><literal>GSASL_OK</literal></link> on success, or <link linkend="GSASL-MALLOC-ERROR:CAPS"><literal>GSASL_MALLOC_ERROR</literal></link>
  if input was too large or memory allocation fail.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.2.2</para></refsect2>
<refsect2 id="gsasl-base64-from" role="function" condition="since:0.2.2">
<title>gsasl_base64_from ()</title>
<indexterm zone="gsasl-base64-from" role="0.2.2"><primary>gsasl_base64_from</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gsasl_base64_from                   (<parameter>const <link linkend="char"><type>char</type></link> *in</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> inlen</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> **out</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *outlen</parameter>);</programlisting>
<para>
Decode Base64 data.  The <parameter>out</parameter> buffer must be deallocated by the
caller.</para>
<variablelist role="params">
<varlistentry><term><parameter>in</parameter>&#160;:</term>
<listitem><simpara>input byte array
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>inlen</parameter>&#160;:</term>
<listitem><simpara>size of input byte array
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&#160;:</term>
<listitem><simpara>pointer to newly allocated output byte array
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>outlen</parameter>&#160;:</term>
<listitem><simpara>pointer to size of newly allocated output byte array
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Returns <link linkend="GSASL-OK:CAPS"><literal>GSASL_OK</literal></link> on success, <link linkend="GSASL-BASE64-ERROR:CAPS"><literal>GSASL_BASE64_ERROR</literal></link> if
  input was invalid, and <link linkend="GSASL-MALLOC-ERROR:CAPS"><literal>GSASL_MALLOC_ERROR</literal></link> on memory allocation
  errors.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.2.2</para></refsect2>
<refsect2 id="gsasl-nonce" role="function">
<title>gsasl_nonce ()</title>
<indexterm zone="gsasl-nonce"><primary>gsasl_nonce</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gsasl_nonce                         (<parameter><link linkend="char"><type>char</type></link> *data</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> datalen</parameter>);</programlisting>
<para>
Store unpredictable data of given size in the provided buffer.</para>
<variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>output array to be filled with unpredictable random data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>datalen</parameter>&#160;:</term>
<listitem><simpara>size of output array.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Returns <link linkend="GSASL-OK:CAPS"><literal>GSASL_OK</literal></link> iff successful.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gsasl-random" role="function">
<title>gsasl_random ()</title>
<indexterm zone="gsasl-random"><primary>gsasl_random</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gsasl_random                        (<parameter><link linkend="char"><type>char</type></link> *data</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> datalen</parameter>);</programlisting>
<para>
Store cryptographically strong random data of given size in the
provided buffer.</para>
<variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>output array to be filled with strong random data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>datalen</parameter>&#160;:</term>
<listitem><simpara>size of output array.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Returns <link linkend="GSASL-OK:CAPS"><literal>GSASL_OK</literal></link> iff successful.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gsasl-md5" role="function">
<title>gsasl_md5 ()</title>
<indexterm zone="gsasl-md5"><primary>gsasl_md5</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gsasl_md5                           (<parameter>const <link linkend="char"><type>char</type></link> *in</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> inlen</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *out[16]</parameter>);</programlisting>
<para>
Compute hash of data using MD5.  The <parameter>out</parameter> buffer must be
deallocated by the caller.</para>
<variablelist role="params">
<varlistentry><term><parameter>in</parameter>&#160;:</term>
<listitem><simpara>input character array of data to hash.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>inlen</parameter>&#160;:</term>
<listitem><simpara>length of input character array of data to hash.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&#160;:</term>
<listitem><simpara>newly allocated character array with hash of data.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Returns <link linkend="GSASL-OK:CAPS"><literal>GSASL_OK</literal></link> iff successful.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gsasl-hmac-md5" role="function">
<title>gsasl_hmac_md5 ()</title>
<indexterm zone="gsasl-hmac-md5"><primary>gsasl_hmac_md5</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gsasl_hmac_md5                      (<parameter>const <link linkend="char"><type>char</type></link> *key</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> keylen</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *in</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> inlen</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *outhash[16]</parameter>);</programlisting>
<para>
Compute keyed checksum of data using HMAC-MD5.  The <parameter>outhash</parameter> buffer
must be deallocated by the caller.</para>
<variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>input character array with key to use.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keylen</parameter>&#160;:</term>
<listitem><simpara>length of input character array with key to use.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in</parameter>&#160;:</term>
<listitem><simpara>input character array of data to hash.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>inlen</parameter>&#160;:</term>
<listitem><simpara>length of input character array of data to hash.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>outhash</parameter>&#160;:</term>
<listitem><simpara>newly allocated character array with keyed hash of data.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Returns <link linkend="GSASL-OK:CAPS"><literal>GSASL_OK</literal></link> iff successful.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gsasl-sha1" role="function" condition="since:1.3">
<title>gsasl_sha1 ()</title>
<indexterm zone="gsasl-sha1" role="1.3"><primary>gsasl_sha1</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gsasl_sha1                          (<parameter>const <link linkend="char"><type>char</type></link> *in</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> inlen</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *out[20]</parameter>);</programlisting>
<para>
Compute hash of data using SHA1.  The <parameter>out</parameter> buffer must be
deallocated by the caller.</para>
<variablelist role="params">
<varlistentry><term><parameter>in</parameter>&#160;:</term>
<listitem><simpara>input character array of data to hash.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>inlen</parameter>&#160;:</term>
<listitem><simpara>length of input character array of data to hash.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&#160;:</term>
<listitem><simpara>newly allocated character array with hash of data.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Returns <link linkend="GSASL-OK:CAPS"><literal>GSASL_OK</literal></link> iff successful.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.3</para></refsect2>
<refsect2 id="gsasl-hmac-sha1" role="function" condition="since:1.3">
<title>gsasl_hmac_sha1 ()</title>
<indexterm zone="gsasl-hmac-sha1" role="1.3"><primary>gsasl_hmac_sha1</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gsasl_hmac_sha1                     (<parameter>const <link linkend="char"><type>char</type></link> *key</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> keylen</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *in</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> inlen</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *outhash[20]</parameter>);</programlisting>
<para>
Compute keyed checksum of data using HMAC-SHA1.  The <parameter>outhash</parameter> buffer
must be deallocated by the caller.</para>
<variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>input character array with key to use.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keylen</parameter>&#160;:</term>
<listitem><simpara>length of input character array with key to use.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>in</parameter>&#160;:</term>
<listitem><simpara>input character array of data to hash.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>inlen</parameter>&#160;:</term>
<listitem><simpara>length of input character array of data to hash.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>outhash</parameter>&#160;:</term>
<listitem><simpara>newly allocated character array with keyed hash of data.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Returns <link linkend="GSASL-OK:CAPS"><literal>GSASL_OK</literal></link> iff successful.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.3</para></refsect2>
<refsect2 id="gsasl-free" role="function" condition="since:0.2.19">
<title>gsasl_free ()</title>
<indexterm zone="gsasl-free" role="0.2.19"><primary>gsasl_free</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gsasl_free                          (<parameter><link linkend="void"><type>void</type></link> *ptr</parameter>);</programlisting>
<para>
Invoke free(<parameter>ptr</parameter>) to de-allocate memory pointer.  Typically used on
strings allocated by other libgsasl functions.
</para>
<para>
This is useful on Windows where libgsasl is linked to one CRT and
the application is linked to another CRT.  Then malloc/free will
not use the same heap.  This happens if you build libgsasl using
mingw32 and the application with Visual Studio.</para>
<variablelist role="params">
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>memory pointer
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 0.2.19</para></refsect2>

</refsect1>

</refentry>
