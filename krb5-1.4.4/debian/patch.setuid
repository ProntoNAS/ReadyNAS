=== src/appl/bsd/krcp.c
==================================================================
--- src/appl/bsd/krcp.c	(revision 2463)
+++ src/appl/bsd/krcp.c	(local)
@@ -620,7 +620,9 @@
 				   
 		euid = geteuid();
 		if (euid == 0) {
-		    (void) setuid(0);
+		    if (setuid(0)) {
+			perror("rcp setuid 0"); errs++; exit(errs);
+		    }
 		    if(krb5_seteuid(userid)) {
 			perror("rcp seteuid user"); errs++; exit(errs);
 		    }
@@ -638,11 +640,17 @@
 		  continue;
 		rcmd_stream_init_normal();
 #ifdef HAVE_SETREUID
-		(void) setreuid(0, userid);
+		if (setreuid(0, userid)) {
+		    perror("rcp setreuid 0,user"); errs++; exit(errs);
+		}
 		sink(1, argv+argc-1);
-		(void) setreuid(userid, 0);
+		if (setreuid(userid, 0)) {
+		    perror("rcp setreuid user,0"); errs++; exit(errs);
+		}
 #else
-		(void) setuid(0);
+		if (setuid(0)) {
+		  perror("rcp setuid 0"); errs++; exit(errs);
+		}
 		if(seteuid(userid)) {
 		  perror("rcp seteuid user"); errs++; exit(errs);
 		}
=== src/appl/bsd/krshd.c
==================================================================
--- src/appl/bsd/krshd.c	(revision 2463)
+++ src/appl/bsd/krshd.c	(local)
@@ -1379,9 +1379,15 @@
      * If we're on a system which keeps track of login uids, then
      * set the login uid. 
      */
-    setluid((uid_t) pwd->pw_uid);
+    if (setluid((uid_t) pwd->pw_uid) < 0) {
+	perror("setluid");
+	_exit(1);
+    }
 #endif	/* HAVE_SETLUID */
-    (void) setuid((uid_t)pwd->pw_uid);
+    if (setuid((uid_t)pwd->pw_uid) < 0) {
+	perror("setuid");
+	_exit(1);
+    }
     /* if TZ is set in the parent, drag it in */
     {
       char **findtz = environ;
=== src/appl/bsd/login.c
==================================================================
--- src/appl/bsd/login.c	(revision 2463)
+++ src/appl/bsd/login.c	(local)
@@ -1648,7 +1648,10 @@
 	}
 #endif	/* HAVE_SETLUID */
 #ifdef _IBMR2
-    setuidx(ID_LOGIN, pwd->pw_uid);
+    if (setuidx(ID_LOGIN, pwd->pw_uid) < 0) {
+	perror("setuidx");
+	sleepexit(1);
+    };
 #endif
 
     /* This call MUST succeed */
=== src/appl/bsd/v4rcp.c
==================================================================
--- src/appl/bsd/v4rcp.c	(revision 2463)
+++ src/appl/bsd/v4rcp.c	(local)
@@ -436,7 +436,10 @@
 			kstream_set_buffer_mode (krem, 0);
 #endif /* KERBEROS && !NOENCRYPTION */
 			(void) response();
-			(void) setuid(userid);
+			if (setuid(userid)) {
+			    error("rcp: can't setuid(user)\n");
+			    exit(1);
+			}
 			source(--argc, ++argv);
 			exit(errs);
 
@@ -452,7 +455,10 @@
 				krem = kstream_create_from_fd (rem, 0, 0);
 			kstream_set_buffer_mode (krem, 0);
 #endif /* KERBEROS && !NOENCRYPTION */
-			(void) setuid(userid);
+			if (setuid(userid)) {
+			    error("rcp: can't setuid(user)\n");
+			    exit(1);
+			}
 			sink(--argc, ++argv);
 			exit(errs);
 
=== src/appl/gssftp/ftpd/ftpd.c
==================================================================
--- src/appl/gssftp/ftpd/ftpd.c	(revision 2463)
+++ src/appl/gssftp/ftpd/ftpd.c	(local)
@@ -1360,7 +1360,9 @@
 			goto bad;
 		sleep(tries);
 	}
-	(void) krb5_seteuid((uid_t)pw->pw_uid);
+	if (krb5_seteuid((uid_t)pw->pw_uid)) {
+		fatal("seteuid user");
+	}
 #ifdef IP_TOS
 #ifdef IPTOS_THROUGHPUT
 	on = IPTOS_THROUGHPUT;
@@ -1370,7 +1372,9 @@
 #endif
 	return (fdopen(s, fmode));
 bad:
-	(void) krb5_seteuid((uid_t)pw->pw_uid);
+	if (krb5_seteuid((uid_t)pw->pw_uid)) {
+		fatal("seteuid user");
+	}
 	(void) close(s);
 	return (NULL);
 }
@@ -2179,7 +2183,9 @@
 		(void) krb5_seteuid((uid_t)pw->pw_uid);
 		goto pasv_error;
 	}
-	(void) krb5_seteuid((uid_t)pw->pw_uid);
+	if (krb5_seteuid((uid_t)pw->pw_uid)) {
+		fatal("seteuid user");
+	}
 	len = sizeof(pasv_addr);
 	if (getsockname(pdata, (struct sockaddr *) &pasv_addr, &len) < 0)
 		goto pasv_error;
=== src/clients/ksu/main.c
==================================================================
--- src/clients/ksu/main.c	(revision 2463)
+++ src/clients/ksu/main.c	(local)
@@ -892,8 +892,11 @@
     const char * cc_name;
     struct stat  st_temp;
 
-    krb5_seteuid(0);
-    krb5_seteuid(target_uid);
+    if (krb5_seteuid(0) < 0 || krb5_seteuid(target_uid) < 0) {
+	com_err(prog_name, errno,
+		"while returning to source uid for destroying ccache");
+	exit(1);
+    }
     
     cc_name = krb5_cc_get_name(context, cc);
     if ( ! stat(cc_name, &st_temp)){
=== src/lib/krb4/kuserok.c
==================================================================
--- src/lib/krb4/kuserok.c	(revision 2463)
+++ src/lib/krb4/kuserok.c	(local)
@@ -159,9 +159,12 @@
 	 */
         if(getuid() == 0) {
 	  uid_t old_euid = geteuid();
-	  seteuid(pwd->pw_uid);
+	  if (seteuid(old_euid) < 0)
+	      return NOTOK;
 	  fp = fopen(pbuf, "r");
-	  seteuid(old_euid);	  
+	  if (seteuid(old_euid) < 0)
+	      return NOTOK;
+
 	  if ((fp) == NULL) {
 	    return(NOTOK);
 	  }
