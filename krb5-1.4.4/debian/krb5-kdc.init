#! /bin/sh
### BEGIN INIT INFO
# Provides:             krb5-kdc
# Required-Start:       $local_fs $remote_fs $network $syslog
# Required-Stop:        $local_fs $remote_fs $network $syslog
# Default-Start:        2 3 4 5
# Default-Stop:         S 0 1 6
# Short-Description:    MIT Kerberos KDC
# Description:          Starts, stops, or restarts the MIT Kerberos KDC.  This
#                       daemon responds to ticket requests from Kerberos
#                       clients.
### END INIT INFO

# Author: Sam Hartman <hartmans@mit.edu>
# Author: Russ Allbery <rra@debian.org>
#
# Based on the /etc/init.d/skeleton template as found in initscripts version
# 2.86.ds1-15.

PATH=/usr/sbin:/usr/bin:/sbin:/bin
DESC="Kerberos KDC"
NAME=krb5kdc
DAEMON=/usr/sbin/$NAME
DAEMON_ARGS=""
SCRIPTNAME=/etc/init.d/krb5-kdc

# Exit if the package is not installed.
[ -x "$DAEMON" ] || exit 0

# Exit if no KDC database has been created.
[ -f /etc/krb5kdc/stash ] || exit 0

# Read configuration if it is present.
[ -r /etc/default/krb5-kdc ] && . /etc/default/krb5-kdc

# Get the setting of VERBOSE and other rcS variables.
[ -f /etc/default/rcS ] && . /etc/default/rcS

# Define LSB log functions (requires lsb-base >= 3.0-6).
. /lib/lsb/init-functions

# Set options based on the Kerberos v4 mode (from /etc/default/krb5-kdc).
if [ "x$KRB4_MODE" != x ] ; then
    DAEMON_ARGS="-4$KRB4_MODE $DAEMON_ARGS"
fi

# Return
#   0 if daemon has been started
#   1 if daemon was already running
#   2 if daemon could not be started
do_start_kdc()
{
    start-stop-daemon --start --quiet --startas $DAEMON --name $NAME --test \
        > /dev/null || return 1
    start-stop-daemon --start --quiet --startas $DAEMON --name $NAME \
        -- $DAEMON_ARGS || return 2
}

do_start_krb524d()
{
    start-stop-daemon --start --quiet --startas /usr/sbin/krb524d \
        --name krb524d --test -- -m > /dev/null || return 1
    start-stop-daemon --start --quiet --startas /usr/sbin/krb524d \
        --name krb524d -- -m || return 2
}

# Return
#   0 if daemon has been stopped
#   1 if daemon was already stopped
#   2 if daemon could not be stopped
#   other if a failure occurred
do_stop_kdc()
{
    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --name $NAME
}

do_stop_krb524d()
{
    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --name krb524d
}


case "$1" in 
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
    do_start_kdc
    case "$?" in
      0|1)
        if [ "x$RUN_KRB524D" = "xtrue" ] ; then
            [ "$VERBOSE" != no ] && log_progress_msg "krb524d"
            do_start_krb524d
            case "$?" in
              0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
              2)   [ "$VERBOSE" != no ] && log_end_msg 1 ;;
            esac
        else
            [ "$VERBOSE" != no ] && log_end_msg 0
        fi
        ;;
      2)
        [ "$VERBOSE" != no ] && log_end_msg 1
        ;;
    esac
    ;;

  stop)
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop_kdc
    case "$?" in
      0|1)
        if [ "x$RUN_KRB524D" = "xtrue" ] ; then
            [ "$VERBOSE" != no ] && log_progress_msg "krb524d"
            do_stop_krb524d
            case "$?" in
              0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
              2)   [ "$VERBOSE" != no ] && log_end_msg 1 ;;
            esac
        else
            [ "$VERBOSE" != no ] && log_end_msg 0
        fi
        ;;
      2)
        [ "$VERBOSE" != no ] && log_end_msg 1
        ;;
    esac
    ;;

  restart|force-reload)
    log_daemon_msg "Restarting $DESC" "$NAME"
    do_stop_kdc
    case "$?" in
      0|1)
        do_start_kdc
        case "$?" in
          0)
            if [ "x$RUN_KRB524D" = "xtrue" ] ; then
                log_progress_msg "krb524d"
                do_stop_krb524d
                case "$?" in
                  0|1)
                    do_start_krb524d
                    case "$?" in
                      0) log_end_msg 0 ;;
                      *) log_end_msg 1 ;;
                    esac
                    ;;
                  *)
                    log_end_msg 1
                    ;;
                esac
            else
                log_end_msg 0
            fi
            ;;
          1|2)
            log_end_msg 1
            ;;
        esac
        ;;
      *)
        log_end_msg 1
        ;;
    esac
    ;;

  *)
    echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload}" >&2
    exit 3
    ;;
esac

:
