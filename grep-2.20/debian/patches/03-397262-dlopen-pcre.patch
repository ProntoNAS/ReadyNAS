http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=397262
http://savannah.gnu.org/patch/?7017

Patch by Reuben Thomas <rrt@sc3d.org>
Modified by Aníbal Monsalve Salazar <anibal@debian.org>
Modified by Marco d'Itri <md@Linux.IT>

--- a/src/pcresearch.c
+++ b/src/pcresearch.c
@@ -22,8 +22,14 @@
 #include "search.h"
 #if HAVE_PCRE_H
 # include <pcre.h>
+# ifdef HAVE_DYNAMIC_LIBPCRE
+#  include <dlfcn.h>
+# endif
 #elif HAVE_PCRE_PCRE_H
 # include <pcre/pcre.h>
+# ifdef HAVE_DYNAMIC_LIBPCRE
+#  include <dlfcn.h>
+# endif
 #endif
 
 #if HAVE_LIBPCRE
@@ -40,6 +46,67 @@
 # endif
 #endif
 
+#ifdef HAVE_DYNAMIC_LIBPCRE
+
+# define pcre_compile dl_pcre_compile
+# define pcre_study dl_pcre_study
+# define pcre_exec dl_pcre_exec
+# define pcre_maketables dl_pcre_maketables
+# define pcre_fullinfo dl_pcre_fullinfo
+# define pcre_jit_stack_alloc dl_pcre_jit_stack_alloc
+# define pcre_assign_jit_stack dl_pcre_assign_jit_stack
+
+static pcre *(*pcre_compile)(const char *pattern, int options,
+const char **errptr, int *erroffset,
+                               const unsigned char *tableptr);
+static pcre_extra *(*pcre_study)(const pcre *code, int options,
+                                   const char **errptr);
+static int (*pcre_exec)(const pcre *code, const pcre_extra *extra,
+                          const char *subject, int length, int startoffset,
+                          int options, int *ovector, int ovecsize);
+static const unsigned char *(*pcre_maketables)(void);
+
+static int (*pcre_fullinfo)(const pcre *, const pcre_extra *, int,
+                  void *);
+
+static pcre_jit_stack *(*pcre_jit_stack_alloc)(int, int);
+
+static void (*pcre_assign_jit_stack)(pcre_extra *,
+                  pcre_jit_callback, void *);
+
+static int
+map_pcre(void)
+{
+  void *library;
+
+  if (pcre_maketables)
+    return 1;
+
+  if (!(library = dlopen("libpcre.so.3", RTLD_NOW)))
+    return 0;
+
+  if (!(pcre_compile = dlsym(library, "pcre_compile")))
+    return 0;
+  if (!(pcre_study = dlsym(library, "pcre_study")))
+    return 0;
+  if (!(pcre_exec = dlsym(library, "pcre_exec")))
+    return 0;
+  if (!(pcre_maketables = dlsym(library, "pcre_maketables")))
+    return 0;
+  if (!(pcre_fullinfo = dlsym(library, "pcre_fullinfo")))
+    return 0;
+  if (!(pcre_jit_stack_alloc = dlsym(library, "pcre_jit_stack_alloc")))
+    return 0;
+  if (!(pcre_assign_jit_stack = dlsym(library, "pcre_assign_jit_stack")))
+    return 0;
+
+  return 1;
+}
+
+#else
+#define map_pcre() (1)
+#endif /* HAVE_DYNAMIC_LIBPCRE */
+
 void
 Pcompile (char const *pattern, size_t size)
 {
@@ -59,6 +126,10 @@
   char const *p;
   char const *pnul;
 
+  if (!map_pcre ())
+    error (EXIT_TROUBLE, 0, "%s",
+	   _("The -P option is not supported: libpcre.so.3 is not available"));
+
   /* FIXME: Remove these restrictions.  */
   if (memchr (pattern, '\n', size))
     error (EXIT_TROUBLE, 0, _("the -P option only supports a single pattern"));
