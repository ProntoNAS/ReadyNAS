From d428711f33184ef6581a1d7b9d924775bece00ef Mon Sep 17 00:00:00 2001
From: Justin Maggard <jmaggard@netgear.com>
Date: Wed, 14 Sep 2016 14:59:34 -0700
Subject: [PATCH 12/12] al_eth: fix crash setting wol on down interface

If you try to set WoL configuration after an interface has been brought
down, it may result in a crash because the MDIO interface has already
been torn down but the upper layers don't know about it.  Fortunately
we can just NULL out some pointers to make the upper layers notice.
---
 drivers/net/ethernet/al/al_eth.c | 15 +++++++++++----
 1 file changed, 11 insertions(+), 4 deletions(-)

diff --git a/drivers/net/ethernet/al/al_eth.c b/drivers/net/ethernet/al/al_eth.c
index 4dfb2cb..542455c 100644
--- a/drivers/net/ethernet/al/al_eth.c
+++ b/drivers/net/ethernet/al/al_eth.c
@@ -439,6 +439,7 @@ error:
 	mdiobus_unregister(adapter->mdio_bus);
 	kfree(adapter->mdio_bus->irq);
 	mdiobus_free(adapter->mdio_bus);
+	adapter->mdio_bus = NULL;
 	return -ENODEV;
 }
 
@@ -456,6 +457,7 @@ static void al_eth_mdiobus_teardown(struct al_eth_adapter *adapter)
 	kfree(adapter->mdio_bus->irq);
 	mdiobus_free(adapter->mdio_bus);
 	phy_device_free(adapter->phydev);
+	adapter->mdio_bus = NULL;
 }
 
 static void al_eth_reset_task(struct work_struct *work)
@@ -3850,9 +3852,10 @@ static void al_eth_get_wol(struct net_device *netdev,
 
 	wol->wolopts = adapter->wol;
 
-	if ((adapter) && (adapter->phy_exist) && (adapter->mdio_bus)) {
+	if ((adapter) && (adapter->phy_exist) && (adapter->mdio_bus) &&
+	    (adapter->mdio_bus->state == MDIOBUS_REGISTERED)) {
 		phydev = adapter->mdio_bus->phy_map[adapter->phy_addr];
-		if (phydev) {
+		if (phydev && phydev->drv) {
 			phy_ethtool_get_wol(phydev, wol);
 			wol->supported |= WAKE_PHY;
 			return;
@@ -3867,14 +3870,18 @@ static int al_eth_set_wol(struct net_device *netdev, struct ethtool_wolinfo *wol
 	struct al_eth_adapter *adapter = netdev_priv(netdev);
 	struct phy_device *phydev;
 
+	if (!adapter)
+		return -ENODEV;
+
 	if (wol->wolopts & (WAKE_ARP | WAKE_MAGICSECURE))
 		return -EOPNOTSUPP;
 
 	adapter->wol = wol->wolopts;
 
-	if ((adapter) && (adapter->phy_exist) && (adapter->mdio_bus)) {
+	if ((adapter->phy_exist) && (adapter->mdio_bus) &&
+	    (adapter->mdio_bus->state == MDIOBUS_REGISTERED)) {
 		phydev = adapter->mdio_bus->phy_map[adapter->phy_addr];
-		if (phydev)
+		if (phydev && phydev->drv)
 			return phy_ethtool_set_wol(phydev, wol);
 	}
 
-- 
1.9.1

