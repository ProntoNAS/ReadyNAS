.\" dpkg manual page - dpkg-buildflags(1)
.\"
.\" Copyright Â© 2010-2011 RaphaÃ«l Hertzog <hertzog@debian.org>
.\" Copyright Â© 2011 Kees Cook <kees@debian.org>
.\" Copyright Â© 2011-2014 Guillem Jover <guillem@debian.org>
.\"
.\" This is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation; either version 2 of the License, or
.\" (at your option) any later version.
.\"
.\" This is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with this program.  If not, see <https://www.gnu.org/licenses/>.
.
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH dpkg\-buildflags 1 2014\-09\-04 Debianprojektet Dpkg\-sviten
.SH NAMN
dpkg\-buildflags \- returnerar byggflaggor att använda för att bygga paket
.
.SH SYNOPS
\fBdpkg\-buildflags\fP [\fIflagga\fP...] \fIkommando\fP
.
.SH BESKRIVNING
\fBdpkg\-buildflags\fP är ett verktyg för att hämta kompileringsflaggor att
använda för att bygga Debianpaket.
.
De förvalda flaggorna anges av leverantören, men de kan utökas/överstyras på
flera sätt:
.IP 1.
på hela systemet med \fB/etc/dpkg/buildflags.conf\fP;
.IP 2.
för den nuvarande användaren med \fB$XDG_CONFIG_HOME/dpkg/buildflags.conf\fP
där \fB$XDG_CONFIG_HOME\fP har standardvärdet \fB$HOME/.config\fP;
.IP 3.
temporärt av användaren med miljövariabler (se stycket \fBMILJÖ\fP).
.IP 4.
dynamiskt av paketansvariga med miljövariabler som sätts via \fBdebian/rules\fP
(se stycket \fBMILJÖ\fP).
.P
Konfigurationsfilerna kan innehålla två sorters direktiv:
.TP 
\fBSET\fP\fI flagga värde\fP
Överstyr flaggan \fIflagga\fP till att ha värdet \fIvärde\fP.
.TP 
\fBSTRIP\fP\fI flagga värde\fP
Ta bort alla flaggor som listas i \fIvärde\fP från flaggan som anges i
\fIflagga\fP.
.TP 
\fBAPPEND\fP\fI flagga värde\fP
Utöka flaggan \fIflagga\fP genom att lägga till alternativen som anges i
\fIvärde\fP. Ett blanksteg läggs till före värdet om flaggans nuvarande värde
inte är tomt.
.TP 
\fBPREPEND\fP\fI flagga värde\fP
Utöka flaggan \fIflagga\fP genom att lägga till alternativen som anges i
\fIvärde\fP först. Ett blanksteg läggs till efter värdet om flaggans nuvarande
värde inte är tomt.
.P
Konfigurationsfilerna kan innehålla kommentarer på rader som börjar med ett
nummertecken (#). Även tomma rader ignoreras.
.SH KOMMANDON
.TP 
\fB\-\-dump\fP
Skriv alla kompileringsflaggor och deras värde på standard ut. En flagga
skrivs per rad, avdelade från sitt värde med ett likamedtecken
("\fIflagga\fP=\fIvärde\fP"). Detta är standardåtgärden.
.TP 
\fB\-\-list\fP
Skriv ut listan över flaggor som stöds av den aktuella leverantören (en per
rad). Se stycket \fBFLAGGOR SOM STÖDS\fP för mer information om dem.
.TP 
\fB\-\-status\fP
Visa information som kan vara användbar för att förklara \fBdpkg\-buildflags\fP
beteende: relevanta miljövariabler, aktuell återförsäljare, status för alla
funktionsflaggor. Skriv även ut slutgiltiga kompilatorflaggor och deras
källa.

Detta är tänkt att köras från \fBdebian/rules\fP så att byggloggen innehåller
ett tydligt spår över de använda byggflaggorna. Det kan vara användbart för
att diagnostisera problem rörande dessa.
.TP 
\fB\-\-export=\fP\fIformat\fP
Skriv kommandon som kan användas för att exportera alla kompileringsflaggor
för något specifikt verktyg. Om \fIformat\fP inte anges antas \fBsh\fP. Endast
kompileringsflaggor som börjar med en stor bokstav tas med, andra antas att
inte vara lämpliga för miljön. Format som stöds:
.RS
.TP 
\fBsh\fP
Skalkommandon för att sätta och exportera alla kompileringsflaggor i
miljön. Flaggvärdena citeras så att utdata är redo att utvärderas av ett
skal.
.TP 
\fBcmdline\fP
Argument att sända till byggprogrammets kommandorad för att använda alla
kompileringsflaggor (sedan dpkg 1.17.0). Flaggornas värde citeras enligt
skalsyntax.
.TP 
\fBconfigure\fP
Detta är ett gammalt alias för \fBcmdline\fP.
.TP 
\fBmake\fP
Make\-direktiv för att sätta och exportera alla kompileringsflaggor i
miljön. Utdata kan skrivas till ett makefil\-fragment och utvärderas med ett
\fBinclude\fP\-direktiv.
.RE
.TP 
\fB\-\-get\fP\fI flagga\fP
Skriv ut värdet på flaggan på standard ut. Avslutar med 0 om flaggan är
känd, om inte avslutar den med 1.
.TP 
\fB\-\-origin\fP\fI flagga\fP
Anger ursprunget till flaggan som returneras av \fB\-\-get\fP. Avslutar med 0 om
flaggan är känd, om inte avslutar med 1. Ursprunget kan vara ett av följande
värden:
.RS
.TP 
\fBvendor\fP
originalflagga satt av leverantören returneras;
.TP 
\fBsystem\fP
flaggan är satt/modifierad av systemkonfigurationen;
.TP 
\fBuser\fP
flaggan är satt/modifierad av användarkonfigurationen;
.TP 
\fBenv\fP
flaggan är satt/modifierad av en miljöspecifik konfiguration.
.RE
.TP 
\fB\-\-query\-features\fP \fIarea\fP
Visa funktioner aktiverade för ett givet område. De enda kända områdena är
för närvarande \fBqa\fP, \fBreproducible\fP och \fBhardening\fP, se avsnittet
\fBFUNKTIONSOMRÅDEN\fP för fler detaljer. Avslutar med 0 om området är okänt,
avslutar annars med 1.
.IP
Utdata är på RFC822\-headerformat, med en sektion per funktion. Till exempel:
.IP
.nf
  Feature: pie
  Enabled: no

  Feature: stackprotector
  Enabled: yes
.fi
.TP 
\fB\-\-help\fP
Visar hjälpskärm och avslutar.
.TP 
\fB\-\-version\fP
Visar version och avslutar.
.
.SH "FLAGGOR SOM STÖDS"
.TP 
\fBCFLAGS\fP
Flaggor för C\-kompilatorn. Standardvärdet som satts av leverantören
innehåller \fB\-g\fP och den förvalda optimeringsnivån (vanligtvis \fB\-O2\fP, eller
\fB\-O0\fP om miljövariabeln \fBDEB_BUILD_OPTIONS\fP definierar \fInoopt\fP).
.TP 
\fBCPPFLAGS\fP
Flaggor för C\-förprocesseraren. Förvalt värde: tomt.
.TP 
\fBCXXFLAGS\fP
Flaggor för C++\-kompilatorn. Samma som \fBCFLAGS\fP.
.TP 
\fBOBJCFLAGS\fP
Flaggor för Objective C\-kompilatorn. Samma som \fBCFLAGS\fP.
.TP 
\fBOBJCXXFLAGS\fP
Flaggor för Objective C++\-kompilatorn. Samma som \fBCFLAGS\fP.
.TP 
\fBGCJFLAGS\fP
Flaggor för GNU Java\-kompilatorn (gcj). En delmängd av \fBCFLAGS\fP.
.TP 
\fBFFLAGS\fP
Flaggor för Fortran 7\-kompilatorn. En delmängd av \fBCFLAGS\fP.
.TP 
\fBFCFLAGS\fP
Flaggor för Fortran 9x\-kompilatorn. Samma som \fBCFLAGS\fP.
.TP 
\fBLDFLAGS\fP
Flaggor som sänds till kompilatorn vid länkning av binärer eller delade
objekt (om länkaren anropas direkt måste \fB\-Wl\fP och \fB,\fP tas bort från dessa
flaggor). Standardvärde: tomt.
.PP
Nya flaggor kan komma att läggas till i framtiden om behovet uppstår (till
exempel för att stöda andra språk).
.
.SH FUNKTIONSOMRÅDEN
.P
Varje områdesfunktion kan aktiveras och inaktiveras i områdesvärdet i
miljövariablerna \fBDEB_BUILD_OPTIONS\fP och \fBDEB_BUILD_MAINT_OPTIONS\fP
modifierarna "+" och "\-". Till exempel, för att aktivera
\fBhardening\fP\-funktionen "pie" och inaktivera funktionen "fortify" genom att
ange detta i \fBdebian/rules\fP:
.P
  export DEB_BUILD_MAINT_OPTIONS=hardening=+pie,\-fortify
.P
Den speciella funktionen \fBall\fP kan användas för att aktivera eller
inaktivera alla områdesfunktioner samtidigt. Du kan till exempel inaktivera
allt i området \fBhardening\fP och endast aktivera "format" och "fortify" med:
.P
  export DEB_BUILD_MAINT_OPTIONS=hardening=\-all,+format,+fortify
.
.SS "Kvalitetskontroll (Quality assurance, QA)"
Flera kommandoradsflaggor (beskrivna nedan) kan användas för att göra det
lättare att hitta problem i källkoden eller byggsystemet.
.TP 
\fBbug\fP
Den här inställningen (inaktiverad som standard) lägger till alla
varningsflaggor som på ett pålitligt sätt detekterar problematisk
källkod. Varningarna är ödesdigra.
.TP 
\fBcanary\fP
Den här inställningen (inaktiverad som standard) lägger till overksamma
tjallarflaggor till byggflaggorna, så att byggloggarna kan kontrolleras för
att se hur byggflaggor vidarebefordras för att göra det enklare att hitta
när vanliga byggflagor utesluts. De enda flaggor som stöds är för närvarande
\fBCPPFLAGS\fP, \fBCFLAGS\fP, \fBOBJCFLAGS\fP, \fBCXXFLAGS\fP och \fBOBJCXXFLAGS\fP med
flaggorna satta till \fB\-D__DEB_CANARY_\fP\fIflag\fP_\fIslumpmässigt\-id\fP\fB__\fP, och
\fBLDFLAGS\fP satt till \fB\-Wl,\-z,deb\-canary\-\fP\fIslumpmässigt\-id\fP.
.
.SS Härdning
Du kan använda flera kompileringsflaggor (se detaljer nedan) för att härda
den färdiga binären mot minnesfördärvningsangrepp, eller för att ge
ytterligare varningsmeddelanden under kompileringen. Förutom det som anges
nedan aktiveras dessa som standard för arkitekturer som stöder dem.
.TP 
\fBformat\fP
Inställningen (aktiverad som standard) lägger till \fB\-Wformat
\-Werror=format\-security\fP till \fBCFLAGS\fP, \fBCXXFLAGS\fP, \fBOBJCFLAGS\fP och
\fBOBJCXXFLAGS\fP. Detta kommer att varna om olämplig användning av
formatsträngar, och att misslyckas när formatfunktionerna används på ett
sätt som representerar möjliga säkerhetsproblem. För närvarande varnar detta
om anrop till funktionerna \fBprintf\fP och \fBscanf\fP där formatsträngen inte är
en fast sträng och när det inte finns några formatargument, som i
\fBprintf(foo);\fP istället för \fBprintf("%s", foo);\fP Detta kan vara ett
säkerhetshål om formatsträngen kommer från en obetrodd källa och innehåller
"%n".
.
.TP 
\fBfortify\fP
Inställningen (aktiverad som standard) lägger till  \fB\-D_FORTIFY_SOURCE=2\fP
till \fBCPPFLAGS\fP. Kompilatorn har under kodgenereringen kännedom om en hel
del information om buffertstorlekar (där tillämpligt) och försöker ersätta
osäkra funktionsanrop med obegränsade buffertlängder med längdbegränsade
dito. Det här är speciellt användbart för gammal, skräpig kod. Dessutom
blockeras formatsträngar i skrivbart minne som innehåller "%n". Om ett
program är beroende av en sådan formatsträng måste det gås runt i kod.

Observera att för att den här flaggan ska ha någon funktion måste källkoden
också kompileras med \fB\-O1\fP eller högre. Om miljövariabeln
\fBDEB_BUILD_OPTIONS\fP innehåller \fInoopt\fP kommer stödet för \fBfortify\fP att
inaktiverats, på grund av nya varningar som ges av glibc 2.16 och senare.
.TP 
\fBstackprotector\fP
Inställningen (aktiverad som standard om stackprotectorstrong inte används)
lägger till \fB\-fstack\-protector \-\-param=ssp\-buffer\-size=4\fP till \fBCFLAGS\fP,
\fBCXXFLAGS\fP, \fBOBJCFLAGS\fP, \fBOBJCXXFLAGS\fP, \fBGCJFLAGS\fP, \fBFFLAGS\fP och
\fBFCFLAGS\fP. Detta lägger till säkerhetskontroller mot stacköverskrivningar,
vilket gör att många möjliga kodinjiceringsangrepp istället avbryter
programmet. I det bästa fallet gör det kodinjiceringsangrepp till
överbelastnignsangrepp eller icke\-problem (beroende på programmet).

Den här funktionen kräver länkning mot glibc (eller ett annat bibliotek som
tillhandahåller \fB__stack_chk_fail\fP), så det måste inaktiveras när du bygger
med \fB\-nostdlib\fP eller \fB\-ffreestanding\fP eller liknande.
.
.TP 
\fBstackprotectorstrong\fP
Inställningen (aktiverad som standard) lägger till
\fB\-fstack\-protector\-strong\fP till \fBCFLAGS\fP, \fBCXXFLAGS\fP, \fBOBJCFLAGS\fP,
\fBOBJCXXFLAGS\fP, \fBGCJFLAGS\fP, \fBFFLAGS\fP och \fBFCFLAGS\fP. Detta är en starkare
variant av \fBstackprotector\fP, men utan markanta prestandaminskningar.

Om du inaktiverar \fBstackprotector\fP inaktiveras även denna inställning.

Funktionen har samma krav som \fBstackprotector\fP, och kräver dessutom gcc 4.9
eller senare.
.
.TP 
\fBrelro\fP
Inställningen (aktiverad som standard) lägger till \fB\-Wl,\-z,relro\fP till
\fBLDFLAGS\fP. Vid inläsning av programmet måste länkaren skriva till flera
ELF\-minnessektioner. Den här inställningen flaggar till inläsaren att dessa
sektioner skall göras skrivskyddade innan programmet får kontroll. Detta
skyddar huvudsaklingen mot GOT\-överskrivningsangrepp. Om inställningen
inaktiveras kommer även \fBbindnow\fP att inaktiveras.
.
.TP 
\fBbindnow\fP
Inställningen (inaktiverad som standard) lägger till \fB\-Wl,\-z,bindnow\fP till
\fBLDFLAGS\fP. Vid inläsning av programmet löses alla dynamiska symboler,
vilket gör att hela PLT kan markeras som skrivskyddad (på grund av \fBrelro\fP
ovan). Inställningen kan inte aktiveras om \fBrelro\fP inte är aktiverad.
.
.TP 
\fBpie\fP
Inställningen (inaktiverad som standard) lägger till \fB\-fPIE\fP till
\fBCFLAGS\fP, \fBCXXFLAGS\fP, \fBOBJCFLAGS\fP, \fBOBJCXXFLAGS\fP, \fBGCJFLAGS\fP, \fBFFLAGS\fP
och \fBFCFLAGS\fP, samt \fB\-fPIE \-pie\fP till \fBLDFLAGS\fP. Positionsoberoende
exekverbara program (PIE) behövs för att dra fördel av slumpmässig
adressrymd (ASLR), vilket stöds av vissa versioner av kärnan. Medan ASLR
redan kan användas för datautrymmen i stacken och heap:en (brk och mmap),
måste kodområden först kompileras som positionsoberoende. Delade bibliotek
gör redan detta (\-fPI C), så de drar automatiskt fördel av ASLR medan binära
\&.text\-regioner måste byggas med PIE för att uppnå ASLR. När detta sker är
ROP\-angrepp (Return Oriented Programming) mycket svårare eftersom det inte
finns några statiska platser att studsa från i ett
minnesfördärvningsangrepp.

Detta är inte kompatibelt med \fB\-fPIC\fP så man måste vara försiktig när man
bygger delade objekt.

Eftersom PIE i tillägg implementeras med ett generellt register kan vissa
arkitekturer (huvudsakligen i386) se prestandaförluster upp till 15% i
väldigt textsegment\-tunga programs körning; de flesta körningar ser mindre
än 1%. Arkitekturer med många generella register (t.ex amd64) ser inte en
lika stor värsta falls\-förlust.
.SS Reproducerbarhet
Kompileringsflaggorna som anges nedan kan användas för att göra det lättare
att reproducera byggbarhet eller tillhandahålla ytterligare varningsflaggor
under kompileringen. Förutom det som anges nedan aktiveras dessa som
standard för arkitekturer som stöder dem.
.TP 
\fBtimeless\fP
Inställningen (inaktiverad som standard) lägger till \fB\-Wdate\-time\fP till
\fBCPPFLAGS\fP. Detta ger varningar när makrona \fB__TIME__\fP, \fB__DATE__\fP eller
\fB__TIMESTAMP__\fP används.
.
.SH MILJÖVARIABLER
Det finns två uppsättningar miljövariabler som utför samma operationer, den
första (DEB_\fIflagga\fP_\fIop\fP) bör aldrig användas inuti \fBdebian/rules\fP). Den
är tänkt för användare som vill bygga om källkodspaketet med andra
byggflaggor. Den andra uppsättningen (DEB_\fIflagga\fP_MAINT_\fIop\fP) bör endast
användas i \fBdebian/rules\fP av paketansvariga för att ändra de slutgiltiga
byggflaggorna.
.TP 
\fBDEB_\fP\fIflagga\fP\fB_SET\fP
.TQ
\fBDEB_\fP\fIflagga\fP\fB_MAINT_SET\fP
Denna variabel kan användas för att tvinga fram värdet som returneras för
given \fIflagga\fP.
.TP 
\fBDEB_\fP\fIflagga\fP\fB_STRIP\fP
.TQ
\fBDEB_\fP\fIflagga\fP\fB_MAINT_STRIP\fP
Denna variabel kan användas för att tillhandahålla en blankstegsavdelad
lista med flaggor som kommer att tas bort från uppsättningen flaggor som ges
för given \fIflagga\fP.
.TP 
\fBDEB_\fP\fIflagga\fP\fB_APPEND\fP
.TQ
\fBDEB_\fP\fIflagga\fP\fB_MAINT_APPEND\fP
Denna variabel kan användas för att lägga till ytterligare flaggor till
värdet som returneras för given \fIflagga\fP.
.TP 
\fBDEB_\fP\fIflagga\fP\fB_PREPEND\fP
.TQ
\fBDEB_\fP\fIflagga\fP\fB_MAINT_PREPEND\fP
Denna variabel kan användas för att lägga till ytterligare flaggor först i
värdet som returneras för given \fIflagga\fP.
.TP 
\fBDEB_BUILD_OPTIONS\fP
.TQ
\fBDEB_BUILD_MAINT_OPTIONS\fP
De här variablerna kan användas av en användare eller utvecklare för att slå
av/på olika områdesfunktioner som påverkar byggflaggorna. Variabeln
\fBDEB_BUILD_MAINT_OPTIONS\fP\-variabeln överstyr alla inställningar i
funktionsområden i \fBDEB_BUILD_OPTIONS\fP. Se avsnittet \fBFUNKTIONSOMRÅDEN\fP
för mer information.
.
.SH FILER
.SS Konfigurationsfiler
.TP 
\fB/etc/dpkg/buildflags.conf\fP
Konfigurationsfil för hela systemet.
.TP 
\fB$XDG_CONFIG_HOME/dpkg/buildflags.conf\fP eller \fB$HOME/.config/dpkg/buildflags.conf\fP
Användarens konfigurationsfil.
.SS Paketeringsstöd
.TP 
\fB/usr/share/dpkg/buildflags.mk\fP
Makefile\-klipp som läser in (och eventuellt exporterar) alla flaggor som
stöd av \fBdpkg\-buildflags\fP till variabler (sedan dpkg 1.16.1).
.
.SH EXEMPEL
För att sända byggflaggor till en byggkommandorad i en makefil:
.PP
.RS 4
.nf
$(MAKE) $(shell dpkg\-buildflags \-\-export=cmdline)

\&./configure $(shell dpkg\-buildflags \-\-export=cmdline)
.fi
.RE
.PP
För att sätta byggflaggor i ett skalskript eller skalfragment kan "eval"
användas för att tolka utdata och exportera flaggorna i miljön:
.PP
.RS 4
.nf
eval "$(dpkg\-buildflags \-\-export=sh)" && make
.fi
.RE
.PP
eller för att sätta positionsparametrarna för att sända till ett kommando:
.PP
.RS 4
.nf
eval "set \-\- $(dpkg\-buildflags \-\-export=cmdline)"
for dir in a b c; do (cd $dir && ./configure "$@" && make); done
.fi
.RE
.
.SS "Använda i debian/rules"
Du bör anropa \fBdpkg\-buildflags\fP eller inkludera \fBbuildflags.mk\fP från filen
\fBdebian/rules\fP för att hämta de byggflaggor det är nödvändigt att sända
till byggsystemet. Observera att äldre versioner av \fBdpkg\-buildpackages\fP
(före dpkg 1.16.1) exporterade dessa flaggor automatiskt. Du bör dock inte
bero på detta, eftersom detta förhindrar körning av \fBdebian/rules\fP
manuellt.
.PP
För paket med autoconf\-liknande byggsystem kan du sända relevanta flaggor
direkt till configure eller \fBmake\fP(1), som visas ovan.
.PP
I andra byggsystem, eller om du vill ha mer finkorning styrning av vilka
flaggor som sänds vart, kan du använda \fB\-\-get\fP. Eller så kan du istället
inkludera \fBbuildflags.mk\fP, som tar hand om anropet till \fBdpkg\-buildflags\fP
och lagringen av byggflaggorna i make\-variabler.
.PP
Om du vill exportera alla byggflaggor till miljön (där de kan fångas upp av
ditt byggsystem):
.PP
.RS 4
.nf
DPKG_EXPORT_BUILDFLAGS = 1
include /usr/share/dpkg/buildflags.mk
.fi
.RE
.PP
För extra styrning av vad som expoteras kan du manuellt exportera
variablerna (eftersom inga av dem exporteras som standard):
.PP
.RS 4
.nf
include /usr/share/dpkg/buildflags.mk
export CPPFLAGS CFLAGS LDFLAGS
.fi
.RE
.PP
Du kan naturligtvis dessutom manuellt sända flaggorna till kommandon:
.PP
.RS 4
.nf
include /usr/share/dpkg/buildflags.mk
build\-arch:
\&	$(CC) \-o hello hello.c $(CPPFLAGS) $(CFLAGS) $(LDFLAGS)
.fi
.RE
.SH ÖVERSÄTTNING
Peter Krefting och Daniel Nylander.
