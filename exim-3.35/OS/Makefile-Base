# This file is the basis of the main makefile for Exim and friends. The
# makefile at the top level arranges to build the main makefile by calling
# scripts/Configure-Makefile from within the build directory. This
# concatentates the configuration settings from Local/Makefile and other,
# optional, Local/* files at the front of this file, to create Makefile in the
# build directory.

SHELL      = $(MAKE_SHELL)
SCRIPTS    = ../scripts
EDITME     = ../Local/Makefile
EXIMON_EDITME = ../Local/eximon.conf


# The default target double-checks the existence of $(EDITME) and then arranges
# to touch it if it exists and any of the optional configuration files, which
# depend on the os or the architecture, have been altered. The same sub-target
# does the same thing for the eximon configuration file if it exists. Then
# there is a check that the Makefile (the one built from this file) is
# up-to-date. Then the os-specific source files and the C configuration file
# are set up, and finally it goes to the main Exim target.

all:    $(EDITME) checklocalmake Makefile os.h os.c config.h allexim

checklocalmake:
	@if $(SHELL) $(SCRIPTS)/newer $(EDITME)-$(OSTYPE) $(EDITME) || \
	  $(SHELL) $(SCRIPTS)/newer $(EDITME)-$(ARCHTYPE) $(EDITME) || \
	  $(SHELL) $(SCRIPTS)/newer $(EDITME)-$(OSTYPE)-$(ARCHTYPE) $(EDITME); \
	then \
	  touch $(EDITME); \
	fi
	@if $(SHELL) $(SCRIPTS)/newer $(EXIMON_EDITME)-$(OSTYPE) $(EXIMON_EDITME) || \
	  $(SHELL) $(SCRIPTS)/newer $(EXIMON_EDITME)-$(ARCHTYPE) $(EXIMON_EDITME) || \
	  $(SHELL) $(SCRIPTS)/newer $(EXIMON_EDITME)-$(OSTYPE)-$(ARCHTYPE) $(EXIMON_EDITME); \
	then \
	  if [ -f $(EXIMON_EDITME) ]; then touch $(EXIMON_EDITME); fi \
	fi

$(EDITME):
	@echo " "
	@echo "*** Please create Local/Makefile by copying src/EDITME and making"
	@echo "*** appropriate changes for your site."
	@echo " "
	@false

$(EXIMON_EDITME):
	@echo " "
	@echo "*** Please create Local/eximon.conf by copying exim_monitor/EDITME and making"
	@echo "*** appropriate changes for your site."
	@echo " "
	@test ! -d ../Local && mkdir ../Local
	@false

# Check that the local Makefile is up-to-date

# I (MNB) am commenting this out in this debian package so that it builds
# correctly on some systems that it doesn't otherwise build on. I don't
# understand why this is necessary. Commenting this out is harmless so
# long as it is always built as a debian package and not by using
# make directly.

Makefile: ../OS/Makefile-Base ../OS/Makefile-Default \
          $(SCRIPTS)/Configure $(SCRIPTS)/Configure-Makefile $(EDITME)
#	@echo " "
#	@echo "*** Makefile needs rebuilding"
#	@echo "*** Please run \"make makefile\" at top level"
#	@echo " "
#	@false

# Build (link) the os.h file

os.h:
	$(SHELL) $(SCRIPTS)/Configure-os.h

# Build the os.c file

os.c:   ../src/os.c
	$(SHELL) $(SCRIPTS)/Configure-os.c

# Build the config.h file.

config.h: Makefile buildconfig ../src/config.h.defaults $(EDITME)
	$(SHELL) $(SCRIPTS)/Configure-config.h


# This is the real default target for all the various exim binaries and
# scripts, once the configuring stuff is done.

allexim: config.h $(EXIM_MONITOR) exicyclog exinext exiwhat \
        ../util/exigrep ../util/eximstats ../util/exiqsumm \
        ../util/transport-filter.pl ../util/convert4r3 \
        exim_dbmbuild exim_dumpdb exim_fixdb exim_tidydb exim_lock \
        buildlibident buildlookups builddirectors buildrouters buildtransports \
        buildauths exim


# Targets for special-purpose configuration header builders
buildconfig: buildconfig.c
	$(CC) $(CFLAGS) $(INCLUDE) -o buildconfig buildconfig.c $(LIBS)


# Target for the exicyclog utility script
exicyclog: Makefile config.h ../src/exicyclog.src
	@rm -f exicyclog
	sed -e "s?CONFIGURE_FILE_USE_NODE?$(CONFIGURE_FILE_USE_NODE)?" \
	  -e "s?CONFIGURE_FILE?$(CONFIGURE_FILE)?" \
	  -e "s?BIN_DIRECTORY?$(BIN_DIRECTORY)?" \
	  -e "s?EXICYCLOG_MAX?$(EXICYCLOG_MAX)?" \
	  -e "s?COMPRESS_COMMAND?$(COMPRESS_COMMAND)?" \
	  -e "s?COMPRESS_SUFFIX?$(COMPRESS_SUFFIX)?" \
	  -e "s?CHOWN_COMMAND?$(CHOWN_COMMAND)?" \
	  -e "s?CHGRP_COMMAND?$(CHGRP_COMMAND)?" \
	  -e "s?MV_COMMAND?$(MV_COMMAND)?" \
	  -e "s?RM_COMMAND?$(RM_COMMAND)?" \
	  ../src/exicyclog.src > exicyclog-t
	@mv exicyclog-t exicyclog
	@chmod a+x exicyclog
	@echo ">>> exicyclog script built"; echo ""


# Target for the exinext utility script
exinext: Makefile config.h ../src/exinext.src
	@rm -f exinext
	sed -e "s?CONFIGURE_FILE_USE_NODE?$(CONFIGURE_FILE_USE_NODE)?" \
	  -e "s?CONFIGURE_FILE?$(CONFIGURE_FILE)?" \
	  -e "s?BIN_DIRECTORY?$(BIN_DIRECTORY)?" \
	  ../src/exinext.src > exinext-t
	@mv exinext-t exinext
	@chmod a+x exinext
	@echo ">>> exinext script built"; echo ""

# Target for the exiwhat utility script
exiwhat: Makefile config.h ../src/exiwhat.src
	@rm -f exiwhat
	sed -e "s?CONFIGURE_FILE_USE_NODE?$(CONFIGURE_FILE_USE_NODE)?" \
	  -e "s?CONFIGURE_FILE?$(CONFIGURE_FILE)?" \
	  -e "s?BIN_DIRECTORY?$(BIN_DIRECTORY)?" \
	  -e "s?EXIWHAT_PS_CMD?$(EXIWHAT_PS_CMD)?" \
	  -e "s?EXIWHAT_PS_ARG?$(EXIWHAT_PS_ARG)?" \
	  -e "s?EXIWHAT_KILL_ARG?$(EXIWHAT_KILL_ARG)?" \
	  -e "s?EXIWHAT_EGREP_ARG?$(EXIWHAT_EGREP_ARG)?" \
	  ../src/exiwhat.src > exiwhat-t
	@mv exiwhat-t exiwhat
	@chmod a+x exiwhat
	@echo ">>> exiwhat script built"; echo ""

# Target for the Exim monitor start-up script
eximon: Makefile config.h ../src/eximon.src ../OS/eximon.conf-Default \
          ../Local/eximon.conf
	@rm -f eximon
	$(SHELL) $(SCRIPTS)/Configure-eximon
	sed -e "s?CONFIGURE_FILE_USE_NODE?$(CONFIGURE_FILE_USE_NODE)?" \
	  -e "s?CONFIGURE_FILE?$(CONFIGURE_FILE)?" \
	  -e "s?BIN_DIRECTORY?$(BIN_DIRECTORY)?" \
	  -e "s?BASENAME_COMMAND?$(BASENAME_COMMAND)?" \
	  -e "s?HOSTNAME_COMMAND?$(HOSTNAME_COMMAND)?" \
	  -e "s?X11_LD_LIBRARY?$(X11_LD_LIB)?" \
	  ../src/eximon.src >> eximon
	@echo ">>> eximon script built"; echo ""

# Targets for utilities in the util directory; these are all Perl
# scripts that simply have to get the location of Perl put in them.

../util/exigrep: Makefile ../src/exigrep.src
	@rm -f ../util/exigrep
	sed -e "s?PERL_COMMAND?$(PERL_COMMAND)?" \
	  -e "s?ZCAT_COMMAND?$(ZCAT_COMMAND)?" \
          -e "s?COMPRESS_SUFFIX?$(COMPRESS_SUFFIX)?" \
	  ../src/exigrep.src > ../util/exigrep-t
	@mv ../util/exigrep-t ../util/exigrep
	@chmod a+x ../util/exigrep
	@echo ">>> exigrep script built in util directory"; echo ""

../util/eximstats: Makefile ../src/eximstats.src
	@rm -f ../util/eximstats
	sed -e "s?PERL_COMMAND?$(PERL_COMMAND)?" \
	  ../src/eximstats.src > ../util/eximstats-t
	@mv ../util/eximstats-t ../util/eximstats
	@chmod a+x ../util/eximstats
	@echo ">>> eximstats script built in util directory"; echo ""

../util/exiqsumm: Makefile ../src/exiqsumm.src
	@rm -f ../util/exiqsumm
	sed -e "s?PERL_COMMAND?$(PERL_COMMAND)?" \
	  ../src/exiqsumm.src > ../util/exiqsumm-t
	@mv ../util/exiqsumm-t ../util/exiqsumm
	@chmod a+x ../util/exiqsumm
	@echo ">>> exiqsumm script built in util directory"; echo ""

../util/transport-filter.pl: Makefile ../src/transport-filter.src
	@rm -f ../util/transport-filter.pl
	sed -e "s?PERL_COMMAND?$(PERL_COMMAND)?" \
	  ../src/transport-filter.src > ../util/transport-filter.pl-t
	@mv ../util/transport-filter.pl-t ../util/transport-filter.pl
	@chmod a+x ../util/transport-filter.pl
	@echo ">>> transport-filter.pl script built in util directory"; echo ""

../util/convert4r3: Makefile ../src/convert4r3.src
	@rm -f ../util/convert4r3
	sed -e "s?PERL_COMMAND?$(PERL_COMMAND)?" \
	  ../src/convert4r3.src > ../util/convert4r3-t
	@mv ../util/convert4r3-t ../util/convert4r3
	@chmod a+x ../util/convert4r3
	@echo ">>> convert4r3 script built in util directory"; echo ""


# Targets for final binaries; the main one has a build number which is
# updated each time. We don't bother with that for the auxiliaries.

OBJ_EXIM = accept.o child.o daemon.o dbfn.o debug.o deliver.o direct.o \
        directory.o dns.o drtables.o exim.o expand.o filter.o globals.o \
        header.o host.o log.o match.o moan.o os.o parse.o queue.o \
        readconf.o retry.o rewrite.o \
        route.o search.o smtp_in.o smtp_out.o spool_in.o spool_out.o \
        store.o string.o tls.o tod.o transport.o tree.o verify.o $(EXIM_PERL)

exim:   lookups/lookups.a auths/auths.a \
        directors/directors.a routers/routers.a transports/transports.a \
        $(OBJ_EXIM) version.c
	awk '{ print ($$1+1) }' cnumber.h > cnumber.temp
	/bin/rm -f cnumber.h; mv cnumber.temp cnumber.h
	$(CC) -c $(CFLAGS) $(INCLUDE) $(IPV6_INCLUDE) $(TLS_INCLUDE) version.c
	/bin/rm -f exim
	$(PURIFY) $(CC) -o exim $(LFLAGS) $(OBJ_EXIM) version.o \
	  -lident -lpcre directors/directors.a \
	  routers/routers.a transports/transports.a lookups/lookups.a \
	  auths/auths.a \
	  $(LIBS) $(LIBS_EXIM) $(IPV6_LIBS) $(EXTRALIBS) $(EXTRALIBS_EXIM) \
	  $(DBMLIB) $(LIBRESOLV) $(LOOKUP_LIBS) $(PERL_LIBS) $(TLS_LIBS)
	@if [ x"$(STRIP_COMMAND)" != x"" ]; then $(STRIP_COMMAND) exim; fi
	$(EXIM_CHMOD)
	@echo " "
	@echo ">>> exim binary built"
	@echo " "

# The utility for interrogating/fixing the contents of an exim database

OBJ_FIXDB = exim_fixdb.o dbfn.o dummies.o os.o store.o string.o

exim_fixdb:  $(OBJ_FIXDB)
	$(CC) $(CFLAGS) $(INCLUDE) -o exim_fixdb $(LFLAGS) $(OBJ_FIXDB) \
	  $(LIBS) $(EXTRALIBS) $(DBMLIB)
	@if [ x"$(STRIP_COMMAND)" != x"" ]; then $(STRIP_COMMAND) exim_fixdb; fi
	@echo " "
	@echo ">>> exim_fixdb utility built"
	@echo " "

# The utility for dumping the contents of an exim database

OBJ_DUMPDB = exim_dumpdb.o dbfn.o dummies.o os.o store.o string.o

exim_dumpdb: $(OBJ_DUMPDB)
	$(CC) $(CFLAGS) $(INCLUDE) -o exim_dumpdb $(LFLAGS) $(OBJ_DUMPDB) \
	  $(LIBS) $(EXTRALIBS) $(DBMLIB)
	@if [ x"$(STRIP_COMMAND)" != x"" ]; then $(STRIP_COMMAND) exim_dumpdb; fi
	@echo " "
	@echo ">>> exim_dumpdb utility built"
	@echo " "

# The utility for tidying the contents of an exim database

OBJ_TIDYDB = exim_tidydb.o dbfn.o dummies.o os.o store.o string.o

exim_tidydb: $(OBJ_TIDYDB)
	$(CC) $(CFLAGS) $(INCLUDE) -o exim_tidydb $(LFLAGS) $(OBJ_TIDYDB) \
	  $(LIBS) $(EXTRALIBS) $(DBMLIB)
	@if [ x"$(STRIP_COMMAND)" != x"" ]; then $(STRIP_COMMAND) exim_tidydb; fi
	@echo " "
	@echo ">>> exim_tidydb utility built"
	@echo " "

# The utility for building dbm files

exim_dbmbuild: exim_dbmbuild.c config.h
	$(CC) $(CFLAGS) $(INCLUDE) -o exim_dbmbuild $(LFLAGS) exim_dbmbuild.c \
	  $(LIBS) $(EXTRALIBS) $(DBMLIB)
	@if [ x"$(STRIP_COMMAND)" != x"" ]; then $(STRIP_COMMAND) exim_dbmbuild; fi
	@echo " "
	@echo ">>> exim_dbmbuild utility built"
	@echo " "

# The utility for locking a mailbox while messing around with it

exim_lock: exim_lock.c
	$(CC) $(CFLAGS) $(INCLUDE) -o exim_lock $(LFLAGS) exim_lock.c  \
	  $(LIBS) $(EXTRALIBS)
	@if [ x"$(STRIP_COMMAND)" != x"" ]; then $(STRIP_COMMAND) exim_lock; fi
	@echo " "
	@echo ">>> exim_lock utility built"
	@echo " "

# The X-based Exim monitor program's binary part. There's a macro for cutting
# out the modified TextPop module, because some antique link editors cannot
# handle the fact that it is redefining things that are found later in the
# Xaw library.

MONBIN = em_StripChart.o $(EXIMON_TEXTPOP) em_globals.o em_init.o \
	em_log.o em_main.o em_menu.o em_queue.o em_strip.o \
	em_text.o em_xs.o

OBJ_MONBIN = dummies.o spool_in.o store.o string.o tree.o $(MONBIN)

eximon.bin: $(EXIMON_EDITME) eximon $(OBJ_MONBIN) \
            ../exim_monitor/em_version.c
	$(CC) -o em_version.o -c \
	  $(CFLAGS) $(XINCLUDE) -I. ../exim_monitor/em_version.c
	$(PURIFY) $(CC) -o eximon.bin em_version.o $(LFLAGS) $(XLFLAGS) \
	$(OBJ_MONBIN) -lICE -lXaw -lXmu -lXt -lXext -lX11 -lpcre \
	  $(LIBS) $(LIBS_EXIMON) $(EXTRALIBS) $(EXTRALIBS_EXIMON) -lc
	@if [ x"$(STRIP_COMMAND)" != x"" ]; then $(STRIP_COMMAND) eximon.bin; fi
	@echo " "
	@echo ">>> exim monitor binary built"
	@echo " "


# Compile step for most of the exim modules. HDRS is a list of headers
# which cause everthing to be rebuilt. PHDRS is the same, for the use
# of directors, routers, and transports. I can't find a way of doing this
# in one.

HDRS  =    config.h    exim.h    functions.h    globals.h    macros.h    structs.h
PHDRS = ../config.h ../exim.h ../functions.h ../globals.h ../macros.h ../structs.h

.SUFFIXES: .o .c
.c.o:; $(CC) -c $(CFLAGS) $(INCLUDE) $(IPV6_INCLUDE) $(TLS_INCLUDE) -I. $*.c

# This is the dummy module for use by utilities. It contains functions
# such as log_write() that may be called from bits of Exim that the
# utilities drag in, but which can't be the standard versions.

dummies.o:       dummies.c

# Build instructions for perl.o for when EXIM_PERL is set

perl.o:          $(HDRS) perl.c
	$(PERL_CC) $(PERL_CCOPTS) $(CFLAGS) $(INCLUDE) -c perl.c

# Dependencies for the "ordinary" exim modules

accept.o:        $(HDRS) accept.c
child.o:         $(HDRS) child.c
daemon.o:        $(HDRS) daemon.c
dbfn.o:          $(HDRS) dbfn.c        dbfn.h
debug.o:         $(HDRS) debug.c
deliver.o:       $(HDRS) deliver.c
direct.o:        $(HDRS) direct.c
directory.o:     $(HDRS) directory.c
dns.o:           $(HDRS) dns.c
exim.o:          $(HDRS) exim.c
exim_dumpdb.o:   $(HDRS) exim_dumpdb.c dbfn.h
exim_fixdb.o:    $(HDRS) exim_fixdb.c  dbfn.h
exim_tidydb.o:   $(HDRS) exim_tidydb.c dbfn.h
expand.o:        $(HDRS) expand.c
filter.o:        $(HDRS) filter.c
globals.o:       $(HDRS) globals.c
header.o:        $(HDRS) header.c
host.o:          $(HDRS) host.c
log.o:           $(HDRS) log.c
match.o:         $(HDRS) match.c
moan.o:          $(HDRS) moan.c
os.o:            $(HDRS) os.c
parse.o:         $(HDRS) parse.c
queue.o:         $(HDRS) queue.c
readconf.o:      $(HDRS) readconf.c
retry.o:         $(HDRS) retry.c
rewrite.o:       $(HDRS) rewrite.c
route.o:         $(HDRS) route.c
search.o:        $(HDRS) search.c
smtp_in.o:       $(HDRS) smtp_in.c
smtp_out.o:      $(HDRS) smtp_out.c
spool_in.o:      $(HDRS) spool_in.c
spool_out.o:     $(HDRS) spool_out.c
store.o:         $(HDRS) store.c
string.o:        $(HDRS) string.c
tls.o:           $(HDRS) tls.c
tod.o:           $(HDRS) tod.c
transport.o:     $(HDRS) transport.c
tree.o:          $(HDRS) tree.c
verify.o:        $(HDRS) verify.c

# The module containing tables of available lookups, directors, routers, and
# transports must be rebuilt if any of them are. However, because the makefiles
# for the drivers are always run, we don't actually put the dependencies here,
# because if we do, some version of "make" (e.g. IRIX) insist on rebuilding
# drtables.o even though the .a files haven't in fact been updated. Instead
# it is arranged that the lower-level makefiles remove drtables.o when they
# rebuild the .a files.

drtables.o:      $(HDRS) drtables.c


# The exim monitor's private modules - the sources live in a private
# subdirectory. The final binary combines the private modules with some
# modules from the main exim binary.

em_StripChart.o: ../exim_monitor/em_StripChart.c
em_TextPop.o:    ../exim_monitor/em_TextPop.c
em_globals.o:    ../exim_monitor/em_globals.c ../exim_monitor/em_hdr.h
em_init.o:       ../exim_monitor/em_init.c ../exim_monitor/em_hdr.h
em_log.o:        ../exim_monitor/em_log.c ../exim_monitor/em_hdr.h
em_main.o:       ../exim_monitor/em_main.c ../exim_monitor/em_hdr.h
em_menu.o:       ../exim_monitor/em_menu.c ../exim_monitor/em_hdr.h
em_queue.o:      ../exim_monitor/em_queue.c ../exim_monitor/em_hdr.h
em_strip.o:      ../exim_monitor/em_strip.c ../exim_monitor/em_hdr.h
em_text.o:       ../exim_monitor/em_text.c ../exim_monitor/em_hdr.h
em_xs.o:         ../exim_monitor/em_xs.c ../exim_monitor/em_hdr.h
em_version.o:    ../exim_monitor/em_version.c ../exim_monitor/em_hdr.h
$(MONBIN): $(HDRS)
		 $(CC) -o $@ -c $(CFLAGS) $(XINCLUDE) -I. -I../exim_monitor \
		   ../exim_monitor/`echo $@ | sed 's/o$$/c/'`


# Targets for the various libraries that Exim uses. This coding is tedious,
# because different versions of "make" behave in different ways with regard
# to rebuilding. If these target names are of the form pcre/libpcre.a, for
# example, then a forcing mechanism is required to get them obeyed each time.
# That's fine on Solaris and other systems; the rebuilding of the exim target
# happens only if the libraries are actually rebuilt. However, on IRIX, if
# the target is forced, the exim target gets unnecessarily rebuilt even if
# the .a file is not. Contrariwise, if we use dummy names, they don't interact
# with the building of exim (and eximon.bin), but for libident and libpcre
# exim doesn't get rebuilt when it should. (For the others it does, because
# they remove drtables.o when they rebuild.) To get round this, we forcibly
# remove the binary when it needs to be rebuilt.

# For libident, arrange for -DHAVE_IPV6=1 to be added to the C flags when
# HAVE_IPV6 is set to "yes" or "YES".

buildlibident:
	 @if [ "$(HAVE_IPV6)" = "yes" -o "$(HAVE_IPV6)" = "YES" ] ; then \
	   LIBIDENTMISC=-DHAVE_IPV6=1; \
	 fi ; \
	 cd libident; $(MAKE) SHELL=$(SHELL) AR="$(AR)" $(MFLAGS) RANLIB="$(RANLIB)" CC="$(CC)" \
	   CFLAGS="$(CFLAGS) $(LIBIDENTCFLAGS) $$LIBIDENTMISC" $(LIBIDENTNAME)
	 @if $(SHELL) $(SCRIPTS)/newer libident/libident.a exim; then /bin/rm -f exim; fi
	 @echo " "

# The PCRE regex library. Move the pcretest program to the util directory.

buildpcre:
	 @cd pcre; $(MAKE) SHELL=$(SHELL) AR="$(AR)" $(MFLAGS) CC="$(CC)" \
	   CFLAGS="$(CFLAGS) $(PCRE_CFLAGS)" \
	   RANLIB="$(RANLIB)" HDRS="$(PHDRS)" \
	   INCLUDE="$(INCLUDE) $(IPV6_INCLUDE) $(TLS_INCLUDE)"
	 @if $(SHELL) $(SCRIPTS)/newer pcre/libpcre.a exim; then \
	   /bin/rm -f exim eximon.bin; fi

# The lookups library.

buildlookups:
	 @cd lookups; $(MAKE) SHELL=$(SHELL) AR="$(AR)" $(MFLAGS) CC="$(CC)" CFLAGS="$(CFLAGS)" \
	   RANLIB="$(RANLIB)" HDRS="$(PHDRS)" \
	   INCLUDE="$(INCLUDE) $(IPV6_INCLUDE) $(TLS_INCLUDE) $(LOOKUP_INCLUDE)"; \
	 echo " "

# The directors library.

builddirectors:
	 @cd directors; $(MAKE) SHELL=$(SHELL) AR="$(AR)" $(MFLAGS) CC="$(CC)" CFLAGS="$(CFLAGS)" \
	   RANLIB="$(RANLIB)" HDRS="$(PHDRS)" \
	   INCLUDE="$(INCLUDE) $(IPV6_INCLUDE) $(TLS_INCLUDE)"; \
	 echo " "

# The routers library.

buildrouters:
	 @cd routers; $(MAKE) SHELL=$(SHELL) AR="$(AR)" $(MFLAGS) CC="$(CC)" CFLAGS="$(CFLAGS)" \
	   RANLIB="$(RANLIB)" HDRS="$(PHDRS)" \
	   INCLUDE="$(INCLUDE) $(IPV6_INCLUDE) $(TLS_INCLUDE)"; \
	 echo " "

# The transports library.

buildtransports:
	 @cd transports; $(MAKE) SHELL=$(SHELL) AR="$(AR)" $(MFLAGS) CC="$(CC)" CFLAGS="$(CFLAGS)" \
	   RANLIB="$(RANLIB)" HDRS="$(PHDRS)" \
	   INCLUDE="$(INCLUDE) $(IPV6_INCLUDE) $(TLS_INCLUDE)"; \
	 echo " "

# The library of authorization modules

buildauths:
	 @cd auths; $(MAKE) SHELL=$(SHELL) AR="$(AR)" $(MFLAGS) CC="$(CC)" CFLAGS="$(CFLAGS)" \
	   RANLIB="$(RANLIB)" HDRS="$(PHDRS)" \
	   INCLUDE="$(INCLUDE) $(IPV6_INCLUDE) $(TLS_INCLUDE)"; \
	 echo " "

# The "clean", "install", and "makefile" targets just pass themselves back to
# the main Exim makefile. These targets will be obeyed only if "make" is obeyed
# for them in the build directory.

clean install makefile:; cd ..; $(MAKE) $(MFLAGS) $@

# Targets for building stand-alone testing programs for basic testing of
# some of the building blocks. These are not integrated with the makefile-
# building targets. If you change something that is going to cause the
# makefile to be rebuilt, you must run "make makefile" before running one
# of these.

test_dbfn:   config.h dbfn.c dummies.o globals.o os.o store.o \
	       string.o tod.o version.o
	$(CC) $(CFLAGS) $(INCLUDE) -o test_dbfn $(LFLAGS) -DSTAND_ALONE dbfn.c \
	  dummies.o globals.o os.o store.o string.o \
	  tod.o version.o $(LIBS) $(DBMLIB)
	/bin/rm -f dbfn.o

test_host:   config.h host.c dns.c dummies.o globals.o os.o store.o \
	       string.o tod.o tree.o
	$(CC) $(CFLAGS) $(INCLUDE) -o test_host $(LFLAGS) \
	  -DSTAND_ALONE -DTEST_HOST \
	  host.c dns.c dummies.c globals.o os.o store.o string.o tod.o tree.o \
	  $(LIBS) $(LIBRESOLV)
	/bin/rm -f dummies.o host.o dns.o

test_os:     os.h os.c dummies.o globals.o store.o string.o
	$(CC) $(CFLAGS) $(INCLUDE) -o test_os $(LFLAGS) -DSTAND_ALONE os.c dummies.o \
	  globals.o store.o string.o $(LIBS)
	/bin/rm -f os.o

test_parse:  config.h parse.c dummies.o globals.o \
	     store.o string.o tod.o version.o
	$(CC) $(CFLAGS) $(INCLUDE) -o test_parse $(LFLAGS) -DSTAND_ALONE parse.c \
	  dummies.o globals.o store.o string.o tod.o version.o
	/bin/rm -f parse.o

test_string: config.h string.c dummies.o globals.o \
	       store.o tod.o
	$(CC) $(CFLAGS) $(INCLUDE) -o test_string $(LFLAGS) -DSTAND_ALONE string.c \
	  dummies.o globals.o store.o tod.o $(LIBS)
	/bin/rm -f string.o

# End
