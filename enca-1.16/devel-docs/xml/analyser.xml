<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="libenca-Analyser">
<refmeta>
<refentrytitle role="top_of_page" id="libenca-Analyser.top_of_page">Analyser</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>
  LIBENCA Library
</refmiscinfo>
</refmeta>
<refnamediv>
<refname>Analyser</refname>
<refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv id="libenca-Analyser.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis><link linkend="EncaAnalyser"><returnvalue>EncaAnalyser</returnvalue></link>        <link linkend="enca-analyser-alloc">enca_analyser_alloc</link>                 (<parameter>const <link linkend="char"><type>char</type></link> *langname</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="enca-analyser-free">enca_analyser_free</link>                  (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>);
<link linkend="EncaEncoding"><returnvalue>EncaEncoding</returnvalue></link>        <link linkend="enca-analyse">enca_analyse</link>                        (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> *buffer</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> size</parameter>);
<link linkend="EncaEncoding"><returnvalue>EncaEncoding</returnvalue></link>        <link linkend="enca-analyse-const">enca_analyse_const</link>                  (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> *buffer</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> size</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="enca-errno">enca_errno</link>                          (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>);
const <link linkend="char"><returnvalue>char</returnvalue></link>*         <link linkend="enca-strerror">enca_strerror</link>                       (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> errnum</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="enca-double-utf8-check">enca_double_utf8_check</link>              (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> *buffer</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> size</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>*                <link linkend="enca-double-utf8-get-candidates">enca_double_utf8_get_candidates</link>     (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="enca-set-multibyte">enca_set_multibyte</link>                  (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> multibyte</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="enca-get-multibyte">enca_get_multibyte</link>                  (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="enca-set-interpreted-surfaces">enca_set_interpreted_surfaces</link>       (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> interpreted_surfaces</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="enca-get-interpreted-surfaces">enca_get_interpreted_surfaces</link>       (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="enca-set-ambiguity">enca_set_ambiguity</link>                  (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> ambiguity</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="enca-get-ambiguity">enca_get_ambiguity</link>                  (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="enca-set-filtering">enca_set_filtering</link>                  (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> filtering</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="enca-get-filtering">enca_get_filtering</link>                  (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="enca-set-garbage-test">enca_set_garbage_test</link>               (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> garabage_test</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="enca-get-garbage-test">enca_get_garbage_test</link>               (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="enca-set-termination-strictness">enca_set_termination_strictness</link>     (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> termination_strictness</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="enca-get-termination-strictness">enca_get_termination_strictness</link>     (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="enca-set-significant">enca_set_significant</link>                (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> significant</parameter>);
<link linkend="size-t"><returnvalue>size_t</returnvalue></link>              <link linkend="enca-get-significant">enca_get_significant</link>                (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="enca-set-threshold">enca_set_threshold</link>                  (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>,
                                                         <parameter><link linkend="double"><type>double</type></link> threshold</parameter>);
<link linkend="double"><returnvalue>double</returnvalue></link>              <link linkend="enca-get-threshold">enca_get_threshold</link>                  (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>);
</synopsis>
</refsynopsisdiv>

<refsect1 id="libenca-Analyser.description" role="desc">
<title role="desc.title">Description</title>
<para>
</para>
</refsect1>
<refsect1 id="libenca-Analyser.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="enca-analyser-alloc" role="function">
<title>enca_analyser_alloc ()</title>
<indexterm zone="enca-analyser-alloc"><primary>enca_analyser_alloc</primary></indexterm>
<programlisting><link linkend="EncaAnalyser"><returnvalue>EncaAnalyser</returnvalue></link>        enca_analyser_alloc                 (<parameter>const <link linkend="char"><type>char</type></link> *langname</parameter>);</programlisting>
<para>
Allocates an analyser and initializes it for language <parameter>language</parameter>.
</para>
<para>
The analyser, once crerated, can be used only for language for which it
was initialized.  If you need to detect encodings of texts in more than one
language, you must allocate an analyser for each one.  Note however, an
analyser may occupy a considerable amount of memory (a few hundreds of kB),
so it's generally not a good idea to have several hundreds of them floating
around.
</para>
<para>
<parameter>langname</parameter> is two-letter ISO 639:1989 language code.  Locale names in form
language_territory and ISO-639 English language names also may be accepted
in the future. To be on the safe side, use only names returned by
<link linkend="enca-get-languages"><function>enca_get_languages()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>langname</parameter>&#160;:</term>
<listitem><simpara>Language for which the analyser should be initialized.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The newly created <link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> on success, <link linkend="NULL:CAPS"><type>NULL</type></link> on failure
         (namely when <parameter>langname</parameter> is unknown or otherwise invalid).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="enca-analyser-free" role="function">
<title>enca_analyser_free ()</title>
<indexterm zone="enca-analyser-free"><primary>enca_analyser_free</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                enca_analyser_free                  (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>);</programlisting>
<para>
Frees memory used by <link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> <parameter>analyser</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>analyser</parameter>&#160;:</term>
<listitem><simpara>An analyser to be destroyed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="enca-analyse" role="function">
<title>enca_analyse ()</title>
<indexterm zone="enca-analyse"><primary>enca_analyse</primary></indexterm>
<programlisting><link linkend="EncaEncoding"><returnvalue>EncaEncoding</returnvalue></link>        enca_analyse                        (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> *buffer</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> size</parameter>);</programlisting>
<para>
Analyses <parameter>buffer</parameter> and finds its encoding.
</para>
<para>
The <parameter>buffer</parameter> is checked for 8bit encodings of language for which <parameter>analyser</parameter>
was initialized and for multibyte encodings, mostly independent on language
(unless disabled with <link linkend="enca-set-multibyte"><function>enca_set_multibyte()</function></link>).
</para>
<para>
The contents of <parameter>buffer</parameter> may be (and probably will be) modified during the
analyse.  Use <link linkend="enca-analyse-const"><function>enca_analyse_const()</function></link> instead if this discomforts you.
</para><variablelist role="params">
<varlistentry><term><parameter>analyser</parameter>&#160;:</term>
<listitem><simpara>An analyser initialized for some language.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer</parameter>&#160;:</term>
<listitem><simpara>Buffer to be analysed.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&#160;:</term>
<listitem><simpara>Size of <parameter>buffer</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Encoding of <parameter>buffer</parameter>.  When charset part of return value is
         <link linkend="ENCA-CS-UNKNOWN:CAPS"><type>ENCA_CS_UNKNOWN</type></link>, encoding was not determined.  Check
         <link linkend="enca-errno"><function>enca_errno()</function></link> for reason.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="enca-analyse-const" role="function">
<title>enca_analyse_const ()</title>
<indexterm zone="enca-analyse-const"><primary>enca_analyse_const</primary></indexterm>
<programlisting><link linkend="EncaEncoding"><returnvalue>EncaEncoding</returnvalue></link>        enca_analyse_const                  (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> *buffer</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> size</parameter>);</programlisting>
<para>
Analyses <parameter>buffer</parameter> and finds its encoding.
</para>
<para>
The <parameter>buffer</parameter> is checked for 8bit encodings of language for which <parameter>analyser</parameter>
was initialized and for multibyte encodings, mostly independent on language
(unless disabled with <link linkend="enca-set-multibyte"><function>enca_set_multibyte()</function></link>).
</para>
<para>
This function never modifies <parameter>buffer</parameter> (can be even used with string literal
<parameter>buffer</parameter>) at the expense it's generally slower than <link linkend="enca-analyse"><function>enca_analyse()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>analyser</parameter>&#160;:</term>
<listitem><simpara>An analyser initialized for some language.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer</parameter>&#160;:</term>
<listitem><simpara>Buffer to be analysed.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&#160;:</term>
<listitem><simpara>Size of <parameter>buffer</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Encoding of <parameter>buffer</parameter>.  When charset part of return value is
         <link linkend="ENCA-CS-UNKNOWN:CAPS"><type>ENCA_CS_UNKNOWN</type></link>, encoding was not determined.  Check
         <link linkend="enca-errno"><function>enca_errno()</function></link> for reason.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="enca-errno" role="function">
<title>enca_errno ()</title>
<indexterm zone="enca-errno"><primary>enca_errno</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 enca_errno                          (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>);</programlisting>
<para>
Returns analyser error code.
</para>
<para>
The error code is not modified.  However, any other analyser call i.e.
call to a function taking <parameter>analyser</parameter> as parameter can change the error code.
</para><variablelist role="params">
<varlistentry><term><parameter>analyser</parameter>&#160;:</term>
<listitem><simpara>An analyser.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Error code of reason why last analyser call failed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="enca-strerror" role="function">
<title>enca_strerror ()</title>
<indexterm zone="enca-strerror"><primary>enca_strerror</primary></indexterm>
<programlisting>const <link linkend="char"><returnvalue>char</returnvalue></link>*         enca_strerror                       (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> errnum</parameter>);</programlisting>
<para>
Returns string describing the error code.
</para>
<para>
The returned string must be considered constant and must NOT be freed.
It is however gauranteed not to be modified on invalidated by subsequent
calls to any libenca functions, including <link linkend="enca-strerror"><function>enca_strerror()</function></link>.
</para>
<para>
The analyser error code is not changed for a successful call, and it set
to <link linkend="ENCA-EINVALUE:CAPS"><type>ENCA_EINVALUE</type></link> upon error.
</para><variablelist role="params">
<varlistentry><term><parameter>analyser</parameter>&#160;:</term>
<listitem><simpara>An analyser.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>errnum</parameter>&#160;:</term>
<listitem><simpara>An analyser error code.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> String describing the error code.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="enca-double-utf8-check" role="function">
<title>enca_double_utf8_check ()</title>
<indexterm zone="enca-double-utf8-check"><primary>enca_double_utf8_check</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 enca_double_utf8_check              (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> *buffer</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> size</parameter>);</programlisting>
<para>
Checks buffer for double-UTF-8 encoding.
</para>
<para>
Double-UTF-8 encoding is the result of [errorneous] conversion of UTF-8 text
to UTF-8 again, as if it was in some 8bit charset.  This is quite hard to
recover from.
</para>
<para>
The analayser mostly only determines what language will be assumed,
the rest of this test is independent on the main guessing routines.
When <parameter>buffer</parameter> doesn't containing UTF-8 text, the result is undefined
(namely, false positives are possible).
</para>
<para>
Calling this function when language is `none' has currently no effect.
</para><variablelist role="params">
<varlistentry><term><parameter>analyser</parameter>&#160;:</term>
<listitem><simpara>Analyzer state determinig the language for double-UTF-8 check.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer</parameter>&#160;:</term>
<listitem><simpara>The buffer to be checked [<parameter>size</parameter>].
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&#160;:</term>
<listitem><simpara>The size of <parameter>buffer</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Nonzero, when <parameter>buffer</parameter> probably contains doubly-UTF-8 encoded text.
         More precisely, it returns the number of charsets which are
         possible candidates for source charset.  You can then use
         <link linkend="enca-double-utf8-get-candidates"><function>enca_double_utf8_get_candidates()</function></link> to retrieve the charsets.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="enca-double-utf8-get-candidates" role="function">
<title>enca_double_utf8_get_candidates ()</title>
<indexterm zone="enca-double-utf8-get-candidates"><primary>enca_double_utf8_get_candidates</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>*                enca_double_utf8_get_candidates     (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>);</programlisting>
<para>
Returns array of double-UTF-8 source charset candidates from the last check.
</para>
<para>
The returned array should be freed by caller then no longer needed. Its
is the return value of the preceding <link linkend="enca-double-utf8-check"><function>enca_double_utf8_check()</function></link> call.
</para>
<para>
When called before any double-UTF-8 test has been performed yet or after
and unsuccessfull double-UTF-8 test, it returns NULL, but the result after
an unsuccessfull check should be considered undefined.
</para><variablelist role="params">
<varlistentry><term><parameter>analyser</parameter>&#160;:</term>
<listitem><simpara>Analyzer state for which double-UTF-8 candidates are to be
           returned.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> An array containing charset id's of possible source charsets from
         which the sample was doubly-UTF-8 encoded.  The array may contain
         only one value, but usually enca is not able to decide between
         e.g. ISO-8859-2 and Win1250, thus more candidates are returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="enca-set-multibyte" role="function">
<title>enca_set_multibyte ()</title>
<indexterm zone="enca-set-multibyte"><primary>enca_set_multibyte</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                enca_set_multibyte                  (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> multibyte</parameter>);</programlisting>
<para>
Enables or disables multibyte encoding tests for <parameter>analyser</parameter>.
</para>
<para>
This option is enabled by default.
</para>
<para>
When multibyte encodings are disabled, only 8bit charsets are checked.
Disabling them for language with no 8bit charsets leaves only one thing
<link linkend="enca-analyse"><function>enca_analyse()</function></link> could test: whether the sample is purely 7bit ASCII or not
(the latter leading to analyser failure, of course).
</para>
<para>
Multibyte encoding detection is also affected by
<link linkend="enca-set-termination-strictness"><function>enca_set_termination_strictness()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>analyser</parameter>&#160;:</term>
<listitem><simpara>An analyser.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>multibyte</parameter>&#160;:</term>
<listitem><simpara>Whether multibyte encoding tests should be enabled (nonzero to
            enable, zero to disable).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="enca-get-multibyte" role="function" condition="since:1.3.">
<title>enca_get_multibyte ()</title>
<indexterm zone="enca-get-multibyte" role="1.3."><primary>enca_get_multibyte</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 enca_get_multibyte                  (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>);</programlisting>
<para>
Returns whether <parameter>analyser</parameter> can return multibyte encodings.
</para>
<para>
See <link linkend="enca-set-multibyte"><function>enca_set_multibyte()</function></link> for more detailed description of multibyte
encoding checking.
</para><variablelist role="params">
<varlistentry><term><parameter>analyser</parameter>&#160;:</term>
<listitem><simpara>An analyser.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Nonzero when multibyte encoding are possible, zero otherwise.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.3.</para></refsect2>
<refsect2 id="enca-set-interpreted-surfaces" role="function">
<title>enca_set_interpreted_surfaces ()</title>
<indexterm zone="enca-set-interpreted-surfaces"><primary>enca_set_interpreted_surfaces</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                enca_set_interpreted_surfaces       (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> interpreted_surfaces</parameter>);</programlisting>
<para>
Enables or disables interpeted surfaces tests for <parameter>analyser</parameter>.
</para>
<para>
This option is enabled by default.
</para>
<para>
To allow simple applications which care about charset only and don't want
to wrestle with surfaces, neglecting surface information should not have
serious consequences.  While ignoring EOL type surface is feasible, and
ignoring UCS byteorders may be acceptable in endian-homogenous environment;
ignoring the fact file is Quoted-Printable encoded can have disasterous
consequences.  By disabling this option you can disable surfaces requiring
fundamental reinterpretation of the content, namely <link linkend="ENCA-SURFACE-QP:CAPS"><literal>ENCA_SURFACE_QP</literal></link>
and <link linkend="ENCA-SURFACE-EOL-BIN:CAPS"><literal>ENCA_SURFACE_EOL_BIN</literal></link> (thus probably making <link linkend="enca-analyse"><function>enca_analyse()</function></link> to fail on
such samples).
</para><variablelist role="params">
<varlistentry><term><parameter>analyser</parameter>&#160;:</term>
<listitem><simpara>An analyser.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>interpreted_surfaces</parameter>&#160;:</term>
<listitem><simpara>Whether interpreted surfaces tests should be enabled
                       (nonzero to allow, zero to disallow).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="enca-get-interpreted-surfaces" role="function" condition="since:1.3.">
<title>enca_get_interpreted_surfaces ()</title>
<indexterm zone="enca-get-interpreted-surfaces" role="1.3."><primary>enca_get_interpreted_surfaces</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 enca_get_interpreted_surfaces       (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>);</programlisting>
<para>
Returns whether <parameter>analyser</parameter> allows interpreted surfaces.
</para>
<para>
See <link linkend="enca-set-interpreted-surfaces"><function>enca_set_interpreted_surfaces()</function></link> for more detailed description of
interpreted surfaces.
</para><variablelist role="params">
<varlistentry><term><parameter>analyser</parameter>&#160;:</term>
<listitem><simpara>An analyser.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Nonzero when interpreted surfaces are possible, zero otherwise.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.3.</para></refsect2>
<refsect2 id="enca-set-ambiguity" role="function">
<title>enca_set_ambiguity ()</title>
<indexterm zone="enca-set-ambiguity"><primary>enca_set_ambiguity</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                enca_set_ambiguity                  (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> ambiguity</parameter>);</programlisting>
<para>
Enables or disables ambiguous mode for <parameter>analyser</parameter>.
</para>
<para>
This option is disabled by default.
</para>
<para>
In ambiguous mode some result is returned even when the charset cannot be
determined uniquely, provided that sample contains only characters which
have the same meaning in all charsets under consideration.
</para><variablelist role="params">
<varlistentry><term><parameter>analyser</parameter>&#160;:</term>
<listitem><simpara>An analyser.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ambiguity</parameter>&#160;:</term>
<listitem><simpara>Whether result can be ambiguous (nonzero to allow, zero to
            disallow).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="enca-get-ambiguity" role="function" condition="since:1.3.">
<title>enca_get_ambiguity ()</title>
<indexterm zone="enca-get-ambiguity" role="1.3."><primary>enca_get_ambiguity</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 enca_get_ambiguity                  (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>);</programlisting>
<para>
Returns whether <parameter>analyser</parameter> can return ambiguous results.
</para>
<para>
See <link linkend="enca-set-ambiguity"><function>enca_set_ambiguity()</function></link> for more detailed description of ambiguous results.
</para><variablelist role="params">
<varlistentry><term><parameter>analyser</parameter>&#160;:</term>
<listitem><simpara>An analyser.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Nonzero when ambiguous results are allowed, zero otherwise.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.3.</para></refsect2>
<refsect2 id="enca-set-filtering" role="function">
<title>enca_set_filtering ()</title>
<indexterm zone="enca-set-filtering"><primary>enca_set_filtering</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                enca_set_filtering                  (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> filtering</parameter>);</programlisting>
<para>
Enables or disables filters for <parameter>analyser</parameter>.
</para>
<para>
This option is enabled by default.
</para>
<para>
Various filters are used to filter out block of binary noise and box-drawing
characters that could otherwise confuse enca.  In cases this is unwanted,
you can disable them by setting this option to zero.
</para><variablelist role="params">
<varlistentry><term><parameter>analyser</parameter>&#160;:</term>
<listitem><simpara>An analyser.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>filtering</parameter>&#160;:</term>
<listitem><simpara>Whether filters should be enabled (nonzero to enable, zero to
            disable).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="enca-get-filtering" role="function" condition="since:1.3.">
<title>enca_get_filtering ()</title>
<indexterm zone="enca-get-filtering" role="1.3."><primary>enca_get_filtering</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 enca_get_filtering                  (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>);</programlisting>
<para>
Returns whether <parameter>analyser</parameter> has filtering enabled.
</para>
<para>
See <link linkend="enca-set-filtering"><function>enca_set_filtering()</function></link> for more detailed description of filtering.
</para><variablelist role="params">
<varlistentry><term><parameter>analyser</parameter>&#160;:</term>
<listitem><simpara>An analyser.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Nonzero when filtering is enabled, zero otherwise.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.3.</para></refsect2>
<refsect2 id="enca-set-garbage-test" role="function">
<title>enca_set_garbage_test ()</title>
<indexterm zone="enca-set-garbage-test"><primary>enca_set_garbage_test</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                enca_set_garbage_test               (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> garabage_test</parameter>);</programlisting>
<para>
Enables or disables garbage test for <parameter>analyser</parameter>.
</para>
<para>
This option is enabled by default.
</para>
<para>
To prevent white noise (and almost-white noise) from being accidentally
detected as some charset, a garbage test is used.  In cases this is
unwanted, you can disable is by setting this option to zero.
</para><variablelist role="params">
<varlistentry><term><parameter>analyser</parameter>&#160;:</term>
<listitem><simpara>An analyser.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>garabage_test</parameter>&#160;:</term>
<listitem><simpara>Whether garbage test should be allowed (nonzero to enable,
                nzero to disable).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="enca-get-garbage-test" role="function" condition="since:1.3.">
<title>enca_get_garbage_test ()</title>
<indexterm zone="enca-get-garbage-test" role="1.3."><primary>enca_get_garbage_test</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 enca_get_garbage_test               (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>);</programlisting>
<para>
Returns whether <parameter>analyser</parameter> has garbage test enabled.
</para>
<para>
See <link linkend="enca-set-garbage-test"><function>enca_set_garbage_test()</function></link> for more detailed description of garbage test.
</para><variablelist role="params">
<varlistentry><term><parameter>analyser</parameter>&#160;:</term>
<listitem><simpara>An analyser.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Nonzero when garbage test is enabled, zero otherwise.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.3.</para></refsect2>
<refsect2 id="enca-set-termination-strictness" role="function">
<title>enca_set_termination_strictness ()</title>
<indexterm zone="enca-set-termination-strictness"><primary>enca_set_termination_strictness</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                enca_set_termination_strictness     (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> termination_strictness</parameter>);</programlisting>
<para>
Enables or disables requiring multibyte sequences to be terminated correctly
at the end of sample.
</para>
<para>
This option is enabled by default.
</para>
<para>
The sample given to <link linkend="enca-analyse"><function>enca_analyse()</function></link> generally may not be a complete text
(e.g. for efficiency reasons).  As a result, it may end in the middle of a
multibyte sequence.  In this case, you should disable this option to
prevent rejecting some charset just because the sample don't terminate
correctly.  On the other hand, when given sample contains whole text, you
should always enable this option to assure correctness of the result.
</para>
<para>
Note this option does NOT affect fixed character size encodings, like UCS-2
and UCS-4; sample is never assumed to contain UCS-2 text when its size is
not even (and similarly for UCS-4).
</para><variablelist role="params">
<varlistentry><term><parameter>analyser</parameter>&#160;:</term>
<listitem><simpara>An analyser.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>termination_strictness</parameter>&#160;:</term>
<listitem><simpara>Whether multibyte sequences are required to be
                         terminated correctly at the end of sample
                         (nonzero to require, zero to relax).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="enca-get-termination-strictness" role="function" condition="since:1.3.">
<title>enca_get_termination_strictness ()</title>
<indexterm zone="enca-get-termination-strictness" role="1.3."><primary>enca_get_termination_strictness</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 enca_get_termination_strictness     (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>);</programlisting>
<para>
Returns whether <parameter>analyser</parameter> requires strict termination.
</para>
<para>
See <link linkend="enca-set-termination-strictness"><function>enca_set_termination_strictness()</function></link> for more detailed description of
termination strictness.
</para><variablelist role="params">
<varlistentry><term><parameter>analyser</parameter>&#160;:</term>
<listitem><simpara>An analyser.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Nonzero when strict termination is required, zero otherwise.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.3.</para></refsect2>
<refsect2 id="enca-set-significant" role="function">
<title>enca_set_significant ()</title>
<indexterm zone="enca-set-significant"><primary>enca_set_significant</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 enca_set_significant                (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> significant</parameter>);</programlisting>
<para>
Sets the minimal number of required significant characters.
</para>
<para>
The default value of this option is 10.
</para>
<para>
<link linkend="enca-analyse"><function>enca_analyse()</function></link> refuses to make a decision unles at least this number
of significant characters is found in sample.  You may want to lower this
number for very short texts.
</para><variablelist role="params">
<varlistentry><term><parameter>analyser</parameter>&#160;:</term>
<listitem><simpara>An analyser.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>significant</parameter>&#160;:</term>
<listitem><simpara>Minimal number of required significant characters.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Zero on success, nonzero on failure, i.e. when you passed zero
         as <parameter>significant</parameter>.  It sets analyser errno to ENCA_EINVALUE on
         failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="enca-get-significant" role="function" condition="since:1.3.">
<title>enca_get_significant ()</title>
<indexterm zone="enca-get-significant" role="1.3."><primary>enca_get_significant</primary></indexterm>
<programlisting><link linkend="size-t"><returnvalue>size_t</returnvalue></link>              enca_get_significant                (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>);</programlisting>
<para>
Returns the minimum number of significant characters required by <parameter>analyser</parameter>.
</para>
<para>
See <link linkend="enca-set-significant"><function>enca_set_significant()</function></link> for more detailed description of required
significant characters.
</para><variablelist role="params">
<varlistentry><term><parameter>analyser</parameter>&#160;:</term>
<listitem><simpara>An analyser.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The minimum number of significant characters.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.3.</para></refsect2>
<refsect2 id="enca-set-threshold" role="function">
<title>enca_set_threshold ()</title>
<indexterm zone="enca-set-threshold"><primary>enca_set_threshold</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 enca_set_threshold                  (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>,
                                                         <parameter><link linkend="double"><type>double</type></link> threshold</parameter>);</programlisting>
<para>
Sets the minimal ratio between the most probable and the second most
probable charsets.
</para>
<para>
The default value of this option is 1.4142.
</para>
<para>
<link linkend="enca-analyse"><function>enca_analyse()</function></link> consideres the result known only when there's a clear gap
between the most probable and the second most probable charset
proababilities.  Lower <parameter>threshold</parameter> values mean larger probability of a
mistake and smaller probability of not recognizing a charset; higher
<parameter>threshold</parameter> values the contrary.  Threshold value of 2 is almost infinity.
</para><variablelist role="params">
<varlistentry><term><parameter>analyser</parameter>&#160;:</term>
<listitem><simpara>An analyser.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>threshold</parameter>&#160;:</term>
<listitem><simpara>Minimal ratio between winner and second best guess.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Zero on success, nonzero on failure, i.e. when you passed value
         smaller than 1.0 as <parameter>threshold</parameter>.  It sets analyser errno to
         ENCA_EINVALUE on failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="enca-get-threshold" role="function" condition="since:1.3.">
<title>enca_get_threshold ()</title>
<indexterm zone="enca-get-threshold" role="1.3."><primary>enca_get_threshold</primary></indexterm>
<programlisting><link linkend="double"><returnvalue>double</returnvalue></link>              enca_get_threshold                  (<parameter><link linkend="EncaAnalyser"><type>EncaAnalyser</type></link> analyser</parameter>);</programlisting>
<para>
Returns the threshold value used by <parameter>analyser</parameter>.
</para>
<para>
See <link linkend="enca-set-threshold"><function>enca_set_threshold()</function></link> for more detailed threshold description.
</para><variablelist role="params">
<varlistentry><term><parameter>analyser</parameter>&#160;:</term>
<listitem><simpara>An analyser.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The threshold value.

</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 1.3.</para></refsect2>

</refsect1>

</refentry>
