.\" dpkg manual page - dpkg-buildflags(1)
.\"
.\" Copyright Â© 2010-2011 RaphaÃ«l Hertzog <hertzog@debian.org>
.\" Copyright Â© 2011 Kees Cook <kees@debian.org>
.\"
.\" This is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation; either version 2 of the License, or
.\" (at your option) any later version.
.\"
.\" This is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with this program.  If not, see <http://www.gnu.org/licenses/>.
.
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH dpkg\-buildflags 1 2012\-04\-03 "Projekt Debian" "u¿ytki dpkg"
.SH NAZWA
dpkg\-buildflags \- zwraca flagi budowania u¿ywane podczas budowania pakietu
.
.SH SK£ADNIA
\fBdpkg\-buildflags\fP [\fIopcja\fP...] [\fIpolecenie\fP]
.
.SH OPIS
\fBdpkg\-buildflags\fP jest narzêdziem do pozyskiwania flag kompilacji do u¿ycia
podczas budowania pakietów Debiana.
.
Domy¶lne flagi s± definiowane przez dostawcê, ale mog± zostaæ
rozszerzone/przes³oniête na wiele sposobów:
.IP 1.
systemowo, u¿ywaj±c \fB/etc/dpkg/buildflags.conf\fP;
.IP 2.
dla bie¿±cego u¿ytkownika \fB$XDG_CONFIG_HOME/dpkg/buildflags.conf\fP, gdzie
\fB$XDG_CONFIG_HOME\fP domy¶lnie jest \fB$HOME/.config\fP;
.IP 3.
tymczasowo przez u¿ytkownika za pomoc± zmiennych ¶rodowiskowych (patrz
\fBZMIENNE ¦RODOWISKA\fP).
.IP 4.
dynamicznie przez opiekuna pakietu za pomoc± zmiennych ¶rodowiskowych
ustawianych poprzez \fBdebian/rules\fP (patrz \fBZMIENNE ¦RODOWISKA\fP).
.P
Pliki konfiguracyjne mog± zawieraæ dwa typy dyrektyw:
.TP 
\fBSET\fP\fI warto¶æ flaga\fP
Przes³ania flagê \fIflaga\fP tak, aby mia³a warto¶æ \fIwarto¶æ\fP.
.TP 
\fBSTRIP\fP\fI flaga warto¶æ\fP
Usuwa z flagi \fIflaga\fP wszystkie flagi budowania umieszczone w \fIwarto¶ci\fP.
.TP 
\fBAPPEND\fP\fI flaga warto¶æ\fP
Rozszerza flagê \fIflaga\fP dodaj±c opcje podane w \fIwarto¶ci\fP. Do dodawanych
warto¶ci na pocz±tku dodawana jest spacja, je¶li bie¿±ca warto¶æ flagi nie
jest pusta.
.TP 
\fBPREPEND\fP\fI flaga warto¶æ\fP
Rozszerza flagê \fIflaga\fP przez dopisanie przed ni± opcji podanej w
\fIwarto¶ci\fP. Do dopisywanej opcji jest dopisywana spacja, je¶li bie¿±ca
warto¶æ flagi nie jest pusta.
.P
Pliki konfiguracyjne mog± zawieraæ komentarze w wierszach zaczynaj±cych siê
kratk± (#). Ignorowane s± równie¿ puste wiersze.
.SH POLECENIA
.TP 
\fB\-\-dump\fP
Wypisuje na standardowe wyj¶cie wszystkie flagi kompilacji i ich
warto¶ci. Wy¶wietla po jednej fladze na wiersz, oddzielaj±c j± od jej
warto¶ci znakiem równo¶ci ("\fIflaga\fP=\fIwarto¶æ\fP"). Jest to dzia³anie
domy¶lne.
.TP 
\fB\-\-list\fP
Wypisuje listê flag obs³ugiwanych przez bie¿±cego dostawce (po jednym na
wiersz). Rozdzia³ \fBOBS£UGIWANE FLAGI\fP zawiera o nich wiêcej informacji.
.TP 
\fB\-\-status\fP
Wy¶wietla informacje, które mog± okazaæ siê przydatne do wyja¶nienia
zachowania \fBdpkg\-buildflags\fP: powi±zane zmienne ¶rodowiskowe, obecny
dostawca, stan wszystkich flag funkcyjnych. Wypisywane s± równie¿ wynikowe
flagi kompilatora, razem z ich pochodzeniem.

Jest to przeznaczone do uruchamiania z \fBdebian/rules\fP, dziêki czemu log
budowania przechowuje jasny zapis u¿ytych flag budowania. Mo¿e okazaæ siê to
przydatne do diagnozowania zwi±zanych z nimi problemów.
.TP 
\fB\-\-export=\fP\fIformat\fP
Wypisuje na standardowe wyj¶cie pow³oki (je¶li \fIformatem\fP jest \fBsh\fP) lub
make (je¶li \fIformatem\fP jest \fBmake\fP) polecenia, które mog± byæ u¿yte do
wyeksportowania wszystkich flag kompilacji w ¶rodowisku. Je¶li \fIformatem\fP
jest \fBconfigure\fP, to wyj¶cie mo¿e byæ u¿yte w wierszu poleceñ
\&\fB./configure\fP. Je¶li warto¶æ \fIformat\fP nie zosta³a podana, przyjmowane jest
\fBsh\fP. Za³±czone s± jedynie flagi kompilacji zaczynaj±ce siê od wielkiej
litery, inne s± przyjmowane za nienadaj±ce siê do ¶rodowiska.
.TP 
\fB\-\-get\fP\fI flaga\fP
Wypisuje warto¶æ flagi na standardowe wyj¶cie. Wychodzi z 0, je¶li flaga
jest znana, w przeciwnym wypadku koñczy z 1.
.TP 
\fB\-\-origin\fP\fI flaga\fP
Wypisuje pochodzenie warto¶ci zwracanej przez \fB\-\-get\fP. Wychodzi z 0 je¶li
flaga jest znana, w przeciwnym wypadku z 1. Pochodzenie mo¿e mieæ
nastêpuj±ce warto¶ci:
.RS
.TP 
\fBvendor\fP
zwracana jest oryginalna flaga ustawiona przez dostawcê,
.TP 
\fBsystem\fP
flaga jest ustawiana/modyfikowana przez konfiguracjê systemow±,
.TP 
\fBuser\fP
flaga jest ustawiana/modyfikowana przez konfiguracjê u¿ytkownika,
.TP 
\fBenv\fP
flaga jest ustawiana/modyfikowana przez konfiguracjê ¶rodowiskow±.
.RE
.TP 
\fB\-\-query\-features\fP\fI obszar\fP
Wypisuje funkcje w³±czone w danym obszarze. Jedynym obecnie rozpoznawanym
jest \fBhardening\fP. Wychodzi z 0 je¶li obszar jest znany i z 1 w przeciwnym
wypadku.
.IP
Format wyj¶cia jest nag³ówkiem zgodnym z RFC822, z jednym rozdzia³em na
funkcjê. Na przyk³ad:
.IP
.nf
  Feature: pie
  Enabled: no

  Feature: stackprotector
  Enabled: yes
.fi
.TP 
\fB\-\-help\fP
Wy¶wietla informacjê o u¿ytkowaniu i koñczy dzia³anie.
.TP 
\fB\-\-version\fP
Wy¶wietla informacjê o wersji i pomy¶lnie koñczy dzia³anie.
.
.SH "OBS£UGIWANE FLAGI"
.TP 
\fBCFLAGS\fP
Opcje do kompilatora C. Domy¶lne warto¶ci ustawiane przez dostawcê obejmuj±
\fI\-g\fP i domy¶lny poziom optymalizacji (zwykle \fI\-O2\fP lub \fI\-O0\fP, je¶li
zmienna ¶rodowiskowa \fBDEB_BUILD_OPTIONS\fP definiuje \fInoopt\fP).
.TP 
\fBCPPFLAGS\fP
Opcje do preprocesora C, Domy¶lna warto¶æ: pusta.
.TP 
\fBCXXFLAGS\fP
Opcje do kompilatora C++. Jak \fBCFLAGS\fP.
.TP 
\fBFFLAGS\fP
Opcje do kompilatora Fortran. Jak \fBCFLAGS\fP.
.TP 
\fBLDFLAGS\fP
Opcje przekazywane do kompilatora podczas ³±czenia plików wykonywalnych lub
wspó³dzielonych bibliotek (je¶li linker jest wywo³ywany bezpo¶rednio, \fB\-Wl\fP
i \fB,\fP musz± byæ usuniête z tych opcji). Warto¶æ domy¶lna: puste.
.
.SH PLIKI
.TP 
\fB/etc/dpkg/buildflags.conf\fP
Plik konfiguracji ogólnosystemowej.
.TP 
\fB$XDG_CONFIG_HOME/dpkg/buildflags.conf\fP lub \fB$HOME/.config/dpkg/buildflags.conf\fP
Plik konfiguracyjny u¿ytkownika.
.SH ¦RODOWISKO
S± 2 zestawy zmiennych ¶rodowiskowych wykonuj±cych te same
operacje. Pierwszy (DEB_\fIflaga\fP_\fIop\fP) nie powinien byæ nigdy u¿ywany z
\fBdebian/rules\fP. Jest on przeznaczony dla u¿ytkownika, który chcia³by
przebudowaæ pakiet ¼ród³owy u¿ywaj±c innych flag budowania. Drugi zestaw
(DEB_\fIflaga\fP_MAINT_\fIop\fP) powinien byæ u¿ywany wy³±cznie przez opiekunów
pakietów do zmiany wynikowych flag budowania.
.TP 
\fBDEB_\fP\fIflaga\fP\fB_SET\fP
.TQ
\fBDEB_\fP\fIflaga\fP\fB_MAINT_SET\fP
Zmienna mo¿e byæ u¿yta do wymuszenia warto¶ci zwracanej przez dan± \fIflagê\fP.
.TP 
\fBDEB_\fP\fIflaga\fP\fB_STRIP\fP
.TQ
\fBDEB_\fP\fIflaga\fP\fB_MAINT_STRIP\fP
Zmienna mo¿e byæ u¿yta do udostêpnienia listy opcji (oddzielonej spacjami),
które zostan± usuniête z zestawu flag zwróconych przez dan± \fIflagê\fP
.TP 
\fBDEB_\fP\fIflaga\fP\fB_APPEND\fP
.TQ
\fBDEB_\fP\fIflaga\fP\fB_MAINT_APPEND\fP
Zmienna mo¿e byæ u¿yta do dodania (za) opcji uzupe³niaj±cych do warto¶ci
zwróconej przez dan± \fIflagê\fP.
.TP 
\fBDEB_\fP\fIflaga\fP\fB_PREPEND\fP
.TQ
\fBDEB_\fP\fIflaga\fP\fB_MAINT_PREPEND\fP
Zmienna mo¿e byæ u¿yta do dodania (przed) opcji uzupe³niaj±cych do warto¶ci
zwróconej przez dan± \fIflagê\fP.
.TP 
\fBDEB_BUILD_MAINT_OPTIONS\fP
Zmienna mo¿e byæ u¿yta do w³±czenia/wy³±czenia ró¿nych flag hartuj±cych
budowania poprzez opcjê \fBhardening\fP. Rozdzia³ \fBHARDENING\fP zawiera wiêcej
szczegó³ów.
.
.SH "HARTOWANIE (HARDENING)"
Istniej± opcje kompilacyjne (patrz ni¿ej), które mog± zostaæ u¿yte do
zabezpieczenia wynikowego pliku binarnego przed atakami b³êdu pamiêci lub do
zapewnienia dodatkowych ostrze¿eñ podczas kompilacji. Z wyj±tkiem
odnotowanym ni¿ej, s± one w³±czone domy¶lnie dla architektur, które je
obs³uguj±.
.P
Ka¿da funkcja hartowania mo¿e zostaæ w³±czona lub wy³±czona za pomoc±
warto¶ci \fBhardening\fP zmiennej ¶rodowiskowej \fBDEB_BUILD_MAINT_OPTIONS\fP, za
pomoc± modyfikatora "+" lub "\-". Na przyk³ad, aby w³±czyæ funkcjê "pie" i
wy³±czyæ "fortify" mo¿na umie¶ciæ nastêpuj±cy wpis w \fBdebian/rules\fP:
.P
  export DEB_BUILD_MAINT_OPTIONS=hardening=+pie,\-fortify
.P
Specjalna funkcja \fBall\fP mo¿e pos³u¿yæ do w³±czenia lub wy³±czenia
wszystkich opcji hartowania na raz. Dlatego wy³±czenie wszystkiego z
wyj±tkiem opcji "format" i "fortify" mo¿na osi±gn±æ tak:
.P
  export DEB_BUILD_MAINT_OPTIONS=hardening=\-all,+format,+fortify
.
.TP 
\fBformat\fP
To ustawienie (domy¶lnie w³±czone) dodaje \fB\-Wformat
\-Werror=format\-security\fP do \fBCFLAGS\fP i \fBCXXFLAGS\fP. Wypisywane bêd±
ostrze¿enia o niepoprawnie u¿ytych ³añcuchach formatu, a je¿eli funkcja
formatu zostanie u¿yta w sposób, który mo¿e sprawiaæ problemy
bezpieczeñstwa, to zakoñczy siê niepowodzeniem. Obecnie ostrze¿enia obejmuj±
wywo³ania do funkcji \fBprintf\fP i \fBscanf\fP, gdy ³añcuch formatu nie jest
dos³ownym ³añcuchem oraz nie ma argumentów formatu, jak w \fBprintf(foo);\fP
zamiast \fBprintf("%s", foo);\fP. Mo¿e stanowiæ to dziurê bezpieczeñstwa, gdy
³añcuch formatu pochodzi z niezaufanego ¼ród³a i zawiera "%n".
.
.TP 
\fBfortify\fP
To ustawienie (domy¶lnie w³±czone) dodaje \fB\-D_FORTIFY_SOURCE=2\fP do
\fBCPPFLAGS\fP. Podczas tworzenia kodu kompilator zna wiele informacji o
rozmiarach bufora (tam gdzie to mo¿liwe) i stara siê zast±piæ wywo³ania
funkcji o nieograniczonych wielko¶ciach bufora tymi o d³ugo¶ci
ograniczonej. Jest to u¿yteczne szczególnie przy starym, niechlujnym
kodzie. Dodatkowo, ³añcuch formatu w pamiêci zapisywalnej zawieraj±cy "%n"
jest blokowany. Je¶li jaka¶ aplikacja zale¿y na takim ³añcuchu formatu musi
zostaæ to przeorganizowane.

Proszê zauwa¿yæ, ¿e aby opcja ta odnios³a skutek, ¼ród³o musi zostaæ
skompilowane z \fB\-01\fP lub wy¿szym.
.TP 
\fBstackprotector\fP
To ustawienie (domy¶lnie w³±czone) dodaje \fB\-fstack\-protector
\-\-param=ssp\-buffer\-size=4\fP do \fBCFLAGS\fP i \fBCXXFLAGS\fP. W ten sposób dodawane
s± sprawdzenia dotycz±ce nadpisania stosu. Dziêki temu, zapobiega siê wielu
potencjalnym atakom polegaj±cym na wstrzykniêciu kodu, prowadz±cym do
przerwania pracy. W najlepszym razie, ataki polegaj±ce na wstrzykniêciu kodu
s± zmieniane na odmowê pracy (DoS) lub na brak b³êdu (w zale¿no¶ci od
aplikacji).

Ta funkcja wymaga linkowania wobec glibc (lub innej biblioteki
dostarczaj±cej \fB__stack_chk_fail\fP), wiêc musi byæ wy³±czona podczas
budowania \fB\-nostdlib\fP lub \fB\-ffreestanding\fP lub podobnych.
.
.TP 
\fBrelro\fP
To ustawienie (domy¶lnie w³±czone) dodaje \fB\-Wl,\-z,relro\fP do \fBLDFLAGS\fP.
Podczas ³adowania programu, konieczne jest zapisanie wielu sekcji pamiêci
ELF przez linkera. Dziêki temu ustawieniu, program ³aduj±cy jest oznaczany,
aby zmieni³ te sekcje na tylko do odczytu przed przejêciem kontroli przez
program. Zapobiega to g³ównie atakom nadpisania GOT. Je¶li ta opcja zostanie
wy³±czona, wy³±czane jest równie¿ \fBbindnow\fP.
.
.TP 
\fBbindnow\fP
To ustawienie (domy¶lnie wy³±czone) dodaje \fB\-Wl,\-z,now\fP do
\fBLDFLAGS\fP. Podczas ³adowania programu, wszystkie symbole dynamiczne s±
rozwi±zywane, pozwalaj±c ca³emu PLT na bycie oznaczonym jako tylko do
odczytu (z powodu powy¿szego \fBrelro\fP). Ta opcja nie mo¿e zostaæ w³±czona,
je¶li \fBrelro\fP nie jest w³±czone.
.
.TP 
\fBpie\fP
To ustawienie (domy¶lnie wy³±czone) dodaje \fB\-fPIE\fP do \fBCFLAGS\fP i
\fBCXXFLAGS\fP oraz \fB\-fPIE \-pie\fP do \fBLDFLAGS\fP. Position Independent
Executable (PIE) jest potrzebne, aby odnie¶æ korzy¶ci z Address Space Layout
Randomization, które jest obs³ugiwane przez niektóre wersja j±dra. Poniewa¿
ASLR mo¿e byæ ju¿ wymuszone w przypadku obszarów danych w stosie (stack i
heap \- brk i mmap), obszary kodu musz± zostaæ skompilowane jako niezale¿ne
od pozycji. Biblioteki wspó³dzielone ju¿ to czyni± (\-fPIC), wiêc otrzymuj±
ASLR automatycznie, ale binarne regiony .text musz± zostaæ zbudowaæ PIE aby
otrzymaæ ASLR. Gdy siê to stanie, ataki ROP (Return Oriented Programming) s±
o wiele trudniejsze, poniewa¿ nie istniej± statyczne lokalizacje do
przekroczenia podczas ataków uszkodzenia pamiêci.

Nie jest to kompatybilne z \fB\-fPIC\fP, wiêc nale¿y uwa¿aæ przy budowaniu
obiektów dzielonych.

Dodatkowo, poniewa¿ PIE jest zaimplementowane poprzez ogólny rejestr,
niektóre architektury (g³ównie i386) mog± mieæ wydajno¶æ zmniejszon± a¿ do
15% przy bardzo intensywnych obci±¿eniach text\-segment, jednak w wiêkszo¶ci
przypadków nie jest to wiêcej ni¿ 1%. Architektury z ogólniejszymi
rejestrami (np. amd64) nie maj± a¿ tak wysokich strat w najgorszym
przypadku.
.SH "T£UMACZE"
Piotr Roszatycki <dexter@debian.org>, 1999
.br
Bartosz Feñski <fenio@debian.org>, 2004-2005
.br
Robert Luberda <robert@debian.org>, 2006-2008
.br
Wiktor Wandachowicz <siryes@gmail.com>, 2008
.br
Micha³ Ku³ach <michal.kulach@gmail.com>, 2012
