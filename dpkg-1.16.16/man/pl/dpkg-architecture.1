.\" dpkg manual page - dpkg-architecture(1)
.\"
.\" Copyright Â© 2005 Marcus Brinkmann <brinkmd@debian.org>
.\" Copyright Â© 2005 Scott James Remnant <scott@netsplit.com>
.\" Copyright Â© 2006-2011 Guillem Jover <guillem@debian.org>
.\" Copyright Â© 2009-2012 RaphaÃ«l Hertzog <hertzog@debian.org>
.\"
.\" This is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation; either version 2 of the License, or
.\" (at your option) any later version.
.\"
.\" This is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with this program.  If not, see <http://www.gnu.org/licenses/>.
.
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH dpkg\-architecture 1 2012\-01\-20 "Projekt Debian" "programy pomocnicze dpkg"
.SH NAZWA
dpkg\-architecture \- ustawia i zwraca architekturê budowania pakietów.
.
.SH SK£ADNIA
\fBdpkg\-architecture\fP [\fIopcja\fP...] [\fIpolecenia\fP]
.PP
.
.SH OPIS
dpkg\-architecture dostarcza sposobu na okre¶lenie i ustawienie architektury
budowania oraz architektury docelowej dla budowania pakietów.
.PP
Architektura budowania jest zawsze okre¶lana przez wywo³anie \fBdpkg\fP i nie
mo¿e byæ ustawiona w linii poleceñ.
.PP
Mo¿na podaæ architekturê docelow± przez podanie jednej lub obu opcji spo¶ród
\fB\-a\fP i \fB\-t\fP. Warto¶æ domy¶lna jest okre¶lana przez wywo³anie programu
\fBgcc\fP(1), a w razie gdy \s-1CC\s0 i gcc nie s± dostêpne, jest taka sama jak
architektura budowania. Wystarczy podaæ tylko jedn± spo¶ród opcji \fB\-a\fP i
\fB\-t\fP, poniewa¿ ta druga zostanie ustawiona na sensown± warto¶æ domy¶ln±. Co
wiêcej, czêsto podanie jednej opcji jest lepsze ni¿ podanie ich obu naraz,
gdy¿ \fBdpkg\-architecture\fP wypisze ostrze¿enie, je¶li podane warto¶ci nie
bêd± odpowiada³y warto¶ciom domy¶lnym.
.
.SH POLECENIA
.TP 
\fB\-l\fP
Wy¶wietla zmienne ¶rodowiskowe, po jednej w ka¿dej linii, w formacie
\fIZMIENNA=warto¶æ\fP. Jest to domy¶lna akcja.
.TP 
\fB\-e\fP\fIarchitektura\-debiana\fP
Sprawdza równowa¿no¶æ architektur. Domy¶lnie \fIarchitektura\-debiana\fP jest
porównywana z bie¿±c± architektur± Debiana, traktowan± jako architektura
gospodarza. Ta akcja nie rozwija masek architektur. Polecenie koñczy siê
kodem wyj¶cia 0 je¶li dopasowanie architektur siê powiod³o, lub kodem 1
je¶li nie by³o dopasowania.
.TP 
\fB\-i\fP\fImaska\-architektury\fP
Sprawdzenie architektury przez rozwiniêcie w odpowiedni sposób
\fImaski\-architektury\fP i porównanie z bie¿±c± architektur± Debiana. Polecenie
koñczy siê kodem wyj¶cia 0 je¶li dopasowanie architektur siê powiod³o, lub
kodem 1 je¶li nie by³o dopasowania.
.TP 
\fB\-q\fP\fInazwa\-zmiennej\fP
Wy¶wietla warto¶æ pojedynczej zmiennej.
.TP 
\fB\-s\fP
Wy¶wietla polecenie export, które mo¿e byæ u¿yte do ustawienia zmiennych
¶rodowiskowych za pomoc± eval.
.TP 
\fB\-u\fP
Wy¶wietla polecenie podobne do \fB\-s\fP, jednak¿e ze wszystkimi zmiennymi
nieustawionymi.
.TP 
\fB\-c\fP\fI polecenie\fP
Wykonuje \fIpolecenie\fP w ¶rodowisku, które ma wszystkie zmienne ustawione na
wyznaczone warto¶ci.
.TP 
\fB\-L\fP
Wy¶wietla listê poprawnych nazw architektur.
.TP 
\fB\-?\fP, \fB\-\-help\fP
Wy¶wietla informacjê o u¿ytkowaniu i koñczy dzia³anie.
.TP 
\fB\-\-version\fP
Wy¶wietla informacjê o wersji i pomy¶lnie koñczy dzia³anie.
.
.SH OPCJE
.TP 
\fB\-a\fP\fIarchitektura\-debiana\fP
Ustawia architekturê Debiana.
.TP 
\fB\-t\fP\fItyp\-systemu\-gnu\fP
Ustawia typ systemu GNU.
.TP 
\fB\-f\fP
Honorowane s± warto¶ci ustawione w istniej±cych zmiennych ¶rodowiskowych o
tych samych nazwach, co u¿ywane w skryptach (np. u¿yte przez
\fBdpkg\-architecture\fP), chyba ¿e jest obecna ta flaga wymuszenia. Pozwala to
na nadpisanie warto¶ci nawet je¶li wywo³anie \fBdpkg\-architecture\fP jest
ukryte g³êboko w jakim¶ innym skrypcie (np. \fBdpkg\-buildpackage\fP(1)).
.
.SH WARUNKI
.IP "maszyna budowania" 4
Rodzaj maszyny, na której pakiet jest budowany.
.IP "maszyna docelowa" 4
Rodzaj maszyny, dla której pakiet jest budowany.
.IP "architektura Debiana" 4
£añcuch znaków zawieraj±cy architekturê Debiana, która okre¶la drzewo
binarne w archiwum \s-1FTP\s0. Przyk³ady: i386, sparc, hurd\-i386.
.IP "maska architektury" 4
Maska architektury jest specjalnym ³añcuchem znaków, który bêdzie pasowa³ do
ka¿dej architektury, która jest jego czê¶ci±. Ogólna postaæ jest
nastêpuj±ca: <j±dro>\-<procesor>. Przyk³ady: linux\-any,
any\-i386, hurd\-any.
.IP "typ systemu \s-1GNU\s0" 4
£añcuch znaków okre¶laj±cy architekturê sk³adaj±cy siê z dwóch czê¶ci
oddzielonych my¶lnikiem: procesor i system. Przyk³ady: i386\-linux\-gnu,
sparc\-linux\-gnu, i386\-gnu, x86_64\-netbsd.
.
.SH ZMIENNE
\fBdpkg\-architecture\fP ustawia nastêpuj±ce zmienne:
.IP \s-1DEB_BUILD_ARCH\s0 4
Architektura wg Debiana komputera, na którym budowany jest pakiet.
.IP \s-1DEB_BUILD_ARCH_OS\s0 4
Nazwa systemu wg Debiana komputera, na którym budowany jest pakiet.
.IP \s-1DEB_BUILD_ARCH_CPU\s0 4
Nazwa procesora wg Debiana komputera, na którym budowany jest pakiet.
.IP \s-1DEB_BUILD_ARCH_BITS\s0 4
Rozmiar wska¼nika na komputerze buduj±cym (w bitach).
.IP \s-1DEB_BUILD_ARCH_ENDIAN\s0 4
Kolejno¶æ bajtów (endian) na komputerze buduj±cym (little / big).
.IP \s-1DEB_BUILD_GNU_CPU\s0 4
Czê¶æ dotycz±ca \s-1CPU\s0 z \s-1DEB_BUILD_GNU_TYPE\s0.
.IP \s-1DEB_BUILD_GNU_SYSTEM\s0 4
Cze¶æ dotycz±ca systemu z \s-1DEB_BUILD_GNU_TYPE\s0.
.IP \s-1DEB_BUILD_GNU_TYPE\s0 4
Typ systemu \s-1GNU\s0 komputera, na którym budowany jest pakiet.
.IP \s-1DEB_BUILD_MULTIARCH\s0 4
Typ systemu \s-1GNU\s0 komputera, na którym budowany jest pakiet, u¿ywana do
¶cie¿ek systemu plików.
.IP \s-1DEB_HOST_ARCH\s0 4
Architektura wg Debiana dla maszyny docelowej.
.IP \s-1DEB_BUILD_ARCH_OS\s0 4
Nazwa systemu wg Debiana dla maszyny docelowej.
.IP \s-1DEB_HOST_ARCH_CPU\s0 4
Nazwa procesora wg Debiana dla maszyny docelowej.
.IP \s-1DEB_HOST_ARCH_BITS\s0 4
Rozmiar wska¼nika na maszynie docelowej (w bitach).
.IP \s-1DEB_HOST_ARCH_ENDIAN\s0 4
Kolejno¶æ bajtów (endian) na maszynie docelowej (little / big).
.IP \s-1DEB_HOST_GNU_CPU\s0 4
Czê¶æ dotycz±ca \s-1CUP\s0 z \s-1DEB_HOST_GNU_TYPE\s0.
.IP \s-1DEB_HOST_GNU_SYSTEM\s0 4
Czê¶æ dotycz±ca systemu z \s-1DEB_HOST_GNU_TYPE\s0.
.IP \s-1DEB_HOST_GNU_TYPE\s0 4
Typ systemu \s-1GNU\s0 dla maszyny docelowej.
.IP \s-1DEB_HOST_MULTIARCH\s0 4
Oczyszczony typ systemu \s-1GNU\s0 dla maszyny docelowej, u¿ywany do ¶cie¿ek
systemu plików.
.
.SH DEBIAN/RULES
Zmienne ¶rodowiskowe ustawione przez \fBdpkg\-architecture\fP s± przekazywane do
\fIdebian/rules\fP jako zmienne programu make (patrz dokumentacja do
make). Jednak¿e nie nale¿y na nich polegaæ, gdy¿ psuje to rêczne
uruchomienie tego skryptu. Zamiast tego, nale¿y zawsze inicjowaæ je,
u¿ywaj±c \fBdpkg\-architecture\fP z opcj± \-q. Poni¿ej znajduje siê parê
przyk³adów, które tak¿e pokazuj±, jak mo¿na polepszyæ wsparcie dla
kompilacji krzy¿owej pakietu:
.PP

Otrzymywanie typu GNU systemu i przekazanie go do ./configure:
.IP
.nf
\&\s-1DEB_BUILD_GNU_TYPE\s0 := $(shell dpkg\-architecture \-qDEB_BUILD_GNU_TYPE)
\&\s-1DEB_HOST_GNU_TYPE\s0 := $(shell dpkg\-architecture \-qDEB_HOST_GNU_TYPE)
[...]
configure \-\-build=$(\s-1DEB_BUILD_GNU_TYPE\s0) \-\-host=$(\s-1DEB_HOST_GNU_TYPE\s0)
.fi
.PP

Robienie czego¶ tylko do okre¶lonej architektury:
.IP
.nf
\&\s-1DEB_HOST_ARCH\s0 := $(shell dpkg\-architecture \-qDEB_HOST_ARCH)

ifeq ($(\s-1DEB_HOST_ARCH\s0),alpha)
  [...]
endif
.fi
.PP
albo je¶li trzeba sprawdziæ tylko typ CPU lub OS, nale¿y u¿yæ zmiennych
DEB_HOST_ARCH_CPU lub DEB_HOST_ARCH_OS.
.PP
Mo¿na równie¿ polegaæ na zewnêtrznym fragmencie Makefile, aby poprawnie
ustawiæ wszystkie zmienne, które mo¿e udostêpniæ \fBdpkg\-architecture\fP:
.IP
.nf
include /usr/share/dpkg/architecture.mk

ifeq ($(\s-1DEB_HOST_ARCH\s0),alpha)
  [...]
endif
.fi
.PP
Niezale¿nie od sposobu, nie powinno siê nigdy u¿ywaæ \fBdpkg
\-\-print\-architecture\fP aby otrzymaæ informacje o architekturze, podczas
budowania pakietu.
.
.SH "KOMPATYBILNO¦Æ WSTECZNA"
Fragment /usr/share/dpkg/architecture.mk Makefile jest udostêpniany przez
dpkg\-dev od wersji 1.16.1.
.PP
Zmienne DEB_*_ARCH_BITS oraz DEB_*_ARCH_ENDIAN zosta³y wprowadzone w
dpkg\-dev 1.15.4. U¿ywanie ich w \fIdebian/rules\fP wymaga wiêc zale¿no¶ci czasu
budowania dla dpkg\-dev (>= 1.15.4).
.PP
Zmienne DEB_HOST_ARCH_CPU i DEB_HOST_ARCH_OS zosta³y wprowadzone w dpkg\-dev
1.13.2.
.PP
Opcje \fB\-e\fP i \fB\-i\fP zosta³y wprowadzone w miarê nowych wersjach
\fBdpkg\-architecture\fP (od wersji dpkg 1.13.13).
.
.SH PRZYK£ADY
\fBdpkg\-buildpackage\fP akceptuje opcjê \fB\-a\fP i przekazuje j± do
\fBdpkg\-architecture\fP. Inne przyk³ady:
.IP
CC=i386\-gnu\-gcc dpkg\-architecture \-c debian/rules build
.IP
eval \`dpkg\-architecture \-u\`
.PP
Sprawdzanie, czy architektura jest równa architekturze bie¿±cej lub podanej:
.IP
dpkg\-architecture \-elinux\-alpha
.IP
dpkg\-architecture \-amips \-elinux\-mips
.PP
Sprawdzanie, czy architektura bie¿±ca podana przez \-a jest systemem Linuksa:
.IP
dpkg\-architecture \-ilinux\-any
.IP
dpkg\-architecture \-ai386 \-ilinux\-any
.
.SH PLIKI
Wszystkie te pliki musz± byæ obecne, aby \fBdpkg\-architecture\fP w ogóle
dzia³a³. Ich po³o¿enie mo¿na zmieniæ w czasie dzia³ania programu przez
ustawienie zmiennej ¶rodowiskowej \fBDPKG_DATADIR\fP.
.TP 
\fI/usr/share/dpkg/cputable\fP
Tabela znanych nazw procesorów i ich mapowanie na nazwy GNU.
.TP 
\fI/usr/share/dpkg/ostable\fP
Tabela nazw znanych systemów operacyjnych i ich mapowanie na nazwy GNU.
.TP 
\fI/usr/share/dpkg/triplettable\fP
Mapowanie miêdzy trójkami architektur Debiana a nazwami architektur Debiana.
.
.SH "ZOBACZ TAK¯E"
\fBdpkg\-buildpackage\fP(1), \fBdpkg\-cross\fP(1).
.SH "T£UMACZE"
Piotr Roszatycki <dexter@debian.org>, 1999
.br
Bartosz Feñski <fenio@debian.org>, 2004-2005
.br
Robert Luberda <robert@debian.org>, 2006-2008
.br
Wiktor Wandachowicz <siryes@gmail.com>, 2008
.br
Micha³ Ku³ach <michal.kulach@gmail.com>, 2012
