.\" dpkg manual page - dpkg-architecture(1)
.\"
.\" Copyright Â© 2005 Marcus Brinkmann <brinkmd@debian.org>
.\" Copyright Â© 2005 Scott James Remnant <scott@netsplit.com>
.\" Copyright Â© 2006-2011 Guillem Jover <guillem@debian.org>
.\" Copyright Â© 2009-2012 RaphaÃ«l Hertzog <hertzog@debian.org>
.\"
.\" This is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation; either version 2 of the License, or
.\" (at your option) any later version.
.\"
.\" This is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with this program.  If not, see <http://www.gnu.org/licenses/>.
.
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH dpkg\-architecture 1 "20 de enero del 2012" "Proyecto Debian" "Herramientas de dpkg"
.SH NOMBRE
dpkg\-architecture \- Configurar y determinar la arquitectura para la
construcción de paquetes
.
.SH SINOPSIS
\fBdpkg\-architecture\fP [\fIopción\fP...] [\fIorden\fP]
.PP
.
.SH DESCRIPCIÓN
dpkg\-architecture facilita determinar y configurar la arquitectura de
construcción y de la máquina anfitrión para la construcción de un paquete.
.PP
La arquitectura de construcción siempre se determina con una ejecución
externa a \fBdpkg\fP(1), y no se puede definir en la línea de órdenes.
.PP
Puede definir la arquitectura del anfitrión introduciendo una o ambas
opciones \fB\-a\fP y \fB\-t\fP. El valor por omisión es una ejecución externa a
\fBgcc\fP(1), o la misma que la arquitectura de construcción en caso de no
disponer de \s-1CC\s0 o gcc. Es suficiente utilizar \fB\-a\fP o \fB\-t\fP, el valor
del otro se definirá con un valor predefinido adecuado. De hecho, a veces es
mejor definir sólo uno, ya que \fBdpkg\-architecture\fP le avisará si su opción
no encaja con la opción predefinida.
.
.SH ÓRDENES
.TP 
\fB\-l\fP
Muestra las variables de entorno, una por línea, con el formato
\fIVARIABLE=valor\fP. Esta es la acción predefinida.
.TP 
\fB\-e\fP\fIdebian\-architecture\fP
Revisa si la arquitectura es la misma. Por omisión, \fIdebian\-architecture\fP
se compara con la arquitectura del sistema Debian actual, el sistema
anfitrión. Esta acción no expande los comodines de arquitectura. La orden
finaliza con un estado de salida de cero si coinciden, y de 1 en caso
contrario.
.TP 
\fB\-i\fP\fIcomodín\-arquitectura\fP
Revisa la identidad de la arquitectura expandiendo \fIcomodin\-arquitectura\fP
como un comodín de arquitectura, y comparándola con la arquitectura del
sistema Debian actual. La orden finaliza con un estado de salida de cero si
coincide, y de 1 en caso contrario.
.TP 
\fB\-q\fP\fInombre\-variable\fP
Muestra el valor de una única variable.
.TP 
\fB\-s\fP
Muestra una orden «export». Se puede utilizar para definir las variables de
entorno mediante eval.
.TP 
\fB\-u\fP
Muestra una orden similar a \fB\-s\fP, pero para eliminar la definición
(«unset») de todas las variables.
.TP 
\fB\-c\fP\fI orden\fP
Ejecuta una \fIorden\fP en un entorno cuyas variables ya están definidas con un
valor predefinido.
.TP 
\fB\-L\fP
Muestra una lista de nombres de arquitectura válidos.
.TP 
\fB\-?\fP, \fB\-\-help\fP
Muestra el modo de uso y termina.
.TP 
\fB\-\-version\fP
Muestra la versión y termina.
.
.SH OPCIONES
.TP 
\fB\-a\fP\fIdebian\-architecture\fP
Define la arquitectura de Debian.
.TP 
\fB\-t\fP\fItipo\-sistema\-gnu\fP
Define el tipo de sistema GNU.
.TP 
\fB\-f\fP
Los scripts respetan los valores de variables de entorno preexistentes que
tienen el mismo nombre que los valores contenidos en el script (por ejemplo,
usados por \fBdpkg\-architecture\fP), a menos que se use esta marca de
forzado. Permite al usuario sobreescribir un valor, aún cuando la ejecución
a \fBdpkg\-architecture\fP se encuentra en otro script (por ejemplo,
\fBdpkg\-buildpackage\fP(1)).
.
.SH TÉRMINOS
.IP "máquina de construcción" 4
La máquina en la que se construye el paquete.
.IP "máquina anfitrión" 4
La máquina para la cual se construye el paquete.
.IP "Arquitectura de Debian" 4
La cadena de la arquitectura de Debian, que especifica el árbol binario en
el archivo \s-1FTP\s0. Ejemplos: i386, sparc, hurd\-i386.
.IP "comodín de arquitectura" 4
Un comodín de arquitectura es una cadena especial de arquitectura que encaja
con cualquier arquitectura real del que es parte. La forma habitual es
<kernel>\-<cpu>. Ejemplos: linux\-any, any\-i386, hurd\-any.
.IP "tipo de sistema \s-1GNU\s0" 4
Una cadena de definición de arquitectura que consiste de dos partes
separadas por un guión: el procesador y el sistema. Ejemplos:
i386\-linux\-gnu, sparc\-linux\-gnu, i386\-gnu, x86_64\-netbsd.
.
.SH VARIABLES
Las siguientes variables se definen mediante \fBdpkg\-architecture\fP:
.IP \s-1DEB_BUILD_ARCH\s0 4
La arquitectura de Debian de la máquina de construcción.
.IP \s-1DEB_BUILD_ARCH_OS\s0 4
El nombre del sistema Debian de la máquina de construcción.
.IP \s-1DEB_BUILD_ARCH_CPU\s0 4
El nombre de Debian del procesador de la máquina de construcción.
.IP \s-1DEB_BUILD_ARCH_BITS\s0 4
El tamaño del puntero de la máquina de construcción, en bits.
.IP \s-1DEB_BUILD_ARCH_ENDIAN\s0 4
El nivel de «endianización» de la máquina de construcción, «little» o «big».
.IP \s-1DEB_BUILD_GNU_CPU\s0 4
La parte \s-1CPU\s0 de \s-1DEB_BUILD_GNU_TYPE\s0.
.IP \s-1DEB_BUILD_GNU_SYSTEM\s0 4
La parte de «System» de \s-1DEB_BUILD_GNU_TYPE\s0.
.IP \s-1DEB_BUILD_GNU_TYPE\s0 4
El tipo de sistema \s-1GNU\s0 de la máquina de construcción.
.IP \s-1DEB_BUILD_MULTIARCH\s0 4
El tipo de sistema \s-1GNU\s0 clarificado de la máquina de construcción,
utilizado para rutas del sistema de ficheros.
.IP \s-1DEB_HOST_ARCH\s0 4
La arquitectura de Debian de la máquina anfitrión.
.IP \s-1DEB_HOST_ARCH_OS\s0 4
El nombre de sistema Debian de la máquina anfitrión.
.IP \s-1DEB_HOST_ARCH_CPU\s0 4
El nombre del procesador Debian de la máquina anfitrión.
.IP \s-1DEB_HOST_ARCH_BITS\s0 4
El tamaño del puntero de la máquina anfitrión, en bits.
.IP \s-1DEB_HOST_ARCH_ENDIAN\s0 4
El nivel de «endianización» de la máquina anfitrión, «little» o «big».
.IP \s-1DEB_HOST_GNU_CPU\s0 4
La parte de \s-1CPU\s0 de \s-1DEB_HOST_GNU_TYPE\s0.
.IP \s-1DEB_HOST_GNU_SYSTEM\s0 4
La parte de «System» de \s-1DEB_HOST_GNU_TYPE\s0.
.IP \s-1DEB_HOST_GNU_TYPE\s0 4
El tipo de sistema \s-1GNU\s0 de la máquina anfitrión.
.IP \s-1DEB_HOST_MULTIARCH\s0 4
El tipo de sistema \s-1GNU\s0 clarificado de la máquina anfitrión, utilizado
para rutas del sistema de ficheros.
.
.SH DEBIAN/RULES
Las variables de entorno definidas por \fBdpkg\-architecture\fP se introducen a
\fIdebian/rules\fP como variables de «make» (consulte la documentación de
make). Por otra parte, no debería depender de ellos, ya que esto rompe la
ejecución manual del script. En lugar de ello, se deberían iniciar mediante
\fBdpkg\-architecture\fP con la opción «\-q». Aquí hay algunos ejemplos, que
muestran también como mejorar la compatibilidad de su paquete con la
construcción para varias arquitecturas.
.PP

Obtención del tipo de sistema GNU e introducción a «./configure»:
.IP
.nf
\&\s-1DEB_BUILD_GNU_TYPE\s0 := $(shell dpkg\-architecture \-qDEB_BUILD_GNU_TYPE)
\&\s-1DEB_HOST_GNU_TYPE\s0 := $(shell dpkg\-architecture \-qDEB_HOST_GNU_TYPE)
[...]
configure \-\-build=$(\s-1DEB_BUILD_GNU_TYPE\s0) \-\-host=$(\s-1DEB_HOST_GNU_TYPE\s0)
.fi
.PP

Realizar algo para una arquitectura específica:
.IP
.nf
\&\s-1DEB_HOST_ARCH\s0 := $(shell dpkg\-architecture \-qDEB_HOST_ARCH)

ifeq ($(\s-1DEB_HOST_ARCH\s0),alpha)
  [...]
endif
.fi
.PP
o si sólo precisa revisar el tipo de sistema o CPU, use las variables
«DEB_HOST_ARCH_OS» o «DEB_HOST_ARCH_CPU».
.PP
Tenga en cuenta que también puede utilizar un fragmento externo de un
archivo «Makefile» para definir de forma adecuada las variables que
\fBdpkg\-architecture\fP puede proporcionar:
.IP
.nf
include /usr/share/dpkg/architecture.mk

ifeq ($(\s-1DEB_HOST_ARCH\s0),alpha)
  [...]
endif
.fi
.PP
Nunca utilice \fBdpkg \-\-print\-architecture\fP para obtener información de la
arquitectura durante la construcción de un paquete.
.
.SH "COMPATIBILIDAD CON VERSIONES ANTERIORES"
El fragmento de archivo «Makefile» «/usr/share/dpkg/architecture.mk» se
proporciona a partir de la versión 1.16.1 de dpkg\-dev.
.PP
Las variables «DEB_*_ARCH_BITS» y «DEB_*_ARCH_ENDIAN» se introdujeron a
partir de la versión 1.15.4 de dpkg\-dev. Su uso en \fIdebian/rules\fP requiere
una dependencia de construcción sobre dpkg\-dev (>= 1.15.4).
.PP
Las variables «DEB_HOST_ARCH_CPU» y «DEB_HOST_ARCH_OS» se introdujeron a
partir de la versión 1.13.2 de dpkg\-dev.
.PP
Las opciones \fB\-e\fP y \fB\-i\fP aparecieron en recientes versiones de
\fBdpkg\-architecture\fP (a partir de la versión 1.13.13 de dpkg).
.
.SH EJEMPLOS
\fBdpkg\-buildpackage\fP acepta la opción \fB\-a\fP y la introduce a
\fBdpkg\-architecture\fP. Otros ejemplos:
.IP
CC=i386\-gnu\-gcc dpkg\-architecture \-c debian/rules build
.IP
eval \`dpkg\-architecture \-u\`
.PP
Revisa si una arquitectura equivale a la arquitectura actual o dada:
.IP
dpkg\-architecture \-elinux\-alpha
.IP
dpkg\-architecture \-amips \-elinux\-mips
.PP
Revisa si la arquitectura actual o introducida con «\-a» es de un sistema
Linux:
.IP
dpkg\-architecture \-ilinux\-any
.IP
dpkg\-architecture \-ai386 \-ilinux\-any
.
.SH FICHEROS
Todos los ficheros deben estar presentes para que \fBdpkg\-architecture\fP
funcione. Puede sobreescribir la ubicación en tiempo de ejecución mediante
la variable de entorno \fBDPKG_DATADIR\fP.
.TP 
\fI/usr/share/dpkg/cputable\fP
Tabla de nombres de CPU conocidos y su correlación con su nombre GNU.
.TP 
\fI/usr/share/dpkg/ostable\fP
Tabla de sistemas operativos conocidos y su correlación con su nombre GNU.
.TP 
\fI/usr/share/dpkg/triplettable\fP
Correlación entre tuples de 3 de la arquitectura de Debian, y los nombres de
arquitectura de Debian.
.
.SH "VÉASE TAMBIÉN"
\fBdpkg\-buildpackage\fP(1), \fBdpkg\-cross\fP(1).
.SH "TRADUCTOR"
Rudy Godoy <rudy@kernel\-panik.org>,
Rubén Porras <nahoo@inicia.es>,
Bruno Barrera C. <bruno.barrera@igloo.cl>,
Carlos Izquierdo <gheesh@ertis.net>,
Esteban Manchado y
NOK.
Debian L10n Spanish <debian\-l10n\-spanish@lists.debian.org>.
.br
Revisiones por Santiago Vila <sanvila@unex.es>,
Javier Fernández\-Sanguino, Rubén Porras,
Luis Uribe y Omar Campagne.
