From b66f2cb608f68c7a2a639dc05a4a2f1b321f70f6 Mon Sep 17 00:00:00 2001
From: Justin Maggard <jmaggard10@gmail.com>
Date: Fri, 30 Jan 2015 12:09:40 -0800
Subject: [PATCH 08/19] pdbedit-add-nthash-option.patch

---
 source3/utils/pdbedit.c | 64 +++++++++++++++++++++++++++++++++++++++++++++----
 1 file changed, 59 insertions(+), 5 deletions(-)

diff --git a/source3/utils/pdbedit.c b/source3/utils/pdbedit.c
index 555b839..cd4ce66 100644
--- a/source3/utils/pdbedit.c
+++ b/source3/utils/pdbedit.c
@@ -26,6 +26,8 @@
 #include "../libcli/security/security.h"
 #include "passdb.h"
 
+#define BIT_LM_HASH	0x00000001
+#define BIT_NT_HASH	0x00000002
 #define BIT_BACKEND	0x00000004
 #define BIT_VERBOSE	0x00000008
 #define BIT_SPSTYLE	0x00000010
@@ -56,8 +58,8 @@
 #define BIT_KICKOFFTIME	0x20000000
 #define BIT_DESCRIPTION 0x40000000
 
-#define MASK_ALWAYS_GOOD	0x0000001F
-#define MASK_USER_GOOD		0x60405FE0
+#define MASK_ALWAYS_GOOD	0x0000001C
+#define MASK_USER_GOOD		0x60405FE3
 
 static int get_sid_from_cli_string(struct dom_sid *sid, const char *str_sid)
 {
@@ -489,6 +491,31 @@ done:
 	return ret;
 }
 
+
+/*********************************************************
+ Convert a string of hex values (as in the hash field of
+ pdbedit -Lw) to the actual hash.
+**********************************************************/
+
+static int convert_hex_to_hash(const char *hex, uint8 *hash, int hash_size)
+{
+	int i, hex_len, i_limit;
+	char *index = hex;
+
+	if (!hex || hash_size <= 0)
+		return -1;
+	hex_len = strlen(hex) / 2;  // # of hex values, not length of hex string
+	if (hex_len <= 0)
+		return -1;
+	i_limit = hex_len < hash_size ? hex_len : hash_size;
+	for (i = 0; i < i_limit; ++i) {
+		sscanf(index, "%2x", &hash[i]);
+		index += 2;
+	}
+	return i;
+}
+
+
 /*********************************************************
  Set User Info
 **********************************************************/
@@ -499,7 +526,8 @@ static int set_user_info(const char *username, const char *fullname,
 			 const char *profile, const char *account_control,
 			 const char *user_sid, const char *user_domain,
 			 const bool badpw, const bool hours,
-			 const char *kickoff_time)
+			 const char *kickoff_time,
+			 const char *lm_hash, const char *nt_hash)
 {
 	bool updated_autolock = False, updated_badpw = False;
 	struct samu *sam_pwent;
@@ -508,6 +536,8 @@ static int set_user_info(const char *username, const char *fullname,
 	uint32_t acb_flags;
 	uint32_t not_settable;
 	uint32_t new_flags;
+	uint8 lm_pwd[LM_HASH_LEN];
+	uint8 nt_pwd[NT_HASH_LEN];
 	struct dom_sid u_sid;
 	bool ret;
 
@@ -602,6 +632,24 @@ static int set_user_info(const char *username, const char *fullname,
 		pdb_set_kickoff_time(sam_pwent, value, PDB_CHANGED);
 	}
 
+	if (lm_hash) {
+		memset(lm_pwd, 0, LM_HASH_LEN);
+		if (strlen(lm_hash) > LM_HASH_LEN)
+			convert_hex_to_hash(lm_hash, lm_pwd, sizeof(lm_pwd));
+		else
+			strncpy(lm_pwd, lm_hash, LM_HASH_LEN);
+		pdb_set_lanman_passwd(sam_pwent, lm_pwd, PDB_CHANGED);
+	}
+
+	if (nt_hash) {
+		memset(nt_pwd, 0, NT_HASH_LEN);
+		if (strlen(nt_hash) > NT_HASH_LEN)
+			convert_hex_to_hash(nt_hash, nt_pwd, sizeof(nt_pwd));
+		else
+			strncpy(nt_pwd, nt_hash, NT_HASH_LEN);
+		pdb_set_nt_passwd(sam_pwent, nt_pwd, PDB_CHANGED);
+	}
+
 	if (NT_STATUS_IS_OK(pdb_update_sam_account(sam_pwent))) {
 		print_user_info(username, True, False);
 	} else {
@@ -1021,6 +1069,8 @@ int main(int argc, const char **argv)
 	static int pw_from_stdin = False;
 	struct pdb_methods *bin, *bout;
 	static char *kickoff_time = NULL;
+	static char *lm_hash = NULL;
+	static char *nt_hash = NULL;
 	TALLOC_CTX *frame = talloc_stackframe();
 	NTSTATUS status;
 	poptContext pc;
@@ -1058,6 +1108,8 @@ int main(int argc, const char **argv)
 		{"time-format", 0, POPT_ARG_STRING, &pwd_time_format, 0, "The time format for time parameters", NULL },
 		{"password-from-stdin", 't', POPT_ARG_NONE, &pw_from_stdin, 0, "get password from standard in", NULL},
 		{"kickoff-time", 'K', POPT_ARG_STRING, &kickoff_time, 0, "set the kickoff time", NULL},
+		{"lm-hash", 0, POPT_ARG_STRING, &lm_hash, 0, "set the lanman password", NULL},
+		{"nt-hash", 0, POPT_ARG_STRING, &nt_hash, 0, "set the nt password", NULL},
 		POPT_COMMON_SAMBA
 		POPT_TABLEEND
 	};
@@ -1118,7 +1170,9 @@ int main(int argc, const char **argv)
 			(badpw_reset ? BIT_BADPWRESET : 0) +
 			(hours_reset ? BIT_LOGONHOURS : 0) +
 			(kickoff_time ? BIT_KICKOFFTIME : 0) +
-			(acct_desc ? BIT_DESCRIPTION : 0);
+			(acct_desc ? BIT_DESCRIPTION : 0) +
+			(lm_hash ? BIT_LM_HASH : 0) +
+			(nt_hash ? BIT_NT_HASH : 0);
 
 	if (setparms & BIT_BACKEND) {
 		/* HACK: set the global passdb backend by overwriting globals.
@@ -1315,7 +1369,7 @@ int main(int argc, const char **argv)
 						     profile_path, account_control,
 						     user_sid, user_domain,
 						     badpw_reset, hours_reset,
-						     kickoff_time);
+						     kickoff_time, lm_hash, nt_hash);
 			}
 		}
 	}
-- 
1.9.1

