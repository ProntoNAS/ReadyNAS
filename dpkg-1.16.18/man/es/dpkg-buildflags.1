.\" dpkg manual page - dpkg-buildflags(1)
.\"
.\" Copyright Â© 2010-2011 RaphaÃ«l Hertzog <hertzog@debian.org>
.\" Copyright Â© 2011 Kees Cook <kees@debian.org>
.\"
.\" This is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation; either version 2 of the License, or
.\" (at your option) any later version.
.\"
.\" This is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with this program.  If not, see <http://www.gnu.org/licenses/>.
.
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH dpkg\-buildflags 1 "3 de abril del 2012" "Proyecto Debian" "Herramientas de dpkg"
.SH NOMBRE
dpkg\-buildflags \- Devuelve opciones de compilación a usar durante la
construcción del paquete
.
.SH SINOPSIS
\fBdpkg\-buildflags\fP [\fIopción\fP...] [\fIorden\fP]
.
.SH DESCRIPCIÓN
\fBdpkg\-buildflags\fP es una herramienta para obtener las opciones de
compilación a utilizar durante la construcción de paquetes Debian.
.
Las opciones predefinidas se definen por el proveedor, pero se pueden
extender y sustituir de varias formas:
.IP 1.
Para todo el sistema con \fB/etc/dpkg/buildflags.conf\fP.
.IP 2.
Para el usuario actual con \fB$XDG_CONFIG_HOME/dpkg/buildflags.conf\fP, donde
\fB$XDG_CONFIG_HOME\fP tiene como valor predefinido \fB$HOME/.config\fP.
.IP 3.
De forma temporal por el usuario con variables de entorno (consulte la
sección \fBENTORNO\fP).
.IP 4.
Definido por el responsable del paquete con variables de entorno definidas
en \fBdebian/rules\fP (consulte la sección \fBENTORNO\fP).
.P
Los ficheros de configuración pueden contener dos tipos de directivas:
.TP 
\fBSET\fP\fI opción valor\fP
Sustituye la opción llamada \fIopción\fP con el valor \fIvalor\fP.
.TP 
\fBSTRIP\fP\fI opción valor\fP
Elimina de la \fIopción\fP todas las opciones de compilación enumeradas en
\fIvalor\fP.
.TP 
\fBAPPEND\fP\fI opción valor\fP
Extiende la opción llamada \fIopción\fP posponiendo las opciones dadas en
\fIvalor\fP. Se prefijará un espacio al valor añadido si el valor actual de la
opción no está vacío.
.TP 
\fBPREPEND\fP\fI opción valor\fP
Extiende la opción llamada \fIopción\fP prefijando las opciones dadas en
\fIvalor\fP. Se prefijará un espacio al valor añadido si el valor actual de la
opción no está vacío.
.P
Los ficheros de configuración pueden contener comentarios en líneas que
empiecen con «#». También se ignoran líneas vacías.
.SH ÓRDENES
.TP 
\fB\-\-dump\fP
Muestra por la salida estándar todas las opciones de configuración y sus
valores. Muestra una línea por opción separada de su valor con un signo «=»
(\fIopción\fP=\fIvalor\fP). Esta es la acción predefinida.
.TP 
\fB\-\-list\fP
Muestra la lista de opciones aceptadas por el proveedor actual (uno por
línea). Para más información acerca de ellos consulte la sección \fBOPCIONES
ACEPTADAS\fP.
.TP 
\fB\-\-status\fP
Muestra toda la información que puede ser útil para explicar el
comportamiento de \fBdpkg\-buildflags\fP: variables de entorno pertinentes, el
proveedor actual y el estado de todas las opciones de funcionalidad. También
muestra las opciones de compilación resultantes con su origen.

Se ha diseñado para ejecutarse \fBdebian/rules\fP, de forma que el registro de
construcción mantenga un seguimiento claro de las opciones de construcción
utilizadas. Puede ser útil para diagnosticar problemas relacionados con
ellos.
.TP 
\fB\-\-export=\fP\fIformato\fP
Muestra por la salida del intérprete de órdenes estándar (si \fIformato\fP es
\fBsh\fP) o make (si \fIformato\fP es \fBmake\fP) las órdenes que se pueden utilizar
para exportar todas las opciones de compilación en el entorno. Si el
\fIformato\fP es \fBconfigure\fP, la salida se puede utilizar en la línea de
órdenes en un fichero \fB./configure\fP. Se asume \fBsh\fP si no se introduce el
valor \fIformato\fP. Sólo se incluyen opciones de compilación que empiezan con
un carácter en mayúscula, se asume que los otros no son adecuados para el
entorno.
.TP 
\fB\-\-get\fP\fI opción\fP
Muestra el valor de la opción por la salida estándar. Cierra con valor 0 si
la opción es conocida, y el valor 1 en caso contrario.
.TP 
\fB\-\-origin\fP\fI opción\fP
Muestra el origen del valor obtenido con \fB\-\-get\fP. Cierra con valor 0 si la
opción es conocida, y el valor 1 en caso contrario. El origen puede ser
cualquiera de las siguientes opciones:
.RS
.TP 
\fBvendor\fP
Devuelve la opción originalmente definida por el proveedor;
.TP 
\fBsystem\fP
La opción se define/modifica con una configuración que afecta a todo el
sistema;
.TP 
\fBuser\fP
La opción se define/modifica con una configuración específica del usuario;
.TP 
\fBenv\fP
La opción se define/modifica con una configuración específica del entorno.
.RE
.TP 
\fB\-\-query\-features\fP\fI área\fP
Muestra las funcionalidades activas para el área dada. La única sección
actualmente admitida es \fBhardening\fP. Cierra con un valor de cero si el área
es conocido, y con el valor 1 en caso contrario.
.IP
El formato de la salida es de tipo cabecera RFC822, con una sección por
funcionalidad. Por ejemplo:
.IP
.nf
  Feature: pie
  Enabled: no

  Feature: stackprotector
  Enabled: yes
.fi
.TP 
\fB\-\-help\fP
Muestra el modo de uso y termina.
.TP 
\fB\-\-version\fP
Muestra la versión y termina.
.
.SH "OPCIONES ACEPTADAS"
.TP 
\fBCFLAGS\fP
Opciones para el compilador C. El valor por omisión definido por el
proveedor incluye \fI\-g\fP y el nivel de optimización predefinido
(habitualmente \fI\-O2\fP, o \fI\-O0\fP si la variable de entorno
\fBDEB_BUILD_OPTIONS\fP define \fInoopt\fP).
.TP 
\fBCPPFLAGS\fP
Opciones para el preprocesador C. Valor por omisión: vacío.
.TP 
\fBCXXFLAGS\fP
Opciones para el compilador C++. Idéntica a \fBCFLAGS\fP.
.TP 
\fBFFLAGS\fP
Opciones para el compilador Fortran. Idéntica a \fBCFLAGS\fP.
.TP 
\fBLDFLAGS\fP
Opciones introducidas al compilador al enlazar ejecutables u objetos
compartidos (en el caso de ejecutar al enlazador directamente, debe eliminar
\fB\-Wl\fP y «\fB,\fP» de estas opciones). Valor por omisión: vacío.
.
.SH FICHEROS
.TP 
\fB/etc/dpkg/buildflags.conf\fP
Fichero de configuración de todo el sistema.
.TP 
\fB$XDG_CONFIG_HOME/dpkg/buildflags.conf\fP o \fB$HOME/.config/dpkg/buildflags.conf\fP
Fichero de configuración del usuario.
.SH ENTORNO
Existen dos conjuntos de variables de entorno que realizan las mismas
funciones, y no se debe utilizar el primero (DEB_\fIopción\fP_\fIop\fP) en un
fichero \fBdebian/rules\fP. Sirve para reconstruir el paquete fuente con otras
opciones de compilación. El segundo conjunto ((DEB_\fIopción\fP_MAINT_\fIop\fP)
solo se debe utilizar en un fichero \fBdebian/rules\fP mediante encargados de
paquete para modificar las opciones de compilación.
.TP 
\fBDEB_\fP\fIopción\fP\fB_SET\fP
.TQ
\fBDEB_\fP\fIopción\fP\fB_MAINT_SET\fP
Esta variable sirve para forzar el valor devuelto para la \fIopción\fP dada.
.TP 
\fBDEB_\fP\fIopción\fP\fB_STRIP\fP
.TQ
\fBDEB_\fP\fIopción\fP\fB_MAINT_STRIP\fP
Esta variable ofrece una lista separada por espacios de opciones que
eliminar del conjunto de opciones devuelto por la \fIopción\fP dada.
.TP 
\fBDEB_\fP\fIopción\fP\fB_APPEND\fP
.TQ
\fBDEB_\fP\fIopción\fP\fB_MAINT_APPEND\fP
Esta variable añade opciones adicionales al valor devuelto por la \fIopción\fP
dada.
.TP 
\fBDEB_\fP\fIopción\fP\fB_PREPEND\fP
.TQ
\fBDEB_\fP\fIopción\fP\fB_MAINT_PREPEND\fP
Esta variable prefija opciones adicionales al valor devuelto por la
\fIopción\fP dada.
.TP 
\fBDEB_BUILD_MAINT_OPTIONS\fP
Esta variable se puede utilizar para desactivar/activar varias opciones de
compilación de seguridad a través de la opción \fBhardening\fP. Para más
detalles, consulte la sección \fBAUMENTAR LA SEGURIDAD\fP.
.
.SH "AUMENTAR LA SEGURIDAD"
Se pueden utilizar varias opciones de tiempo de compilación (explicadas a
continuación) para aumentar la seguridad (hardening) de un binario
resultante frente a ataques de corrupción de memoria, u ofrecer mensajes de
aviso durante la compilación. A menos que se especifique lo contrario, están
activas por omisión para las arquitecturas que las admiten.
.P
Cada opción de seguridad se puede activar o desactivar incluyendo el valor
\fBhardening\fP en la variable de entorno \fBDEB_BUILD_MAINT_OPTIONS\fP con los
modificadores «+» y «\-». Por ejemplo, para activar la funcionalidad «pie» y
desactivar la funcionalidad «fortify», puede utilizar lo siguiente en
\fBdebian/rules\fP:
.P
  export DEB_BUILD_MAINT_OPTIONS=hardening=+pie,\-fortify
.P
La funcionalidad especial \fBall\fP se puede utilizar para activar o desactivar
todas las funcionalidades de seguridad de forma simultánea. Así, lo
siguiente desactiva todo, y solo activa «format» y «fortify»:
.P
  export DEB_BUILD_MAINT_OPTIONS=hardening=\-all,+format,+fortify
.
.TP 
\fBformat\fP
Esta opción (activa por omisión) añade \fB\-Wformat \-Werror=format\-security\fP a
\fBCFLAGS\fP y \fBCXXFLAGS\fP. Esto avisa de usos inadecuados de cadena formato, y
falla si las funciones de forma se utilizan de forma que supongan un
problema potencial de seguridad. Actualmente, avisa de invocaciones a las
funciones \fBprintf\fP y \fBscanf\fP cuando la cadena formato no es una cadena
literal y no hay argumentos de formato; por ejemplo \fBprintf(foo);\fP en lugar
\fBprintf("%s", foo);\fP. Esto puede suponer una vulnerabilidad si la cadena
formato proviene de una entrada no de confianza y contiene "%n".
.
.TP 
\fBfortify\fP
Esta opción (activa por omisión) añade \fB\-D_FORTIFY_SOURCE=2\fP a
\fBCPPFLAGS\fP. Durante la generación de código, el compilador conoce una gran
cantidad de información de tamaños de búfer (si es posible), e intenta
sustituir invocaciones no seguras de función sin límite de longitud de búfer
con invocaciones de longitud limitada. Es muy útil para código antiguo y sin
mantener. Además, se bloquean las cadenas formato en memoria con permisos de
escritura que contengan «%n». Si una aplicación depende de una cadena
formato con esta característica, necesitará una alternativa.

Tenga en cuenta que para que esta opción tenga efecto, las fuentes también
se deben compilar con \fB\-O1\fP o superior.
.TP 
\fBstackprotector\fP
Esta opción (activa por omisión) añade \fB\-fstack\-protector
\-\-param=ssp\-buffer\-size=4\fP a \fBCFLAGS\fP y \fBCXXFLAGS\fP. Esto añade
comprobaciones de seguridad frente a sobrescrituras de pila. Provoca que
varios ataques potenciales de inyección de código se deriven en
interrupciones del proceso. En el mejor de los casos, convierte
vulnerabilidades frente a una inyección de código en una negación de
servicio o bien en un problema sin efecto (depende de la aplicación).

Esta funcionalidad requiere el enlazado con glibc (u otro proveedor de
\fB__stack_chk_fail\fP), y se debe desactivar al construir con \fB\-nostdlib\fP,
\fB\-ffreestanding\fP, o similar.
.
.TP 
\fBrelro\fP
Esta opción (activa por omisión) añade \fB\-Wl,\-z,relro\fP a \fBLDFLAGS\fP. Durante
la carga del programa, el enlazador debe escribir en varias zonas de memoria
ELF. Esto indica al cargador que estas zonas sean de solo lectura antes de
entregar el control al programa. Básicamente, impide ataques de
sobrescritura GOT. Si se desactiva esta opción, se desactiva también
\fBbindnow\fP.
.
.TP 
\fBbindnow\fP
Esta opción (desactivada por omisión) añade \fB\-Wl,\-z,now\fP a
\fBLDFLAGS\fP. Durante la carga del programa, se resuelven todos los símbolos
dinámicos, lo que permite que se marque el total de PLT como solo escritura
(debido a \fBrelro\fP, arriba). Esta opción no se puede activar si no se activa
\fBrelro\fP.
.
.TP 
\fBpie\fP
Esta opción (por omisión, desactivada) añade \fB\-fPIE\fP a \fBCFLAGS\fP and
\fBCXXFLAGS\fP, y \fB\-fPIE \-pie\fP a \fBLDFLAGS\fP. Se requiere «Position Independent
Executable» para obtener los beneficios de «Address Space Layout
Randomization», compatible con algunas versiones de núcleos. Aunque se puede
forzar ASLR para áreas de datos en la pila y en el almacén de libres (brk y
mmap), las áreas de código se deben compilar independientes de posición. Las
bibliotecas compartidas lo realizan (\-fPIC), de forma que obtienen ASLR de
forma automática, pero las regiones «.text» binarias se deben construir con
PIE para obtener ASLR. Cuando esto ocurre, los ataques ROP (Return Oriented
Programming) son más difíciles al no existir ubicaciones estáticas donde
realizar un efecto rebote durante los ataques de corrupción de memoria.

No es compatible con \fB\-fPIC\fP, tenga cuidado al construir objetos
compartidos.

Además, debido a que se implementa PIE a través de un registro general,
algunas arquitecturas (basicamente, i386) pueden sufrir una pérdida de
potencia de hasta un 15% en cargas de trabajo de aplicaciones de segmento de
texto de alto rendimiento; la mayoría de cargas de trabajo sufren menos de
un 1%. Las arquitecturas con registros más generales (por ejemplo, amd64) no
se ven afectados con la misma gravedad.
.SH "TRADUCTOR"
Rudy Godoy <rudy@kernel\-panik.org>,
Rubén Porras <nahoo@inicia.es>,
Bruno Barrera C. <bruno.barrera@igloo.cl>,
Carlos Izquierdo <gheesh@ertis.net>,
Esteban Manchado y
NOK.
Debian L10n Spanish <debian\-l10n\-spanish@lists.debian.org>.
.br
Revisiones por Santiago Vila <sanvila@unex.es>,
Javier Fernández\-Sanguino, Rubén Porras,
Luis Uribe y Omar Campagne.
