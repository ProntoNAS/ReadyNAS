.\" dpkg manual page - start-stop-daemon(8)
.\"
.\" Copyright Â© 1999 Klee Dienes <klee@mit.edu>
.\" Copyright Â© 1999 Ben Collins <bcollins@debian.org>
.\" Copyright Â© 2000-2001 Wichert Akkerman <wakkerma@debian.org>
.\" Copyright Â© 2002-2003 Adam Heath <doogie@debian.org>
.\" Copyright Â© 2004 Scott James Remnant <keybuk@debian.org>
.\" Copyright Â© 2008-2012 Guillem Jover <guillem@debian.org>
.\"
.\" This is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation; either version 2 of the License, or
.\" (at your option) any later version.
.\"
.\" This is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with this program.  If not, see <http://www.gnu.org/licenses/>.
.
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH start\-stop\-daemon 8 2012\-06\-17 Debianprojektet dpkg\-verktygen
.SH NAMN
start\-stop\-daemon \- startar och stoppar bakgrundsprocesser
.
.SH SYNOPS
\fBstart\-stop\-daemon\fP [\fIflagga\fP...] \fIåtgärd\fP
.
.SH BESKRIVNING
\fBstart\-stop\-daemon\fP används för att kontrollera hur processer på systemnivå
skapas och avslutas. Med hjälp av en av sökflaggorna kan
\fBstart\-stop\-daemon\fP ställas in att hitta befintliga instanser av en körande
process.
.PP
Observera att om inte \fB\-\-pidfile\fP anges kommer \fBstart\-stop\-daemon\fP att
jobba på ett sätt som liknar \fBkillall(1).\fP \fBstart\-stop\-daemon\fP kommer att
söka i processtabellen efter processer med motsvarande namn på processen,
användar\-id och/eller grupp\-id (om sådant anges). Alla processer som stämmer
överens kommer tillsändas signalen TERM (eller den som anges med \fB\-\-signal\fP
eller \fB\-\-retry\fP) om \fB\-\-stop\fP anges. För processer som har långlivade barn
som måste överleva en \fB\-\-stop\fP, måste du ange en pidfil.
.
.SH KOMMANDON
.TP 
\fB\-S\fP, \fB\-\-start\fP [\fB\-\-\fP] \fIargument\fP
Se om en angiven process existerar, och om så är fallet gör
\fBstart\-stop\-daemon\fP ingenting och avslutar med status 1 (0 om \fB\-\-oknodo\fP
anges). Om en sådan process inte existerar startas en instans, antingen med
programfilen som anges med \fB\-\-exec\fP eller, om den anges, med
\fB\-\-startas\fP. Eventuella argument som ges efter \fB\-\-\fP på kommandoraden
skickas utan ändring till programmet som startas.
.TP 
\fB\-K\fP, \fB\-\-stop\fP
Testa om den angivna processen existerar. Om så är fallet sänder
\fBstart\-stop\-daemon\fP den signal som anges av \fB\-\-signal\fP till processen, och
avslutar med status 0. Om processen inte finns avslutar \fBstart\-stop\-daemon\fP
med status 1 (0 om \fB\-\-oknodo\fP anges). Om \fB\-\-retry\fP anges kommer
\fBstart\-stop\-daemon\fP kontrollera att processen har avslutats.
.TP 
\fB\-T\fP, \fB\-\-status\fP
Se om den angivna processen existerar, och returnerar en statuskod i
enlighet med LBS Init Script Actions.
.TP 
\fB\-H\fP, \fB\-\-help\fP
Visa hjälpskärm och avsluta.
.TP 
\fB\-V\fP, \fB\-\-version\fP
Visa programversion och avsluta.
.
.SH "FLAGGOR FÖR SÖKNING"
.TP 
\fB\-p\fP, \fB\-\-pidfile\fP \fIpidfil\fP
Kontrollera om en process har skapat filen \fIpidfil\fP. Observera: om flaggan
används på egen hand kan den orsaka att oönskade processer berörs, om den
gamla processen avslutats utan att kunna ta bort \fIpidfil\fP.
.TP 
\fB\-x\fP, \fB\-\-exec\fP \fIprogramfil\fP
Se efter processer som är instanser av \fIprogramfil\fP. Flaggan \fIprogramfil\fP
bör vara en absolut sökväg. Observera: detta fungerar kanske inte som det
ska för tolkade skript eftersom programfilen kommer peka på tolken. Notera
att processer som körs inuti en chroot också kommer att träffas, så andra
begränsningar kan behövas.
.TP 
\fB\-n\fP, \fB\-\-name\fP \fIprocessnamn\fP
Se efter processer med namnet \fIprocessnamn\fP. \fIProcessnamn\fP är vanligtvis
processens filnamn, men kan ha ändrats av processen själv. Observera: på de
flesta system hämtas informationen från processens comm\-namn från kärnan,
vilket ofta har en relativt kort längdbegränsning (det är inte portablet att
anta fler än 15 tecken).
.TP 
\fB\-u\fP, \fB\-\-user\fP \fIanvändarnamn\fP|\fIanvändar\-id\fP
Se efter processer som ägs av användaren som anges av \fIanvändarnamn\fP eller
\fIanvänder\-id\fP. Observera: om den här flaggan används på egen hand träffas
alla processer som motsvarar användaren.
.
.SH FLAGGOR
.TP 
\fB\-g\fP, \fB\-\-group\fP \fIgrupp\fP|\fIgrupp\-id\fP
Byt till \fIgrupp\fP eller \fIgrupp\-id\fP när processen startas.
.TP 
\fB\-s\fP, \fB\-\-signal\fP \fIsignal\fP
Tillsammans med \fB\-\-stop\fP anger detta den signal som skall sändas till
processen som stoppas (förval är TERM).
.TP 
\fB\-R\fP, \fB\-\-retry\fP \fItidsgräns\fP|\fIschema\fP
Tillsammans med \fB\-\-stop\fP anger detta att \fBstart\-stop\-daemon\fP skall
kontrollera att processen avslutas. Den testar flera gånger efter matchande
processer som körs, tills ingen längre finns kvar. Om processerna inte
avslutar kommer programmet utföra ytterligare kommandon enligt schemat.

Om \fItidsgräns\fP anges istället för \fIschema\fP kommer schemat
\fIsignal\fP\fB/\fP\fItimeout\fP\fB/KILL/\fP\fItimeout\fP att användas, där \fIsignal\fP är
den signal som anges med \fB\-\-signal\fP.

\fIschema\fP är den lista med åtminstone två poster avdelade med snedstreck
(\fB/\fP); varje post är antingen \fB\-\fP\fIsignalnummer\fP eller
[\fB\-\fP]\fIsignalnamn\fP, vilket betyder att signalen skall sändas, eller
\fItimeout\fP, vilket anger det antal sekunder programmet skall vänta på att
processen avslutar, eller \fBforever\fP, vilket betyder att resten av schemat
skall repetera för evigt om så behövs.

Om slutet på schemat nås och \fBforever\fP inte anges kommer
\fBstart\-stop\-daemon\fP avslutas med felkod 2. Om ett schema anges kommer
eventuell signal angiven med \fB\-\-signal\fP att ignoreras.
.TP 
\fB\-a\fP, \fB\-\-startas\fP \fIsökväg\fP
Tillsammans med \fB\-\-start\fP anger detta att processen som anges med \fIsökväg\fP
skall startas. Om den inte anges används argumentet som gavs till \fB\-\-exec\fP.
.TP 
\fB\-t\fP, \fB\-\-test\fP
Skriver ut vad som skulle ha utförts och sätter returvärdet, men utför
ingenting.
.TP 
\fB\-o\fP, \fB\-\-oknodo\fP
Returnerar felstatus 0 i stället för 1 om ingen åtgärd utförs/skulle
utförts.
.TP 
\fB\-q\fP, \fB\-\-quiet\fP
Skriv inte informationsmeddelanden; visa endast felmeddelanden.
.TP 
\fB\-c\fP, \fB\-\-chuid\fP \fIanvändarnamn\fP|\fIanvändar\-id\fP[\fB:\fP\fIgrupp\fP|\fIgrupp\-id\fP]
Byt till användarnamnet/användar\-id:t innan processen startas. Du kan även
ange en grupp genom att lägga till ett kolontecken, \fB:\fP, följt av
gruppnamnet eller grupp\-id på samma sätt som du skull gjort till
"chown"\-kommandot (\fIanvändare\fP\fB:\fP\fIgrupp\fP). Om du anger en användare utan
att ange en grupp kommer användarens primära grupp\-id att användas. När du
använder alternativet måste du ha i åtanke att även både primär\- och
tilläggsgrupp sätts, även om \fB\-\-group\fP\-flaggan inte
anges. \fB\-\-group\fP\-flaggan är bara till för grupper som användaren normalt
inte är en medlem i (t.ex för att lägga till gruppmedlemskap för enskilda
processer för standardanvändare såsom \fBnobody\fP).
.TP 
\fB\-r\fP, \fB\-\-chroot\fP \fIrot\fP
Byt katalog och rot till \fBrot\fP innan processen startas. Observera att även
pidfilen skrivs efter chroot har utförts.
.TP 
\fB\-d\fP, \fB\-\-chdir\fP \fIsökväg\fP
Byt katalog till \fIsökväg\fP innan processen startas. Detta görs efter byte av
rot om \fB\-r\fP|\fB\-\-chroot\fP\-flaggan anges. Om flaggan inte anges kommer
start\-stop\-daemon byta till rotkatalogen innan processen startas.
.TP 
\fB\-b\fP, \fB\-\-background\fP
Används typiskt med program som inte kopplar loss sig av sig själva. Flagga
tvingar \fBstart\-stop\-daemon\fP att förgrena sig (fork) innan processen
startar, och tvinga den grenen att köra i bakgrunden. \fBVARNING:
start\-stop\-daemon\fP kan inte kontrollera felstatus för processer som av
\fBnågon som helst\fP anledning misslyckas med att exekvera. Detta är en sista
utväg, och är endast avsett för program som det antingen inte är någon
mening att förgrena på egen hand, eller där det inte är möjligt att lägga
till kod för det på egen hand.
.TP 
\fB\-C\fP, \fB\-\-no\-close\fP
Stäng inte filbeskrivare när serverprocessen tvingas till bakgrunden. Använd
för felsöknignssyften för att se processutdata, eller för att omdirigera
filbeskrivare för att logga processutdata. Endast relevant när
\fB\-\-background\fP används.
.TP 
\fB\-N\fP, \fB\-\-nicelevel\fP \fIheltal\fP
Ändrar prioriteten på processen innan den startas.
.TP 
\fB\-P\fP, \fB\-\-procsched\fP \fIpolicy\fP\fB:\fP\fIprioritet\fP
Ändrar processschemaläggarens policy och prioritet för processen innan den
startas. Prioriteten är valfri och anges genom att lägga till ett \fB:\fP följt
av värdet. Standardvärdet för \fIprioritet\fP är 0. För närvarande stöds
värdena \fBother\fP, \fBfifo\fP och \fBrr\fP för \fIpolicy\fP.
.TP 
\fB\-I\fP, \fB\-\-iosched\fP \fIklass\fP\fB:\fP\fIprioritet\fP
Ändrar I/O\-schemaläggarens klass och \-prioritet för processen innan den
startas. Prioriteten är valfri och anges genom att lägga till ett \fB:\fP följt
av värdet. Standardvärdet för \fIprioritet\fP är 4, såvida inte \fIklass\fP är
\fBidle\fP, då är \fIprioritet\fP alltid 7. För närvarande stöds värdena \fBidle\fP,
\fBbest\-effort\fP och \fBreal\-time\fP för \fIklass\fP.
.TP 
\fB\-k\fP, \fB\-\-umask\fP \fImaskvärde\fP
Ställer in umaskvärdet på processen innan den startas.
.TP 
\fB\-m\fP, \fB\-\-make\-pidfile\fP
Används när ett program som inte skapar sin egen pidfil startas. Flaggan
kommer att få \fBstart\-stop\-daemon\fP att skapa filen som anges med
\fB\-\-pidfile\fP och lägga process\-id i den precis innan processen
startas. Observera att den inte kommer att tas bort när programmet
stoppas. \fBOBSERVERA:\fP Funktionen kanske inte alltid fungerar. Framförallt
inte när programmet som startas förgrenar sig (fork) från sin
huvudprocess. Därför är flaggan oftast bara användbar i samband med flaggan
\fB\-\-background\fP.
.TP 
\fB\-v\fP, \fB\-\-verbose\fP
Skriv ut pratsamma informationsmeddelanden.
.
.SH RETURVÄRDE
.TP 
\fB0\fP
Efterfrågad åtgärd utfördes. Om \fB\-\-oknodo\fP angavs är det även möjligt att
ingenting behövde utföras. Det kan hända när \fB\-\-start\fP angavs och en
motsvarande process redan körde, eller när \fB\-\-stop\fP angavs och det inte
fanns någon motsvarande process.
.TP 
\fB1\fP
Om \fB\-\-oknodo\fP inte angavs och ingenting gjordes.
.TP 
\fB2\fP
Om \fB\-\-stop\fP och \fB\-\-retry\fP angavs, men slutet på tidtabellen nåddes och
processen fortfarande kördes.
.TP 
\fB3\fP
Alla andra fel.
.PP
Med \fB\-\-status\fP\-åtgärden returneras följande statuskoder:
.TP 
\fB0\fP
Programmet kör.
.TP 
\fB1\fP
Programmet kör inte och pid\-filen finns.
.TP 
\fB3\fP
Programmet kör inte.
.TP 
\fB4\fP
Kan inte ta reda på programmets status.
.
.SH EXEMPEL
Starta serverprocessen \fBfood\fP, såvida inte en redan kör (en process med
namnet food, som körs som användaren food, med process\-id i food.pid):
.IP
.nf
start\-stop\-daemon \-\-start \-\-oknodo \-\-user food \-\-name food \e
	\-\-pidfile /run/food.pid \-\-startas /usr/sbin/food \e
	\-\-chuid food \-\- \-\-daemon
.fi
.PP
Sänd \fBSIGTERM\fP till \fBfood\fP och vänta upp till fem sekunder på att den
skall avslutas:
.IP
.nf
start\-stop\-daemon \-\-stop \-\-oknodo \-\-user food \-\-name food \e
	\-\-pidfile /run/food.pid \-\-retry 5
.fi
.PP
Demonstration av ett skräddarsytt schema för att avsluta \fBfood\fP:
.IP
.nf
start\-stop\-daemon \-\-stop \-\-oknodo \-\-user food \-\-name food \e
	\-\-pidfile /run/food.pid \-\-retry=TERM/30/KILL/5
.fi
.SH "ÖVERSÄTTNING"
Peter Krefting och Daniel Nylander.
