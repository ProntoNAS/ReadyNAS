Patch from  Michal 'hramrach' Suchanek" <hramrach_l@centrum.cz>

Index: Linux-PAM/modules/pam_mkhomedir/pam_mkhomedir.c
===================================================================
RCS file: /afs/sipb/project/debian/cvs/pam/Linux-PAM/modules/pam_mkhomedir/pam_mkhomedir.c,v
retrieving revision 1.3
diff -u -r1.3 pam_mkhomedir.c
--- Linux-PAM/modules/pam_mkhomedir/pam_mkhomedir.c	15 Sep 2002 20:18:00 -0000	1.3
+++ Linux-PAM/modules/pam_mkhomedir/pam_mkhomedir.c	25 Nov 2002 02:40:01 -0000
@@ -217,7 +217,15 @@
       int DestFd;
       int Res;
       struct stat St;
+#ifndef PATH_MAX
+      char *newsource=NULL, *newdest=NULL;
+      /* track length of buffers */
+      int nslen=0, ndlen=0,
+	slen=strlen(source), dlen=strlen(dest);
+      /* XXX should I check for strlen, sprintf, malloc ? */
+#else
       char newsource[PATH_MAX], newdest[PATH_MAX];
+#endif
 
       /* Skip some files.. */
       if (strcmp(Dir->d_name,".") == 0 ||
@@ -225,37 +233,103 @@
 	 continue;
 
       /* Determine what kind of file it is. */
+#ifndef PATH_MAX
+      nslen=slen+strlen(Dir->d_name)+2;
+      if((newsource=malloc(nslen))==NULL){
+	return PAM_BUF_ERR;
+      }
+      sprintf(newsource,"%s/%s",source,Dir->d_name);
+#else
       snprintf(newsource,sizeof(newsource),"%s/%s",source,Dir->d_name);
+#endif
       if (lstat(newsource,&St) != 0)
+#ifndef PATH_MAX
+      {
+	 free(newsource);newsource=NULL;
+	 continue;
+      }
+#else
          continue;
+#endif
+
 
       /* We'll need the new file's name. */
+#ifndef PATH_MAX
+      ndlen=dlen+strlen(Dir->d_name)+2;
+      if((newdest=malloc(ndlen))==NULL){
+	free(newsource);
+	return PAM_BUF_ERR;
+      }
+      sprintf(newdest,"%s/%s",dest,Dir->d_name);
+#else
       snprintf(newdest,sizeof(newdest),"%s/%s",dest,Dir->d_name);
+#endif
 
       /* If it's a directory, recurse. */
       if (S_ISDIR(St.st_mode))
       {
          create_homedir(pamh, ctrl, pwd, newsource, newdest);
+#ifndef PATH_MAX
+	 free(newsource);newsource=NULL;
+	 free(newdest);newdest=NULL;
+#endif
          continue;
       }
 
       /* If it's a symlink, create a new link. */
       if (S_ISLNK(St.st_mode))
       {
+	int pointedlen;
+#ifndef PATH_MAX
+        char *pointed=NULL;
+          {
+            int size = 100;
+          
+            while (1)
+              {
+                pointed = (char *) malloc (size);
+		if(!pointed){
+	 	  free(newsource); free(newdest);
+		  return PAM_BUF_ERR;
+		}
+                pointedlen = readlink (newsource, pointed, size);
+                if (pointedlen < 0) break;
+                if (pointedlen < size) break;
+                free (pointed);
+                size *= 2;
+              }
+          }
+	 if(pointedlen<0)
+	    free(pointed);
+	 else
+	    pointed[pointedlen]=0;
+#else
          char pointed[PATH_MAX];
          memset(pointed, 0, sizeof(pointed));
-         if(readlink(newsource, pointed, sizeof(pointed) - 1) != -1)
-         {
+	 pointedlen=readlink(newsource, pointed, sizeof(pointed) - 1);
+#endif
+         if(pointedlen>=0) {
             if(symlink(pointed, newdest) == 0)
             {
                if (lchown(newdest,pwd->pw_uid,pwd->pw_gid) != 0)
                {
-                   _log_err(LOG_DEBUG, "unable to chang perms on link %s",
+                   _log_err(LOG_DEBUG, "unable to change perms on link %s",
                             newdest);
+#ifndef PATH_MAX
+	           free(pointed);
+	           free(newsource); free(newdest);
+#endif
                    return PAM_PERM_DENIED;
                }
             }
+#ifndef PATH_MAX
+	   free(pointed);
+#endif
          }
+#ifndef PATH_MAX
+	 free(newsource);newsource=NULL;
+	 free(newdest);newdest=NULL;
+#endif
          continue;
       }
 
@@ -263,6 +337,10 @@
        * the new device node, FIFO, or whatever it is. */
       if (!S_ISREG(St.st_mode))
       {
+#ifndef PATH_MAX
+	 free(newsource);newsource=NULL;
+	 free(newdest);newdest=NULL;
+#endif
          continue;
       }
 
@@ -270,6 +348,9 @@
       if ((SrcFd = open(newsource,O_RDONLY)) < 0 || fstat(SrcFd,&St) != 0)
       {
          _log_err(LOG_DEBUG, "unable to open src file %s",newsource);
+#ifndef PATH_MAX
+	 free(newsource); free(newdest);
+#endif
 	 return PAM_PERM_DENIED;
       }
       stat(newsource,&St);
@@ -279,6 +360,9 @@
       {
 	 close(SrcFd);
          _log_err(LOG_DEBUG, "unable to open dest file %s",newdest);
+#ifndef PATH_MAX
+	 free(newsource); free(newdest);
+#endif
 	 return PAM_PERM_DENIED;
       }
 
@@ -291,6 +375,9 @@
          close(SrcFd);
          close(DestFd);
          _log_err(LOG_DEBUG, "unable to chang perms on copy %s",newdest);
+#ifndef PATH_MAX
+	 free(newsource); free(newdest);
+#endif
 	 return PAM_PERM_DENIED;
       }
 
@@ -303,12 +390,19 @@
 	    close(SrcFd);
 	    close(DestFd);
 	    _log_err(LOG_DEBUG, "unable to perform IO");
+#ifndef PATH_MAX
+	    free(newsource); free(newdest);
+#endif
 	    return PAM_PERM_DENIED;
 	 }
       }
       while (Res != 0);
       close(SrcFd);
       close(DestFd);
+#ifndef PATH_MAX
+      free(newsource);newsource=NULL;
+      free(newdest);newdest=NULL;
+#endif
    }
 
    return PAM_SUCCESS;
