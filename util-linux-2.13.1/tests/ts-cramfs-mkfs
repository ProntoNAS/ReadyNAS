#!/bin/bash

#
# Copyright (C) 2007 Karel Zak <kzak@redhat.com>
#
# This file is part of util-linux-ng.
#
# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This file is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
. ./commands.sh
. ./functions.sh

TS_COMPONENT="mkfs.cramfs"
TS_DESC="mkfs"

ts_init "$*"
ts_skip_nonroot

set -o pipefail

IMAGE="$TS_OUTDIR/cramfs-loop.img"
IMAGE_DATA="$TS_OUTDIR/cramfs-data"
IMAGE_RE=$( echo $IMAGE | sed 's:/:\\/:g' )
LABEL="testCramfs"
TS_MOUNTPOINT="$TS_OUTDIR/cramfs-mnt"

ts_log "create mountpoint dir"

[ -d "$TS_MOUNTPOINT" ] || mkdir -p $TS_MOUNTPOINT

ts_log "generate data"
if [ ! -d "$IMAGE_DATA" ]; then
	mkdir -p $IMAGE_DATA
	for d in `seq 0 110`; do
		DIRNAME="$IMAGE_DATA/$(printf "dir-%03d" $d)"
		mkdir -p $DIRNAME
		for f in `seq 0 10`; do
			FILENAME="$DIRNAME/$(printf "data.%03d" $f)"
			printf "data in %03d-%03d" $d $f >> $FILENAME
		done
	done
fi

ts_log "list checksums from original data"
find $IMAGE_DATA -type f -exec md5sum {} \; >> $TS_OUTPUT
echo >> $TS_OUTPUT

ts_log "create cramfs image"
$TS_CMD_MKCRAMFS -n $LABEL $IMAGE_DATA $IMAGE 2>&1 >> $TS_OUTPUT
[ -s "$IMAGE" ] || ts_die "Cannot create $IMAGE"

ts_log "count MD5 from the image"
md5sum $IMAGE 2>&1 >> $TS_OUTPUT
echo >> $TS_OUTPUT

ts_log "create loop device from image"
ts_backup_cache
DEVICE=$( $TS_CMD_LOSETUP -f )
$TS_CMD_LOSETUP $DEVICE $IMAGE 2>&1 >> $TS_OUTPUT

ts_log "check the image"
ts_device_has "TYPE" "cramfs" $DEVICE
[  "$?" == "0" ] || ts_die "Cannot found cramfs on $DEVICE" $DEVICE

ts_udev_dev_support "by-label" $LABEL
[ "$?" == "0" ] || ts_skip "udev ignores /dev/loop*" $DEVICE

ts_log "mount the image"
$TS_CMD_MOUNT -L $LABEL $TS_MOUNTPOINT 2>&1 >> $TS_OUTPUT

# check it
grep -q $DEVICE /proc/mounts
[ "$?" == "0" ] || ts_die "Cannot found $DEVICE in /proc/mounts" $DEVICE

ts_log "list the image"
ls -laR $TS_MOUNTPOINT >> $TS_OUTPUT
echo >> $TS_OUTPUT

ts_log "list checksums from new data"
find $TS_MOUNTPOINT -type f -exec md5sum {} \; >> $TS_OUTPUT
echo >> $TS_OUTPUT

ts_log "umount the image"
$TS_CMD_UMOUNT $DEVICE
$TS_CMD_LOSETUP -d $DEVICE 2>&1 >> $TS_OUTPUT
ts_restore_cache
ts_finalize

