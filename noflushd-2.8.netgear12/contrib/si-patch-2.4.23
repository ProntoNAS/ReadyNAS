--- linux-2.4.24/drivers/scsi/sd.c.orig	2004-02-05 13:35:37.000000000 +0100
+++ linux-2.4.24/drivers/scsi/sd.c	2004-02-05 13:41:46.000000000 +0100
@@ -108,6 +108,7 @@
 static int sd_detect(Scsi_Device *);
 static void sd_detach(Scsi_Device *);
 static int sd_init_command(Scsi_Cmnd *);
+static void sd_devname(unsigned int, char *);
 
 static struct Scsi_Device_Template sd_template = {
 	name:"disk",
@@ -258,6 +259,11 @@
 		                return -EACCES;
 			return revalidate_scsidisk(dev, 1);
 
+		case SCSI_IOCTL_START_UNIT:
+		case SCSI_IOCTL_STOP_UNIT:
+			rscsi_disks[DEVICE_NR(dev)].spindown = 
+				(cmd == SCSI_IOCTL_STOP_UNIT);
+			/* fall through */
 		default:
 			return scsi_ioctl(rscsi_disks[DEVICE_NR(dev)].device , cmd, (void *) arg);
 	}
@@ -311,6 +317,13 @@
 	    SCpnt->request.rq_dev, block));
 
 	dpnt = &rscsi_disks[dev];
+
+	/* Handle spinup of idle disks. */
+	if (dpnt->spindown) {
+		dpnt->spindown = 0;
+		sd_init_onedisk(dev);
+	}
+	
 	if (dev >= sd_template.dev_max ||
 	    !dpnt->device ||
 	    !dpnt->device->online ||
--- linux-2.4.24/drivers/scsi/sd.h.orig	2002-08-03 02:39:44.000000000 +0200
+++ linux-2.4.24/drivers/scsi/sd.h	2004-02-05 13:42:32.000000000 +0100
@@ -26,6 +26,7 @@
 typedef struct scsi_disk {
 	unsigned capacity;	/* size in blocks */
 	Scsi_Device *device;
+	unsigned char spindown;	/* disk not spinning */
 	unsigned char ready;	/* flag ready for FLOPTICAL */
 	unsigned char write_prot;	/* flag write_protect for rmvable dev */
 	unsigned char sector_bit_size;	/* sector_size = 2 to the  bit size power */
