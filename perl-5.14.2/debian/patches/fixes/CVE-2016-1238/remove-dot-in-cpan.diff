From ac40b2f644e1acf5daa7cb0f5c69e6849c372b3a Mon Sep 17 00:00:00 2001
From: John Lightsey <lightsey@debian.org>
Date: Wed, 20 Jul 2016 16:32:39 -0500
Subject: cpan/: remove . from @INC when loading optional modules

This was originally against maint-5.24 where bignum, Pod::Perldoc and
ExtUtils::Command are in cpan/, but in 5.14 they are in dist/

Backport of Tony Cook's 5.22 patch to 5.14.

Bug: https://rt.perl.org/Public/Bug/Display.html?id=127834
Patch-Name: fixes/CVE-2016-1238/remove-dot-in-cpan.diff
---
 cpan/CPAN/lib/App/Cpan.pm                             | 19 +++++++++++++++----
 cpan/CPAN/lib/CPAN.pm                                 |  4 ++++
 cpan/Digest/Digest.pm                                 |  6 +++++-
 cpan/Encode/Encode.pm                                 |  2 ++
 cpan/File-Fetch/lib/File/Fetch.pm                     | 10 ++++++++++
 cpan/IO-Compress/lib/IO/Uncompress/AnyUncompress.pm   |  2 ++
 cpan/IPC-Cmd/lib/IPC/Cmd.pm                           |  4 ++++
 .../lib/Locale/Maketext/Simple.pm                     |  7 ++++++-
 cpan/Memoize/Memoize.pm                               |  6 +++++-
 cpan/Sys-Syslog/Syslog.pm                             |  2 ++
 cpan/libnet/Net/Config.pm                             |  7 ++++++-
 dist/ExtUtils-Command/lib/ExtUtils/Command.pm         |  5 ++++-
 dist/Pod-Perldoc/lib/Pod/Perldoc.pm                   |  5 +++++
 dist/bignum/lib/bigint.pm                             |  2 ++
 dist/bignum/lib/bignum.pm                             |  2 ++
 dist/bignum/lib/bigrat.pm                             |  2 ++
 16 files changed, 76 insertions(+), 9 deletions(-)

diff --git a/cpan/CPAN/lib/App/Cpan.pm b/cpan/CPAN/lib/App/Cpan.pm
index cfc1290..32e5102 100644
--- a/cpan/CPAN/lib/App/Cpan.pm
+++ b/cpan/CPAN/lib/App/Cpan.pm
@@ -399,9 +399,20 @@ sub AUTOLOAD { shift; print "NullLogger: ", @_, $/ if $ENV{CPAN_NULL_LOGGER} }
 sub DESTROY { 1 }
 }
 
+# load a module without searching the default entry for the current
+# directory
+sub _safe_load_module {
+  my $name = shift;
+
+  local @INC = @INC;
+  pop @INC if $INC[-1] eq '.';
+
+  eval "require $name; 1";
+}
+
 sub _init_logger
 	{
-	my $log4perl_loaded = eval "require Log::Log4perl; 1";
+	my $log4perl_loaded = _safe_load_module("Log::Log4perl");
 	
     unless( $log4perl_loaded )
         {
@@ -696,7 +707,7 @@ sub _get_file
 	{
 	my $path = shift;
 	
-	my $loaded = eval "require LWP::Simple; 1;";
+	my $loaded = _safe_load_module("LWP::Simple");
 	croak "You need LWP::Simple to use features that fetch files from CPAN\n"
 		unless $loaded;
 	
@@ -718,7 +729,7 @@ sub _gitify
 	{
 	my $args = shift;
 	
-	my $loaded = eval "require Archive::Extract; 1;";
+	my $loaded = _safe_load_module("Archive::Extract");
 	croak "You need Archive::Extract to use features that gitify distributions\n"
 		unless $loaded;
 	
@@ -782,7 +793,7 @@ sub _show_Changes
 sub _get_changes_file
 	{
 	croak "Reading Changes files requires LWP::Simple and URI\n"
-		unless eval "require LWP::Simple; require URI; 1";
+		unless _safe_load_module("LWP::Simple") && _safe_load_module("URI");
 	
     my $url = shift;
 
diff --git a/cpan/CPAN/lib/CPAN.pm b/cpan/CPAN/lib/CPAN.pm
index f83e298..102561b 100644
--- a/cpan/CPAN/lib/CPAN.pm
+++ b/cpan/CPAN/lib/CPAN.pm
@@ -1089,6 +1089,8 @@ sub has_usable {
                                ]
               };
     if ($usable->{$mod}) {
+        local @INC = @INC;
+        pop @INC if $INC[-1] eq '.';
         for my $c (0..$#{$usable->{$mod}}) {
             my $code = $usable->{$mod}[$c];
             my $ret = eval { &$code() };
@@ -1117,6 +1119,8 @@ sub has_inst {
       $CPAN::META->{dontload_hash}{$mod}||=1; # unsafe meta access, ok
       return 0;
     }
+    local @INC = @INC;
+    pop @INC if $INC[-1] eq '.';
     my $file = $mod;
     my $obj;
     $file =~ s|::|/|g;
diff --git a/cpan/Digest/Digest.pm b/cpan/Digest/Digest.pm
index d714434..56f681c 100644
--- a/cpan/Digest/Digest.pm
+++ b/cpan/Digest/Digest.pm
@@ -37,7 +37,11 @@ sub new
 	unless (exists ${"$class\::"}{"VERSION"}) {
 	    my $pm_file = $class . ".pm";
 	    $pm_file =~ s{::}{/}g;
-	    eval { require $pm_file };
+        eval {
+                local @INC = @INC;
+                pop @INC if $INC[-1] eq '.';
+                require $pm_file
+	    };
 	    if ($@) {
 		$err ||= $@;
 		next;
diff --git a/cpan/Encode/Encode.pm b/cpan/Encode/Encode.pm
index a8f0634..3e00687 100644
--- a/cpan/Encode/Encode.pm
+++ b/cpan/Encode/Encode.pm
@@ -57,6 +57,8 @@ require Encode::Config;
 eval {
     local $SIG{__DIE__};
     local $SIG{__WARN__};
+    local @INC = @INC;
+    pop @INC if $INC[-1] eq '.';
     require Encode::ConfigLocal;
 };
 
diff --git a/cpan/File-Fetch/lib/File/Fetch.pm b/cpan/File-Fetch/lib/File/Fetch.pm
index 5d0a51d..e2f3953 100644
--- a/cpan/File-Fetch/lib/File/Fetch.pm
+++ b/cpan/File-Fetch/lib/File/Fetch.pm
@@ -547,6 +547,8 @@ sub _lwp_fetch {
 
     };
 
+    local @INC = @INC;
+    pop @INC if $INC[-1] eq '.';
     if( can_load(modules => $use_list) ) {
 
         ### setup the uri object
@@ -600,6 +602,8 @@ sub _httptiny_fetch {
 
     };
 
+    local @INC = @INC;
+    pop @INC if $INC[-1] eq '.';
     if( can_load(modules => $use_list) ) {
 
         my $uri = $self->uri;
@@ -643,6 +647,8 @@ sub _httplite_fetch {
 
     # https://github.com/dagolden/cpanpm/compare/master...private%2Fuse-http-lite
 
+    local @INC = @INC;
+    pop @INC if $INC[-1] eq '.';
     if( can_load(modules => $use_list) ) {
 
         my $uri = $self->uri;
@@ -719,6 +725,8 @@ sub _iosock_fetch {
         'IO::Select'       => '0.0',
     };
 
+    local @INC = @INC;
+    pop @INC if $INC[-1] eq '.';
     if( can_load(modules => $use_list) ) {
         my $sock = IO::Socket::INET->new( 
             PeerHost => $self->host,
@@ -803,6 +811,8 @@ sub _netftp_fetch {
     ### required modules ###
     my $use_list = { 'Net::FTP' => 0 };
 
+    local @INC = @INC;
+    pop @INC if $INC[-1] eq '.';
     if( can_load( modules => $use_list ) ) {
 
         ### make connection ###
diff --git a/cpan/IO-Compress/lib/IO/Uncompress/AnyUncompress.pm b/cpan/IO-Compress/lib/IO/Uncompress/AnyUncompress.pm
index 64d2fa0..4e7d11a 100644
--- a/cpan/IO-Compress/lib/IO/Uncompress/AnyUncompress.pm
+++ b/cpan/IO-Compress/lib/IO/Uncompress/AnyUncompress.pm
@@ -27,6 +27,8 @@ Exporter::export_ok_tags('all');
 
 BEGIN
 {
+   local @INC = @INC;
+   pop @INC if $INC[-1] eq '.';
    eval ' use IO::Uncompress::Adapter::Inflate 2.033 ;';
    eval ' use IO::Uncompress::Adapter::Bunzip2 2.033 ;';
    eval ' use IO::Uncompress::Adapter::LZO 2.033 ;';
diff --git a/cpan/IPC-Cmd/lib/IPC/Cmd.pm b/cpan/IPC-Cmd/lib/IPC/Cmd.pm
index 5c59277..245d551 100644
--- a/cpan/IPC-Cmd/lib/IPC/Cmd.pm
+++ b/cpan/IPC-Cmd/lib/IPC/Cmd.pm
@@ -123,6 +123,8 @@ sub can_use_ipc_run     {
     return if IS_WIN98;
 
     ### if we dont have ipc::run, we obviously can't use it.
+    local @INC = @INC;
+    pop @INC if $INC[-1] eq '.'; 
     return unless can_load(
                         modules => { 'IPC::Run' => '0.55' },        
                         verbose => ($WARN && $verbose),
@@ -150,6 +152,8 @@ sub can_use_ipc_open3   {
 
     ### IPC::Open3 works on every non-VMS platform platform, but it can't 
     ### capture buffers on win32 :(
+    local @INC = @INC;
+    pop @INC if $INC[-1] eq '.';
     return unless can_load(
         modules => { map {$_ => '0.0'} qw|IPC::Open3 IO::Select Symbol| },
         verbose => ($WARN && $verbose),
diff --git a/cpan/Locale-Maketext-Simple/lib/Locale/Maketext/Simple.pm b/cpan/Locale-Maketext-Simple/lib/Locale/Maketext/Simple.pm
index 30760f3..9465c52 100644
--- a/cpan/Locale-Maketext-Simple/lib/Locale/Maketext/Simple.pm
+++ b/cpan/Locale-Maketext-Simple/lib/Locale/Maketext/Simple.pm
@@ -134,7 +134,12 @@ sub load_loc {
     my $pkg = join('::', grep { defined and length } $args{Class}, $args{Subclass});
     return $Loc{$pkg} if exists $Loc{$pkg};
 
-    eval { require Locale::Maketext::Lexicon; 1 }   or return;
+    eval {
+        local @INC = @INC;
+        pop @INC if $INC[-1] eq '.';
+        require Locale::Maketext::Lexicon;
+        1
+    } or return;
     $Locale::Maketext::Lexicon::VERSION > 0.20	    or return;
     eval { require File::Spec; 1 }		    or return;
 
diff --git a/cpan/Memoize/Memoize.pm b/cpan/Memoize/Memoize.pm
index 1ebc174..f208b73 100644
--- a/cpan/Memoize/Memoize.pm
+++ b/cpan/Memoize/Memoize.pm
@@ -185,7 +185,11 @@ sub _my_tie {
   }
   my $modulefile = $module . '.pm';
   $modulefile =~ s{::}{/}g;
-  eval { require $modulefile };
+  eval {
+    local @INC = @INC;
+    pop @INC if $INC[-1] eq '.';
+    require $modulefile
+  };
   if ($@) {
     croak "Memoize: Couldn't load hash tie module `$module': $@; aborting";
   }
diff --git a/cpan/Sys-Syslog/Syslog.pm b/cpan/Sys-Syslog/Syslog.pm
index b445c66..f160f24 100644
--- a/cpan/Sys-Syslog/Syslog.pm
+++ b/cpan/Sys-Syslog/Syslog.pm
@@ -818,6 +818,8 @@ sub silent_eval (&) {
 
 sub can_load {
     local($SIG{__DIE__}, $SIG{__WARN__}, $@);
+    local @INC = @INC;
+    pop @INC if $INC[-1] eq '.';
     return eval "use $_[0]; 1"
 }
 
diff --git a/cpan/libnet/Net/Config.pm b/cpan/libnet/Net/Config.pm
index 8404593..0c0b8d8 100644
--- a/cpan/libnet/Net/Config.pm
+++ b/cpan/libnet/Net/Config.pm
@@ -15,7 +15,12 @@ use strict;
 @ISA     = qw(Net::LocalCfg Exporter);
 $VERSION = "1.11";
 
-eval { local $SIG{__DIE__}; require Net::LocalCfg };
+eval {
+  local @INC = @INC;
+  pop @INC if $INC[-1] eq '.';
+  local $SIG{__DIE__};
+  require Net::LocalCfg;
+};
 
 %NetConfig = (
   nntp_hosts      => [],
diff --git a/dist/ExtUtils-Command/lib/ExtUtils/Command.pm b/dist/ExtUtils-Command/lib/ExtUtils/Command.pm
index 2a4d8cd..400e143 100644
--- a/dist/ExtUtils-Command/lib/ExtUtils/Command.pm
+++ b/dist/ExtUtils-Command/lib/ExtUtils/Command.pm
@@ -24,7 +24,10 @@ if( $Is_VMS ) {
     my $vms_efs;
     my $vms_case;
 
-    if (eval { local $SIG{__DIE__}; require VMS::Feature; }) {
+    if (eval { local $SIG{__DIE__};
+               local @INC = @INC;
+               pop @INC if $INC[-1] eq '.';
+               require VMS::Feature; }) {
         $vms_unix_rpt = VMS::Feature::current("filename_unix_report");
         $vms_efs = VMS::Feature::current("efs_charset");
         $vms_case = VMS::Feature::current("efs_case_preserve");
diff --git a/dist/Pod-Perldoc/lib/Pod/Perldoc.pm b/dist/Pod-Perldoc/lib/Pod/Perldoc.pm
index 083a6e9..9cf7830 100644
--- a/dist/Pod-Perldoc/lib/Pod/Perldoc.pm
+++ b/dist/Pod-Perldoc/lib/Pod/Perldoc.pm
@@ -461,6 +461,9 @@ sub find_good_formatter_class {
   my @class_list = @{ $self->{'formatter_classes'} || [] };
   die "WHAT?  Nothing in the formatter class list!?" unless @class_list;
   
+  local @INC = @INC;
+  pop @INC if $INC[-1] eq '.';
+
   my $good_class_found;
   foreach my $c (@class_list) {
     DEBUG > 4 and print "Trying to load $c...\n";
@@ -851,6 +854,8 @@ sub new_translator { # $tr = $self->new_translator($lang);
     my $self = shift;
     my $lang = shift;
 
+    local @INC = @INC;
+    pop @INC if $INC[-1] eq '.';
     my $pack = 'POD2::' . uc($lang);
     eval "require $pack";
     if ( !$@ && $pack->can('new') ) {
diff --git a/dist/bignum/lib/bigint.pm b/dist/bignum/lib/bigint.pm
index 4852590..c4ead83 100644
--- a/dist/bignum/lib/bigint.pm
+++ b/dist/bignum/lib/bigint.pm
@@ -231,6 +231,8 @@ sub import
     # see if we can find Math::BigInt::Lite
     if (!defined $a && !defined $p)		# rounding won't work to well
       {
+      local @INC = @INC;
+      pop @INC if $INC[-1] eq '.';
       eval 'require Math::BigInt::Lite;';
       if ($@ eq '')
         {
diff --git a/dist/bignum/lib/bignum.pm b/dist/bignum/lib/bignum.pm
index 7c6381d..28f91ab 100644
--- a/dist/bignum/lib/bignum.pm
+++ b/dist/bignum/lib/bignum.pm
@@ -183,6 +183,8 @@ sub import
     # see if we can find Math::BigInt::Lite
     if (!defined $a && !defined $p)		# rounding won't work to well
       {
+      local @INC = @INC;
+      pop @INC if $INC[-1] eq '.';
       eval 'require Math::BigInt::Lite;';
       if ($@ eq '')
         {
diff --git a/dist/bignum/lib/bigrat.pm b/dist/bignum/lib/bigrat.pm
index 907c13c..9374b04 100644
--- a/dist/bignum/lib/bigrat.pm
+++ b/dist/bignum/lib/bigrat.pm
@@ -175,6 +175,8 @@ sub import
     # see if we can find Math::BigInt::Lite
     if (!defined $a && !defined $p)             # rounding won't work to well
       {
+      local @INC = @INC;
+      pop @INC if $INC[-1] eq '.';
       eval 'require Math::BigInt::Lite;';
       if ($@ eq '')
         {
