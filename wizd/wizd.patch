diff -u -r1.16 makefile
--- makefile	17 Mar 2007 14:12:00 -0000	1.16
+++ makefile	30 Aug 2007 00:34:17 -0000
@@ -12,15 +12,8 @@
 CFLAGS += -D_LARGEFILE_SOURCE
 ### -- If you dont want to use JPEG resize feature, comment it out.
 CFLAGS += -DRESIZE_JPEG
-CFLAGS += -I/usr/local/include
-LDFLAGS += -static
-LDFLAGS += -L/usr/local/lib -ljpeg -ldvdread
-LDFLAGS += -lm
-
-# keep the following lines only if you have the w32api library
-# used for handling windows shortcut files
-LDFLAGS += -L/lib/w32api -lole32 -luuid
-CFLAGS += -DHAVE_W32API
+CFLAGS += -I/usr/include
+LDFLAGS += -ljpeg -ldvdread -lm
 
 ### --
 LDFLAGS += -s	# strip symbols
diff -u -r1.24 wizd_main.c
--- wizd_main.c	23 Feb 2007 00:34:10 -0000	1.24
+++ wizd_main.c	30 Aug 2007 00:34:18 -0000
@@ -423,11 +423,11 @@
 	act.sa_flags = SA_RESETHAND;
 	sigemptyset(&act.sa_mask);
 	sigaction(SIGINT, &act, NULL);
+	sigaction(SIGTERM, &act, NULL);
 
 	return;
 }
 
-
 // **************************************************************************
 // SIGINT handler kills off the SSDP process too
 // **************************************************************************
diff -u -r1.49 wizd_menu.c
--- wizd_menu.c	17 Mar 2007 14:12:01 -0000	1.49
+++ wizd_menu.c	30 Aug 2007 00:34:21 -0000
@@ -3996,6 +3996,15 @@
 		"RECYCLER",
 		"System Volume Information",
 		"cgi-bin",
+		".AppleDouble",
+		".AppleDB",
+		".AppleDesktop",
+		":2eDS_Store",
+		":2eTemporaryItems",
+		"TheVolumeSettingsFolder",
+		"TheFindByContentFolder",
+		"Network Trash Folder",
+		"Temporary Items",
 	};
 	int ignore_count = sizeof(ignore_names) / sizeof(char*);
 
@@ -6091,7 +6100,7 @@
 	// ファイル名 生成 (表示用)
 	// EUCに変換 → 拡張子削除 → (必要なら)半角文字を全角に変換 → MediaWizコードに変換 → SJISなら、不正文字コード0x7C('|')を含む文字を伏せ字に。
 	// ---------------------------------
-# if 0
+# if 1
 	convert_language_code(	src_name,
 							dist_name,
 							dist_size,
diff -u -r1.39 wizd_param.c
--- wizd_param.c	17 Mar 2007 14:12:01 -0000	1.39
+++ wizd_param.c	30 Aug 2007 00:34:21 -0000
@@ -44,42 +44,41 @@
 	{"text/plain"		,	"tsv"		,	TYPE_PSEUDO_DIR	}, // tsv = 仮想ディレクトリ
 	{"text/plain"		,	"url"		,	TYPE_URL		}, // URL shortcut from Internet Explorer
 	{"text/plain"		,	"chapter"	,	TYPE_CHAPTER	},
+	{"text/plain"		,	"txt"		,	TYPE_DOCUMENT	},
+	{"text/html"		, 	"htm"		,	TYPE_DOCUMENT	},
+	{"text/html"		, 	"html"		,	TYPE_DOCUMENT	},
+	{"image/gif"		, 	"gif"		,	TYPE_IMAGE		},
+	{"image/jpeg"		, 	"jpeg"		,	TYPE_JPEG		},
+	{"image/jpeg"		, 	"jpg"		,	TYPE_JPEG		},
+	{"image/png"		,	"png"		,	TYPE_IMAGE		},
+	{"video/mpeg"		, 	"svi"		,	TYPE_SVI		},
+	{"video/mpeg"		, 	"sv3"		,	TYPE_SVI		},
+	{"video/msvideo"	, 	"avi"		,	TYPE_SVI		},
+	{"video/mpeg"		, 	"mpg"		,	TYPE_MOVIE		},
+	{"video/mpeg"		, 	"mpeg"		,	TYPE_MOVIE		},
+	{"video/mpeg"		, 	"hnl"		,	TYPE_MOVIE		},
+	{"video/mpeg"		, 	"nuv"		,	TYPE_MOVIE		},	/* add for MythTV */
+	{"video/mpeg"		, 	"vob"		,	TYPE_MOVIE		},
+	{"video/mpeg"		, 	"vro"		,	TYPE_MOVIE		},	/* add for DVD-RAM */
+	{"video/mpeg"		, 	"ts"		,	TYPE_MOVIE		},	/* add for DVD-RAM */
+	{"video/mpeg"		, 	"tp"		,	TYPE_MOVIE		},
+	{"video/mpeg"		,	"m2t"		,	TYPE_MOVIE		},
+	{"video/mpeg"		, 	"m2p"		,	TYPE_MOVIE		},
+	{"video/quicktime"	,	"mov"		,	TYPE_MOVIE		},
+	{"video/x-ms-wmv"	,	"wmv"		,	TYPE_MOVIE		},
+	{"video/x-ms-wmx"	,	"asf"		,	TYPE_MOVIE		},
+	{"video/divx5"		, 	"divx"		,	TYPE_MOVIE		},
+	{"video/divx5"		, 	"mp4"		,	TYPE_MOVIE		},
+	{"video/mpeg"		, 	"iso"		,	TYPE_ISO		},
+	{"video/mpeg"		, 	"img"		,	TYPE_ISO		},
+	{"audio/x-mpeg"		, 	"mp3"		,	TYPE_MUSIC		},
+	{"audio/x-ogg"		, 	"ogg"		,	TYPE_MUSIC		},
+	{"audio/x-ms-wma"	,	"wma"		, 	TYPE_MUSIC		},
+	{"audio/x-wav"		,	"wav"		,	TYPE_MUSIC		},
+	{"audio/ac3"		, 	"ac3"		,	TYPE_MUSIC		},
+	{"audio/x-m4a"		, 	"m4a"		,	TYPE_MUSIC		},
 	{NULL, NULL, (-1) }
 };
-
-// Moved these to the configuration file wizd.conf
-// so that they can be customized at will
-#if 0
-	{"text/plain"		,	"txt"		,	TYPE_NO_STREAM	,	TYPE_DOCUMENT	},
-	{"text/html"		, 	"htm"		,	TYPE_NO_STREAM	,	TYPE_DOCUMENT	},
-	{"text/html"		, 	"html"		,	TYPE_NO_STREAM	,	TYPE_DOCUMENT	},
-	{"image/gif"		, 	"gif"		,	TYPE_NO_STREAM	,	TYPE_IMAGE		},
-	{"image/jpeg"		, 	"jpeg"		,	TYPE_NO_STREAM	,	TYPE_JPEG		},
-	{"image/jpeg"		, 	"jpg"		,	TYPE_NO_STREAM	,	TYPE_JPEG		},
-	{"image/png"		,	"png"		,	TYPE_NO_STREAM	,	TYPE_IMAGE		},
-	{"video/mpeg"		, 	"mpeg"		,	TYPE_STREAM		,	TYPE_MOVIE		},
-	{"video/mpeg"		, 	"mpg"		,	TYPE_STREAM		,	TYPE_MOVIE		},
-	{"video/mpeg"		, 	"svi"		,	TYPE_STREAM		,	TYPE_SVI		},
-	{"video/mpeg"		, 	"sv3"		,	TYPE_STREAM		,	TYPE_SVI		},
-	{"video/mpeg"		, 	"m2p"		,	TYPE_STREAM		,	TYPE_MOVIE		},
-	{"video/mpeg"		, 	"hnl"		,	TYPE_STREAM		,	TYPE_MOVIE		},
-	{"video/mpeg"		, 	"nuv"		,	TYPE_STREAM		,	TYPE_MOVIE		},	/* add for MythTV */
-	{"video/msvideo"	, 	"avi"		,	TYPE_STREAM		,	TYPE_SVI		},
-	{"video/mpeg"		, 	"vob"		,	TYPE_STREAM		,	TYPE_MOVIE		},
-	{"video/mpeg"		, 	"vro"		,	TYPE_STREAM		,	TYPE_MOVIE		},	/* add for DVD-RAM */
-	{"video/mpeg"		, 	"ts"		,	TYPE_STREAM		,	TYPE_MOVIE		},	/* add for DVD-RAM */
-	{"video/quicktime"	,	"mov"		,	TYPE_STREAM		,	TYPE_MOVIE		},
-	{"video/x-ms-wmv"	,	"wmv"		,	TYPE_STREAM		,	TYPE_MOVIE		},
-	{"video/x-ms-wmx"	,	"asf"		,	TYPE_STREAM		,	TYPE_MOVIE		},
-	{"audio/x-mpeg"		, 	"mp3"		,	TYPE_STREAM		,	TYPE_MUSIC		},
-	{"audio/x-ogg"		, 	"ogg"		,	TYPE_STREAM		,	TYPE_MUSIC		},
-	{"audio/x-mpeg"		, 	"mp4"		,	TYPE_STREAM		,	TYPE_MUSIC		},
-	{"audio/x-ms-wma"	,	"wma"		, 	TYPE_STREAM		,	TYPE_MUSIC		},
-	{"audio/x-wav"		,	"wav"		,	TYPE_STREAM		,	TYPE_MUSIC		},
-	{"audio/ac3"		, 	"ac3"		,	TYPE_STREAM		,	TYPE_MUSIC		},
-	{"audio/x-m4a"		, 	"m4a"		,	TYPE_STREAM		,	TYPE_MUSIC		},
-#endif
-
 // ********************************************
 // 拡張子変換リスト
 // ********************************************
@@ -95,6 +94,11 @@
 	{"hnl"			,	"mpg"			},
 	{"nuv"			,	"mpg"			},	/* add for MythTV */
 	{"divx"			,	"avi"			},
+	{"m2p"			,	"mpg"			},
+	{"m2t"			,	"ts"			},
+	{"tp"			,	"ts"			},
+	{"mpeg"			,	"mpg"			},
+	{"jpeg"			,	"jpg"			},
 	{ NULL, NULL }
 };
 
@@ -261,7 +265,7 @@
 
 	// mp3tag を読むかどうか
 	global_param.flag_read_mp3_tag = TRUE;
-	global_param.flag_read_avi_tag = TRUE;
+	global_param.flag_read_avi_tag = FALSE;
 	global_param.flag_sort_dir = TRUE;
 	global_param.flag_sort_read = FALSE;
 
@@ -308,7 +312,7 @@
 
 	global_param.flag_default_search_by_alias = 0;
 
-	global_param.target_jpeg_mode = BILINEAR;
+	global_param.target_jpeg_mode = NEAREST;
 	global_param.max_jpeg_width = 0;
 	global_param.max_jpeg_height = 0;
 
diff -u -r1.1 wizd_resize_jpeg_utils.c
--- wizd_resize_jpeg_utils.c	5 Dec 2006 00:12:29 -0000	1.1
+++ wizd_resize_jpeg_utils.c	30 Aug 2007 00:34:22 -0000
@@ -15,6 +15,8 @@
 #include <string.h>
 #include <math.h>
 
+#define USE_INTEGER
+
 #include "wizd_resize_jpeg.h"
 
 jmp_buf setjmp_buffer;
@@ -395,6 +397,14 @@
 {
     int32 vx, vy;
     pix vcol;
+#ifdef USE_INTEGER
+    int32 rx, ry;
+
+	for (vy = 0; vy < height; vy++) {
+		for (vx = 0; vx < width; vx++) {
+			rx = ((vx * psrc->width) / width);
+			ry = ((vy * psrc->height) / height);
+#else // USE_INTEGER
     float rx, ry;
     float width_scale, height_scale;
 
@@ -405,6 +415,7 @@
 		for (vx = 0; vx < width; vx++) {
 			rx = vx * width_scale;
 			ry = vy * height_scale;
+#endif // USE_INTEGER
 			vcol = get_pix (psrc, (int32) rx, (int32) ry);
 			put_pix_alpha_replace (pdest, vx, vy, vcol);
 		}
diff -u -r1.29 wizd_send_file.c
--- wizd_send_file.c	17 Mar 2007 14:12:01 -0000	1.29
+++ wizd_send_file.c	30 Aug 2007 00:34:22 -0000
@@ -355,6 +355,7 @@
 					fprintf(fp, "%lld\n", file_stat.st_size);
 					fprintf(fp, "%d\n", http_recv_info_p->page);
 					fclose(fp);
+					chown(work_buf, file_stat.st_uid, file_stat.st_gid);
 					debug_log_output("Wrote bookmark: '%s' page %d %lld of %lld", work_buf, http_recv_info_p->page, written, file_stat.st_size);
 				} else {
 					debug_log_output("create bookmark failed. err = %s", strerror(errno));
diff -u -r1.19 wizd_send_vob.c
--- wizd_send_vob.c	17 Mar 2007 14:12:01 -0000	1.19
+++ wizd_send_vob.c	30 Aug 2007 00:34:23 -0000
@@ -340,6 +340,7 @@
     int		vts;
 	int		split_vob = 0;
 	ssize_t blocks;
+	struct stat parnt_ownr;
 
 	debug_log_output("---------------------------------------------------");
 	debug_log_output("http_vob_file_response() start, titleid %d, chapid %d, page %d, name %s\n" , titleid, chapid, http_recv_info_p->page, http_recv_info_p->send_filename);
@@ -702,6 +703,9 @@
 					fprintf(fp, "%lld\n", joint_file_info.total_size);
 					fprintf(fp, "%d\n", chapid);
 					fclose(fp);
+					if (!lstat(http_recv_info_p->send_filename, &parnt_ownr)) {
+						chown(work_buf, parnt_ownr.st_uid, parnt_ownr.st_gid);
+					}
 					debug_log_output("Wrote bookmark: '%s' page %d %lld of %lld", work_buf, chapid, written, joint_file_info.total_size);
 				}
 			} else {
