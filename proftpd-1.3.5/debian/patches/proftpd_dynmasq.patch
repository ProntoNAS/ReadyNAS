diff -urp a/contrib/mod_dynmasq.c b/contrib/mod_dynmasq.c
--- a/contrib/mod_dynmasq.c	2011-05-23 13:56:40.000000000 -0700
+++ b/contrib/mod_dynmasq.c	2012-04-17 13:55:27.139966655 -0700
@@ -30,6 +30,12 @@
  */
 
 #include "conf.h"
+#if 1 //JM: Set the initial timer to 15 seconds, and stay that way we get our first successful lookup.
+#include <netinet/in.h>
+#include <arpa/nameser.h>
+#include <resolv.h>
+#define INITIAL_TIMER 15
+#endif
 
 #ifdef PR_USE_CTRLS
 # include "mod_ctrls.h"
@@ -59,6 +65,8 @@ static void dynmasq_refresh(void) {
    * updates to be discovered this way.
    */
   pr_netaddr_clear_cache();
+  /* JM: Re-init DNS config to catch any changes */
+  res_init();
 
   pr_log_debug(DEBUG2, MOD_DYNMASQ_VERSION
     ": resolving all MasqueradeAddress directives (could take a little while)");
@@ -90,6 +98,10 @@ static void dynmasq_refresh(void) {
            */
           c->argv[0] = na;
 
+          /* JM: Reset the timer to the requested interval */
+          pr_timer_remove(dynmasq_timer_id, &dynmasq_module);
+          dynmasq_timer_id = pr_timer_add(dynmasq_timer_interval, -1,
+            &dynmasq_module, dynmasq_refresh_cb, "dynmasq address refresh");
         } else {
           pr_log_debug(DEBUG2, MOD_DYNMASQ_VERSION
             ": MasqueradeAddress '%s' has not changed addresses",
@@ -229,7 +241,8 @@ static void dynmasq_mod_unload_ev(const 
 
 static void dynmasq_postparse_ev(const void *event_data, void *user_data) {
   if (dynmasq_timer_interval != -1) {
-    dynmasq_timer_id = pr_timer_add(dynmasq_timer_interval, -1,
+    /* JM: Reset the timer to the initial interval */
+    dynmasq_timer_id = pr_timer_add(INITIAL_TIMER, -1,
       &dynmasq_module, dynmasq_refresh_cb, "dynmasq address refresh");
   }
 }
diff -urp a/modules/mod_core.c b/modules/mod_core.c
--- a/modules/mod_core.c	2011-09-21 08:30:27.000000000 -0700
+++ b/modules/mod_core.c	2012-04-17 13:52:34.458218035 -0700
@@ -22,6 +22,9 @@
  * and other respective copyright holders give permission to link this program
  * with OpenSSL, and distribute the resulting executable, without including
  * the source code for OpenSSL in the source distribution.
+ *
+ * 2009/03/30: For ReadyNAS, since we're using moddynmasq, lookups shouldn't
+ *             need to succeed immediately, since they get done later.
  */
 
 /* Core FTPD module
@@ -867,6 +870,11 @@ MODRET set_masqueradeaddress(cmd_rec *cmd) {
   masq_addr = pr_netaddr_get_addr2(cmd->server->pool, cmd->argv[1], NULL,
     addr_flags);
   if (masq_addr == NULL) {
+    char hn[256];
+    gethostname(hn, sizeof(hn)-1);
+    masq_addr = pr_netaddr_get_addr(cmd->server->pool, hn, NULL);
+  }
+  if (masq_addr == NULL) {
     return PR_ERROR_MSG(cmd, NULL, pstrcat(cmd->tmp_pool, cmd->argv[0],
       ": unable to resolve \"", cmd->argv[1], "\"", NULL));
   }
