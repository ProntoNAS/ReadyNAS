<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="gnutls-openssl">
<refmeta>
<refentrytitle role="top_of_page" id="gnutls-openssl.top_of_page">openssl</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>
  GNUTLS Library
</refmiscinfo>
</refmeta>
<refnamediv>
<refname>openssl</refname>
<refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv id="gnutls-openssl.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>#define             <link linkend="GNUTLS-X509-CN-SIZE:CAPS">GNUTLS_X509_CN_SIZE</link>
#define             <link linkend="GNUTLS-X509-C-SIZE:CAPS">GNUTLS_X509_C_SIZE</link>
#define             <link linkend="GNUTLS-X509-O-SIZE:CAPS">GNUTLS_X509_O_SIZE</link>
#define             <link linkend="GNUTLS-X509-OU-SIZE:CAPS">GNUTLS_X509_OU_SIZE</link>
#define             <link linkend="GNUTLS-X509-L-SIZE:CAPS">GNUTLS_X509_L_SIZE</link>
#define             <link linkend="GNUTLS-X509-S-SIZE:CAPS">GNUTLS_X509_S_SIZE</link>
#define             <link linkend="GNUTLS-X509-EMAIL-SIZE:CAPS">GNUTLS_X509_EMAIL_SIZE</link>
#define             <link linkend="OPENSSL-VERSION-NUMBER:CAPS">OPENSSL_VERSION_NUMBER</link>
#define             <link linkend="SSLEAY-VERSION-NUMBER:CAPS">SSLEAY_VERSION_NUMBER</link>
#define             <link linkend="OPENSSL-VERSION-TEXT:CAPS">OPENSSL_VERSION_TEXT</link>
#define             <link linkend="SSL-ERROR-NONE:CAPS">SSL_ERROR_NONE</link>
#define             <link linkend="SSL-ERROR-SSL:CAPS">SSL_ERROR_SSL</link>
#define             <link linkend="SSL-ERROR-WANT-READ:CAPS">SSL_ERROR_WANT_READ</link>
#define             <link linkend="SSL-ERROR-WANT-WRITE:CAPS">SSL_ERROR_WANT_WRITE</link>
#define             <link linkend="SSL-ERROR-SYSCALL:CAPS">SSL_ERROR_SYSCALL</link>
#define             <link linkend="SSL-ERROR-ZERO-RETURN:CAPS">SSL_ERROR_ZERO_RETURN</link>
#define             <link linkend="SSL-FILETYPE-PEM:CAPS">SSL_FILETYPE_PEM</link>
#define             <link linkend="SSL-VERIFY-NONE:CAPS">SSL_VERIFY_NONE</link>
#define             <link linkend="SSL-ST-OK:CAPS">SSL_ST_OK</link>
#define             <link linkend="X509-V-ERR-CERT-NOT-YET-VALID:CAPS">X509_V_ERR_CERT_NOT_YET_VALID</link>
#define             <link linkend="X509-V-ERR-CERT-HAS-EXPIRED:CAPS">X509_V_ERR_CERT_HAS_EXPIRED</link>
#define             <link linkend="X509-V-ERR-DEPTH-ZERO-SELF-SIGNED-CERT:CAPS">X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT</link>
#define             <link linkend="SSL-OP-ALL:CAPS">SSL_OP_ALL</link>
#define             <link linkend="SSL-OP-NO-TLSv1">SSL_OP_NO_TLSv1</link>
#define             <link linkend="SSL-MODE-ENABLE-PARTIAL-WRITE:CAPS">SSL_MODE_ENABLE_PARTIAL_WRITE</link>
#define             <link linkend="SSL-MODE-ACCEPT-MOVING-WRITE-BUFFER:CAPS">SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER</link>
#define             <link linkend="SSL-MODE-AUTO-RETRY:CAPS">SSL_MODE_AUTO_RETRY</link>
typedef             <link linkend="X509-NAME:CAPS">X509_NAME</link>;
typedef             <link linkend="X509:CAPS">X509</link>;
                    <link linkend="SSL:CAPS">SSL</link>;
#define             <link linkend="current-cert">current_cert</link>
#define             <link linkend="X509-STORE-CTX-get-current-cert">X509_STORE_CTX_get_current_cert</link>     (ctx)
<link linkend="int"><returnvalue>int</returnvalue></link>                 (<link linkend="verify-callback">*verify_callback</link>)                  (<parameter>...</parameter>,
                                                         <parameter><link linkend="X509-STORE-CTX:CAPS"><type>X509_STORE_CTX</type></link> *Param2</parameter>);
#define             <link linkend="rbio">rbio</link>
                    <link linkend="MD-CTX:CAPS">MD_CTX</link>;
struct              <link linkend="rsa-st">rsa_st</link>;
typedef             <link linkend="RSA:CAPS">RSA</link>;
#define             <link linkend="MD5-CTX:CAPS">MD5_CTX</link>
#define             <link linkend="RIPEMD160-CTX:CAPS">RIPEMD160_CTX</link>
#define             <link linkend="OpenSSL-add-ssl-algorithms">OpenSSL_add_ssl_algorithms</link>
#define             <link linkend="SSLeay-add-ssl-algorithms">SSLeay_add_ssl_algorithms</link>
#define             <link linkend="SSLeay-add-all-algorithms">SSLeay_add_all_algorithms</link>
#define             <link linkend="SSL-get-cipher-name">SSL_get_cipher_name</link>                 (ssl)
#define             <link linkend="SSL-get-cipher">SSL_get_cipher</link>                      (ssl)
#define             <link linkend="SSL-get-cipher-bits">SSL_get_cipher_bits</link>                 (ssl,
                                                         bp)
#define             <link linkend="SSL-get-cipher-version">SSL_get_cipher_version</link>              (ssl)
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="SSL-library-init">SSL_library_init</link>                    (<parameter><type>void</type></parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="OpenSSL-add-all-algorithms">OpenSSL_add_all_algorithms</link>          (<parameter><type>void</type></parameter>);
<link linkend="SSL-CTX:CAPS"><returnvalue>SSL_CTX</returnvalue></link> *           <link linkend="SSL-CTX-new">SSL_CTX_new</link>                         (<parameter><link linkend="SSL-METHOD:CAPS"><type>SSL_METHOD</type></link> *method</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="SSL-CTX-free">SSL_CTX_free</link>                        (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="SSL-CTX-set-default-verify-paths">SSL_CTX_set_default_verify_paths</link>    (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="SSL-CTX-use-certificate-file">SSL_CTX_use_certificate_file</link>        (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *certfile</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> type</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="SSL-CTX-use-PrivateKey-file">SSL_CTX_use_PrivateKey_file</link>         (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *keyfile</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> type</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="SSL-CTX-set-verify">SSL_CTX_set_verify</link>                  (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> verify_mode</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> (verify_callbackint, X509_STORE_CTX *) ()</parameter>);
unsigned <link linkend="long"><returnvalue>long</returnvalue></link>       <link linkend="SSL-CTX-set-options">SSL_CTX_set_options</link>                 (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>,
                                                         <parameter><type>unsigned long </type> options</parameter>);
<link linkend="long"><returnvalue>long</returnvalue></link>                <link linkend="SSL-CTX-set-mode">SSL_CTX_set_mode</link>                    (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>,
                                                         <parameter>long <link linkend="mode"><type>mode</type></link> Param2</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="SSL-CTX-set-cipher-list">SSL_CTX_set_cipher_list</link>             (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *list</parameter>);
<link linkend="long"><returnvalue>long</returnvalue></link>                <link linkend="SSL-CTX-sess-number">SSL_CTX_sess_number</link>                 (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>);
<link linkend="long"><returnvalue>long</returnvalue></link>                <link linkend="SSL-CTX-sess-connect">SSL_CTX_sess_connect</link>                (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>);
<link linkend="long"><returnvalue>long</returnvalue></link>                <link linkend="SSL-CTX-sess-connect-good">SSL_CTX_sess_connect_good</link>           (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>);
<link linkend="long"><returnvalue>long</returnvalue></link>                <link linkend="SSL-CTX-sess-connect-renegotiate">SSL_CTX_sess_connect_renegotiate</link>    (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>);
<link linkend="long"><returnvalue>long</returnvalue></link>                <link linkend="SSL-CTX-sess-accept">SSL_CTX_sess_accept</link>                 (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>);
<link linkend="long"><returnvalue>long</returnvalue></link>                <link linkend="SSL-CTX-sess-accept-good">SSL_CTX_sess_accept_good</link>            (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>);
<link linkend="long"><returnvalue>long</returnvalue></link>                <link linkend="SSL-CTX-sess-accept-renegotiate">SSL_CTX_sess_accept_renegotiate</link>     (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>);
<link linkend="long"><returnvalue>long</returnvalue></link>                <link linkend="SSL-CTX-sess-hits">SSL_CTX_sess_hits</link>                   (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>);
<link linkend="long"><returnvalue>long</returnvalue></link>                <link linkend="SSL-CTX-sess-misses">SSL_CTX_sess_misses</link>                 (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>);
<link linkend="long"><returnvalue>long</returnvalue></link>                <link linkend="SSL-CTX-sess-timeouts">SSL_CTX_sess_timeouts</link>               (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>);
<link linkend="SSL:CAPS"><returnvalue>SSL</returnvalue></link> *               <link linkend="SSL-new">SSL_new</link>                             (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="SSL-free">SSL_free</link>                            (<parameter><link linkend="SSL:CAPS"><type>SSL</type></link> *ssl</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="SSL-load-error-strings">SSL_load_error_strings</link>              (<parameter><type>void</type></parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="SSL-get-error">SSL_get_error</link>                       (<parameter><link linkend="SSL:CAPS"><type>SSL</type></link> *ssl</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> ret</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="SSL-set-fd">SSL_set_fd</link>                          (<parameter><link linkend="SSL:CAPS"><type>SSL</type></link> *ssl</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> fd</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="SSL-set-rfd">SSL_set_rfd</link>                         (<parameter><link linkend="SSL:CAPS"><type>SSL</type></link> *ssl</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> fd</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="SSL-set-wfd">SSL_set_wfd</link>                         (<parameter><link linkend="SSL:CAPS"><type>SSL</type></link> *ssl</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> fd</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="SSL-set-bio">SSL_set_bio</link>                         (<parameter><link linkend="SSL:CAPS"><type>SSL</type></link> *ssl</parameter>,
                                                         <parameter><link linkend="BIO:CAPS"><type>BIO</type></link> *rbio</parameter>,
                                                         <parameter><link linkend="BIO:CAPS"><type>BIO</type></link> *wbio</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="SSL-set-connect-state">SSL_set_connect_state</link>               (<parameter><link linkend="SSL:CAPS"><type>SSL</type></link> *ssl</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="SSL-pending">SSL_pending</link>                         (<parameter><link linkend="SSL:CAPS"><type>SSL</type></link> *ssl</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="SSL-set-verify">SSL_set_verify</link>                      (<parameter><link linkend="SSL:CAPS"><type>SSL</type></link> *ssl</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> verify_mode</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> (verify_callbackint, X509_STORE_CTX *) ()</parameter>);
const <link linkend="X509:CAPS"><returnvalue>X509</returnvalue></link> *        <link linkend="SSL-get-peer-certificate">SSL_get_peer_certificate</link>            (<parameter><link linkend="SSL:CAPS"><type>SSL</type></link> *ssl</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="SSL-connect">SSL_connect</link>                         (<parameter><link linkend="SSL:CAPS"><type>SSL</type></link> *ssl</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="SSL-accept">SSL_accept</link>                          (<parameter><link linkend="SSL:CAPS"><type>SSL</type></link> *ssl</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="SSL-shutdown">SSL_shutdown</link>                        (<parameter><link linkend="SSL:CAPS"><type>SSL</type></link> *ssl</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="SSL-read">SSL_read</link>                            (<parameter><link linkend="SSL:CAPS"><type>SSL</type></link> *ssl</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *buf</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> len</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="SSL-write">SSL_write</link>                           (<parameter><link linkend="SSL:CAPS"><type>SSL</type></link> *ssl</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *buf</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> len</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="SSL-want">SSL_want</link>                            (<parameter><link linkend="SSL:CAPS"><type>SSL</type></link> *ssl</parameter>);
#define             <link linkend="SSL-NOTHING:CAPS">SSL_NOTHING</link>
#define             <link linkend="SSL-WRITING:CAPS">SSL_WRITING</link>
#define             <link linkend="SSL-READING:CAPS">SSL_READING</link>
#define             <link linkend="SSL-X509-LOOKUP:CAPS">SSL_X509_LOOKUP</link>
#define             <link linkend="SSL-want-nothing">SSL_want_nothing</link>                    (s)
#define             <link linkend="SSL-want-read">SSL_want_read</link>                       (s)
#define             <link linkend="SSL-want-write">SSL_want_write</link>                      (s)
#define             <link linkend="SSL-want-x509-lookup">SSL_want_x509_lookup</link>                (s)
<link linkend="SSL-METHOD:CAPS"><returnvalue>SSL_METHOD</returnvalue></link> *        <link linkend="SSLv23-client-method">SSLv23_client_method</link>                (<parameter><type>void</type></parameter>);
<link linkend="SSL-METHOD:CAPS"><returnvalue>SSL_METHOD</returnvalue></link> *        <link linkend="SSLv23-server-method">SSLv23_server_method</link>                (<parameter><type>void</type></parameter>);
<link linkend="SSL-METHOD:CAPS"><returnvalue>SSL_METHOD</returnvalue></link> *        <link linkend="SSLv3-client-method">SSLv3_client_method</link>                 (<parameter><type>void</type></parameter>);
<link linkend="SSL-METHOD:CAPS"><returnvalue>SSL_METHOD</returnvalue></link> *        <link linkend="SSLv3-server-method">SSLv3_server_method</link>                 (<parameter><type>void</type></parameter>);
<link linkend="SSL-METHOD:CAPS"><returnvalue>SSL_METHOD</returnvalue></link> *        <link linkend="TLSv1-client-method">TLSv1_client_method</link>                 (<parameter><type>void</type></parameter>);
<link linkend="SSL-METHOD:CAPS"><returnvalue>SSL_METHOD</returnvalue></link> *        <link linkend="TLSv1-server-method">TLSv1_server_method</link>                 (<parameter><type>void</type></parameter>);
<link linkend="SSL-CIPHER:CAPS"><returnvalue>SSL_CIPHER</returnvalue></link> *        <link linkend="SSL-get-current-cipher">SSL_get_current_cipher</link>              (<parameter><link linkend="SSL:CAPS"><type>SSL</type></link> *ssl</parameter>);
const <link linkend="char"><returnvalue>char</returnvalue></link> *        <link linkend="SSL-CIPHER-get-name">SSL_CIPHER_get_name</link>                 (<parameter><link linkend="SSL-CIPHER:CAPS"><type>SSL_CIPHER</type></link> *cipher</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="SSL-CIPHER-get-bits">SSL_CIPHER_get_bits</link>                 (<parameter><link linkend="SSL-CIPHER:CAPS"><type>SSL_CIPHER</type></link> *cipher</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> *bits</parameter>);
const <link linkend="char"><returnvalue>char</returnvalue></link> *        <link linkend="SSL-CIPHER-get-version">SSL_CIPHER_get_version</link>              (<parameter><link linkend="SSL-CIPHER:CAPS"><type>SSL_CIPHER</type></link> *cipher</parameter>);
<link linkend="char"><returnvalue>char</returnvalue></link> *              <link linkend="SSL-CIPHER-description">SSL_CIPHER_description</link>              (<parameter><link linkend="SSL-CIPHER:CAPS"><type>SSL_CIPHER</type></link> *cipher</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *buf</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> size</parameter>);
<link linkend="X509-NAME:CAPS"><returnvalue>X509_NAME</returnvalue></link> *         <link linkend="X509-get-subject-name">X509_get_subject_name</link>               (<parameter>const <link linkend="X509:CAPS"><type>X509</type></link> *cert</parameter>);
<link linkend="X509-NAME:CAPS"><returnvalue>X509_NAME</returnvalue></link> *         <link linkend="X509-get-issuer-name">X509_get_issuer_name</link>                (<parameter>const <link linkend="X509:CAPS"><type>X509</type></link> *cert</parameter>);
<link linkend="char"><returnvalue>char</returnvalue></link> *              <link linkend="X509-NAME-oneline">X509_NAME_oneline</link>                   (<parameter><link linkend="gnutls-x509-dn"><type>gnutls_x509_dn</type></link> *name</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *buf</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> len</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="X509-free">X509_free</link>                           (<parameter>const <link linkend="X509:CAPS"><type>X509</type></link> *cert</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="BIO-get-fd">BIO_get_fd</link>                          (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> gnutls_state</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> *fd</parameter>);
<link linkend="BIO:CAPS"><returnvalue>BIO</returnvalue></link> *               <link linkend="BIO-new-socket">BIO_new_socket</link>                      (<parameter><link linkend="int"><type>int</type></link> sock</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> close_flag</parameter>);
unsigned <link linkend="long"><returnvalue>long</returnvalue></link>       <link linkend="ERR-get-error">ERR_get_error</link>                       (<parameter><type>void</type></parameter>);
const <link linkend="char"><returnvalue>char</returnvalue></link> *        <link linkend="ERR-error-string">ERR_error_string</link>                    (<parameter><type>unsigned long </type> e</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *buf</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="RAND-status">RAND_status</link>                         (<parameter><type>void</type></parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="RAND-seed">RAND_seed</link>                           (<parameter>const <link linkend="void"><type>void</type></link> *buf</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> num</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="RAND-bytes">RAND_bytes</link>                          (<parameter>unsigned <link linkend="char"><type>char</type></link> *buf</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> num</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="RAND-pseudo-bytes">RAND_pseudo_bytes</link>                   (<parameter>unsigned <link linkend="char"><type>char</type></link> *buf</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> num</parameter>);
const <link linkend="char"><returnvalue>char</returnvalue></link> *        <link linkend="RAND-file-name">RAND_file_name</link>                      (<parameter><link linkend="char"><type>char</type></link> *buf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> len</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="RAND-load-file">RAND_load_file</link>                      (<parameter>const <link linkend="char"><type>char</type></link> *name</parameter>,
                                                         <parameter>long <link linkend="maxbytes"><type>maxbytes</type></link> Param2</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="RAND-write-file">RAND_write_file</link>                     (<parameter>const <link linkend="char"><type>char</type></link> *name</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="RAND-egd-bytes">RAND_egd_bytes</link>                      (<parameter>const <link linkend="char"><type>char</type></link> *path</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> bytes</parameter>);
#define             <link linkend="RAND-egd">RAND_egd</link>                            (p)
#define             <link linkend="MD5-DIGEST-LENGTH:CAPS">MD5_DIGEST_LENGTH</link>
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="MD5-Init">MD5_Init</link>                            (<parameter><link linkend="MD5-CTX:CAPS"><type>MD5_CTX</type></link> *ctx</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="MD5-Update">MD5_Update</link>                          (<parameter><link linkend="MD5-CTX:CAPS"><type>MD5_CTX</type></link> *ctx</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *buf</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> len</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="MD5-Final">MD5_Final</link>                           (<parameter>unsigned <link linkend="char"><type>char</type></link> *md</parameter>,
                                                         <parameter><link linkend="MD5-CTX:CAPS"><type>MD5_CTX</type></link> *ctx</parameter>);
unsigned <link linkend="char"><returnvalue>char</returnvalue></link> *     <link linkend="MD5:CAPS">MD5</link>                                 (<parameter>unsigned <link linkend="char"><type>char</type></link> *buf</parameter>,
                                                         <parameter><type>unsigned long </type> len</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> *md</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="RIPEMD160-Init">RIPEMD160_Init</link>                      (<parameter><link linkend="RIPEMD160-CTX:CAPS"><type>RIPEMD160_CTX</type></link> *ctx</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="RIPEMD160-Update">RIPEMD160_Update</link>                    (<parameter><link linkend="RIPEMD160-CTX:CAPS"><type>RIPEMD160_CTX</type></link> *ctx</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *buf</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> len</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="RIPEMD160-Final">RIPEMD160_Final</link>                     (<parameter>unsigned <link linkend="char"><type>char</type></link> *md</parameter>,
                                                         <parameter><link linkend="RIPEMD160-CTX:CAPS"><type>RIPEMD160_CTX</type></link> *ctx</parameter>);
unsigned <link linkend="char"><returnvalue>char</returnvalue></link> *     <link linkend="RIPEMD160:CAPS">RIPEMD160</link>                           (<parameter>unsigned <link linkend="char"><type>char</type></link> *buf</parameter>,
                                                         <parameter><type>unsigned long </type> len</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> *md</parameter>);
</synopsis>
</refsynopsisdiv>

<refsect1 id="gnutls-openssl.description" role="desc">
<title role="desc.title">Description</title>
<para>
</para>
</refsect1>
<refsect1 id="gnutls-openssl.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="GNUTLS-X509-CN-SIZE:CAPS" role="macro">
<title>GNUTLS_X509_CN_SIZE</title>
<indexterm zone="GNUTLS-X509-CN-SIZE:CAPS"><primary>GNUTLS_X509_CN_SIZE</primary></indexterm>
<programlisting>#define GNUTLS_X509_CN_SIZE 256
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-X509-C-SIZE:CAPS" role="macro">
<title>GNUTLS_X509_C_SIZE</title>
<indexterm zone="GNUTLS-X509-C-SIZE:CAPS"><primary>GNUTLS_X509_C_SIZE</primary></indexterm>
<programlisting>#define GNUTLS_X509_C_SIZE 3
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-X509-O-SIZE:CAPS" role="macro">
<title>GNUTLS_X509_O_SIZE</title>
<indexterm zone="GNUTLS-X509-O-SIZE:CAPS"><primary>GNUTLS_X509_O_SIZE</primary></indexterm>
<programlisting>#define GNUTLS_X509_O_SIZE 256
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-X509-OU-SIZE:CAPS" role="macro">
<title>GNUTLS_X509_OU_SIZE</title>
<indexterm zone="GNUTLS-X509-OU-SIZE:CAPS"><primary>GNUTLS_X509_OU_SIZE</primary></indexterm>
<programlisting>#define GNUTLS_X509_OU_SIZE 256
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-X509-L-SIZE:CAPS" role="macro">
<title>GNUTLS_X509_L_SIZE</title>
<indexterm zone="GNUTLS-X509-L-SIZE:CAPS"><primary>GNUTLS_X509_L_SIZE</primary></indexterm>
<programlisting>#define GNUTLS_X509_L_SIZE 256
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-X509-S-SIZE:CAPS" role="macro">
<title>GNUTLS_X509_S_SIZE</title>
<indexterm zone="GNUTLS-X509-S-SIZE:CAPS"><primary>GNUTLS_X509_S_SIZE</primary></indexterm>
<programlisting>#define GNUTLS_X509_S_SIZE 256
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-X509-EMAIL-SIZE:CAPS" role="macro">
<title>GNUTLS_X509_EMAIL_SIZE</title>
<indexterm zone="GNUTLS-X509-EMAIL-SIZE:CAPS"><primary>GNUTLS_X509_EMAIL_SIZE</primary></indexterm>
<programlisting>#define GNUTLS_X509_EMAIL_SIZE 256
</programlisting>
<para>
</para></refsect2>
<refsect2 id="OPENSSL-VERSION-NUMBER:CAPS" role="macro">
<title>OPENSSL_VERSION_NUMBER</title>
<indexterm zone="OPENSSL-VERSION-NUMBER:CAPS"><primary>OPENSSL_VERSION_NUMBER</primary></indexterm>
<programlisting>#define OPENSSL_VERSION_NUMBER (0x0090604F)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SSLEAY-VERSION-NUMBER:CAPS" role="macro">
<title>SSLEAY_VERSION_NUMBER</title>
<indexterm zone="SSLEAY-VERSION-NUMBER:CAPS"><primary>SSLEAY_VERSION_NUMBER</primary></indexterm>
<programlisting>#define SSLEAY_VERSION_NUMBER OPENSSL_VERSION_NUMBER
</programlisting>
<para>
</para></refsect2>
<refsect2 id="OPENSSL-VERSION-TEXT:CAPS" role="macro">
<title>OPENSSL_VERSION_TEXT</title>
<indexterm zone="OPENSSL-VERSION-TEXT:CAPS"><primary>OPENSSL_VERSION_TEXT</primary></indexterm>
<programlisting>#define OPENSSL_VERSION_TEXT ("GNUTLS " GNUTLS_VERSION " ")
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SSL-ERROR-NONE:CAPS" role="macro">
<title>SSL_ERROR_NONE</title>
<indexterm zone="SSL-ERROR-NONE:CAPS"><primary>SSL_ERROR_NONE</primary></indexterm>
<programlisting>#define SSL_ERROR_NONE        (0)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SSL-ERROR-SSL:CAPS" role="macro">
<title>SSL_ERROR_SSL</title>
<indexterm zone="SSL-ERROR-SSL:CAPS"><primary>SSL_ERROR_SSL</primary></indexterm>
<programlisting>#define SSL_ERROR_SSL         (1)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SSL-ERROR-WANT-READ:CAPS" role="macro">
<title>SSL_ERROR_WANT_READ</title>
<indexterm zone="SSL-ERROR-WANT-READ:CAPS"><primary>SSL_ERROR_WANT_READ</primary></indexterm>
<programlisting>#define SSL_ERROR_WANT_READ   (2)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SSL-ERROR-WANT-WRITE:CAPS" role="macro">
<title>SSL_ERROR_WANT_WRITE</title>
<indexterm zone="SSL-ERROR-WANT-WRITE:CAPS"><primary>SSL_ERROR_WANT_WRITE</primary></indexterm>
<programlisting>#define SSL_ERROR_WANT_WRITE  (3)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SSL-ERROR-SYSCALL:CAPS" role="macro">
<title>SSL_ERROR_SYSCALL</title>
<indexterm zone="SSL-ERROR-SYSCALL:CAPS"><primary>SSL_ERROR_SYSCALL</primary></indexterm>
<programlisting>#define SSL_ERROR_SYSCALL     (5)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SSL-ERROR-ZERO-RETURN:CAPS" role="macro">
<title>SSL_ERROR_ZERO_RETURN</title>
<indexterm zone="SSL-ERROR-ZERO-RETURN:CAPS"><primary>SSL_ERROR_ZERO_RETURN</primary></indexterm>
<programlisting>#define SSL_ERROR_ZERO_RETURN (6)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SSL-FILETYPE-PEM:CAPS" role="macro">
<title>SSL_FILETYPE_PEM</title>
<indexterm zone="SSL-FILETYPE-PEM:CAPS"><primary>SSL_FILETYPE_PEM</primary></indexterm>
<programlisting>#define SSL_FILETYPE_PEM (GNUTLS_X509_FMT_PEM)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SSL-VERIFY-NONE:CAPS" role="macro">
<title>SSL_VERIFY_NONE</title>
<indexterm zone="SSL-VERIFY-NONE:CAPS"><primary>SSL_VERIFY_NONE</primary></indexterm>
<programlisting>#define SSL_VERIFY_NONE (0)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SSL-ST-OK:CAPS" role="macro">
<title>SSL_ST_OK</title>
<indexterm zone="SSL-ST-OK:CAPS"><primary>SSL_ST_OK</primary></indexterm>
<programlisting>#define SSL_ST_OK (1)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="X509-V-ERR-CERT-NOT-YET-VALID:CAPS" role="macro">
<title>X509_V_ERR_CERT_NOT_YET_VALID</title>
<indexterm zone="X509-V-ERR-CERT-NOT-YET-VALID:CAPS"><primary>X509_V_ERR_CERT_NOT_YET_VALID</primary></indexterm>
<programlisting>#define X509_V_ERR_CERT_NOT_YET_VALID          (1)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="X509-V-ERR-CERT-HAS-EXPIRED:CAPS" role="macro">
<title>X509_V_ERR_CERT_HAS_EXPIRED</title>
<indexterm zone="X509-V-ERR-CERT-HAS-EXPIRED:CAPS"><primary>X509_V_ERR_CERT_HAS_EXPIRED</primary></indexterm>
<programlisting>#define X509_V_ERR_CERT_HAS_EXPIRED            (2)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="X509-V-ERR-DEPTH-ZERO-SELF-SIGNED-CERT:CAPS" role="macro">
<title>X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT</title>
<indexterm zone="X509-V-ERR-DEPTH-ZERO-SELF-SIGNED-CERT:CAPS"><primary>X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT</primary></indexterm>
<programlisting>#define X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT (3)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SSL-OP-ALL:CAPS" role="macro">
<title>SSL_OP_ALL</title>
<indexterm zone="SSL-OP-ALL:CAPS"><primary>SSL_OP_ALL</primary></indexterm>
<programlisting>#define SSL_OP_ALL (0x000FFFFF)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SSL-OP-NO-TLSv1" role="macro">
<title>SSL_OP_NO_TLSv1</title>
<indexterm zone="SSL-OP-NO-TLSv1"><primary>SSL_OP_NO_TLSv1</primary></indexterm>
<programlisting>#define SSL_OP_NO_TLSv1 (0x0400000)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SSL-MODE-ENABLE-PARTIAL-WRITE:CAPS" role="macro">
<title>SSL_MODE_ENABLE_PARTIAL_WRITE</title>
<indexterm zone="SSL-MODE-ENABLE-PARTIAL-WRITE:CAPS"><primary>SSL_MODE_ENABLE_PARTIAL_WRITE</primary></indexterm>
<programlisting>#define SSL_MODE_ENABLE_PARTIAL_WRITE (0x1)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SSL-MODE-ACCEPT-MOVING-WRITE-BUFFER:CAPS" role="macro">
<title>SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER</title>
<indexterm zone="SSL-MODE-ACCEPT-MOVING-WRITE-BUFFER:CAPS"><primary>SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER</primary></indexterm>
<programlisting>#define SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER (0x2)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SSL-MODE-AUTO-RETRY:CAPS" role="macro">
<title>SSL_MODE_AUTO_RETRY</title>
<indexterm zone="SSL-MODE-AUTO-RETRY:CAPS"><primary>SSL_MODE_AUTO_RETRY</primary></indexterm>
<programlisting>#define SSL_MODE_AUTO_RETRY (0x4)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="X509-NAME:CAPS" role="typedef">
<title>X509_NAME</title>
<indexterm zone="X509-NAME:CAPS"><primary>X509_NAME</primary></indexterm>
<programlisting>  typedef gnutls_x509_dn X509_NAME;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="X509:CAPS" role="typedef">
<title>X509</title>
<indexterm zone="X509:CAPS"><primary>X509</primary></indexterm>
<programlisting>  typedef gnutls_datum_t X509;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SSL:CAPS" role="struct">
<title>SSL</title>
<indexterm zone="SSL:CAPS"><primary>SSL</primary></indexterm>
<programlisting>typedef struct {
    gnutls_session_t gnutls_state;

    gnutls_certificate_client_credentials gnutls_cred;

    SSL_CTX *ctx;
    SSL_CIPHER ciphersuite;

    int last_error;
    int shutdown;
    int state;
    unsigned long options;

    int (*verify_callback) (int, X509_STORE_CTX *);
    int verify_mode;

    gnutls_transport_ptr_t rfd;
    gnutls_transport_ptr_t wfd;
} SSL;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="current-cert" role="macro">
<title>current_cert</title>
<indexterm zone="current-cert"><primary>current_cert</primary></indexterm>
<programlisting>#define current_cert cert_list
</programlisting>
<para>
</para></refsect2>
<refsect2 id="X509-STORE-CTX-get-current-cert" role="macro">
<title>X509_STORE_CTX_get_current_cert()</title>
<indexterm zone="X509-STORE-CTX-get-current-cert"><primary>X509_STORE_CTX_get_current_cert</primary></indexterm>
<programlisting>#define X509_STORE_CTX_get_current_cert(ctx) ((ctx)-&gt;current_cert)
</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="verify-callback" role="function">
<title>verify_callback ()</title>
<indexterm zone="verify-callback"><primary>verify_callback</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 (*verify_callback)                  (<parameter>...</parameter>,
                                                         <parameter><link linkend="X509-STORE-CTX:CAPS"><type>X509_STORE_CTX</type></link> *Param2</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param2</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="rbio" role="macro">
<title>rbio</title>
<indexterm zone="rbio"><primary>rbio</primary></indexterm>
<programlisting>#define rbio gnutls_state
</programlisting>
<para>
</para></refsect2>
<refsect2 id="MD-CTX:CAPS" role="struct">
<title>MD_CTX</title>
<indexterm zone="MD-CTX:CAPS"><primary>MD_CTX</primary></indexterm>
<programlisting>typedef struct {
    void* handle;
} MD_CTX;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="rsa-st" role="struct">
<title>struct rsa_st</title>
<indexterm zone="rsa-st"><primary>rsa_st</primary></indexterm>
<programlisting>struct rsa_st;</programlisting>
<para>
</para></refsect2>
<refsect2 id="RSA:CAPS" role="typedef">
<title>RSA</title>
<indexterm zone="RSA:CAPS"><primary>RSA</primary></indexterm>
<programlisting>  typedef struct rsa_st RSA;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="MD5-CTX:CAPS" role="macro">
<title>MD5_CTX</title>
<indexterm zone="MD5-CTX:CAPS"><primary>MD5_CTX</primary></indexterm>
<programlisting>#define MD5_CTX MD_CTX
</programlisting>
<para>
</para></refsect2>
<refsect2 id="RIPEMD160-CTX:CAPS" role="macro">
<title>RIPEMD160_CTX</title>
<indexterm zone="RIPEMD160-CTX:CAPS"><primary>RIPEMD160_CTX</primary></indexterm>
<programlisting>#define RIPEMD160_CTX MD_CTX
</programlisting>
<para>
</para></refsect2>
<refsect2 id="OpenSSL-add-ssl-algorithms" role="macro">
<title>OpenSSL_add_ssl_algorithms</title>
<indexterm zone="OpenSSL-add-ssl-algorithms"><primary>OpenSSL_add_ssl_algorithms</primary></indexterm>
<programlisting>#define OpenSSL_add_ssl_algorithms()  SSL_library_init()
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SSLeay-add-ssl-algorithms" role="macro">
<title>SSLeay_add_ssl_algorithms</title>
<indexterm zone="SSLeay-add-ssl-algorithms"><primary>SSLeay_add_ssl_algorithms</primary></indexterm>
<programlisting>#define SSLeay_add_ssl_algorithms()   SSL_library_init()
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SSLeay-add-all-algorithms" role="macro">
<title>SSLeay_add_all_algorithms</title>
<indexterm zone="SSLeay-add-all-algorithms"><primary>SSLeay_add_all_algorithms</primary></indexterm>
<programlisting>#define SSLeay_add_all_algorithms()   OpenSSL_add_all_algorithms()
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SSL-get-cipher-name" role="macro">
<title>SSL_get_cipher_name()</title>
<indexterm zone="SSL-get-cipher-name"><primary>SSL_get_cipher_name</primary></indexterm>
<programlisting>#define SSL_get_cipher_name(ssl) SSL_CIPHER_get_name(SSL_get_current_cipher(ssl))
</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ssl</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-get-cipher" role="macro">
<title>SSL_get_cipher()</title>
<indexterm zone="SSL-get-cipher"><primary>SSL_get_cipher</primary></indexterm>
<programlisting>#define SSL_get_cipher(ssl) SSL_get_cipher_name(ssl)
</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ssl</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-get-cipher-bits" role="macro">
<title>SSL_get_cipher_bits()</title>
<indexterm zone="SSL-get-cipher-bits"><primary>SSL_get_cipher_bits</primary></indexterm>
<programlisting>#define SSL_get_cipher_bits(ssl,bp) SSL_CIPHER_get_bits(SSL_get_current_cipher(ssl),(bp))
</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ssl</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bp</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-get-cipher-version" role="macro">
<title>SSL_get_cipher_version()</title>
<indexterm zone="SSL-get-cipher-version"><primary>SSL_get_cipher_version</primary></indexterm>
<programlisting>#define SSL_get_cipher_version(ssl) SSL_CIPHER_get_version(SSL_get_current_cipher(ssl))
</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ssl</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-library-init" role="function">
<title>SSL_library_init ()</title>
<indexterm zone="SSL-library-init"><primary>SSL_library_init</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 SSL_library_init                    (<parameter><type>void</type></parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="OpenSSL-add-all-algorithms" role="function">
<title>OpenSSL_add_all_algorithms ()</title>
<indexterm zone="OpenSSL-add-all-algorithms"><primary>OpenSSL_add_all_algorithms</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                OpenSSL_add_all_algorithms          (<parameter><type>void</type></parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="SSL-CTX-new" role="function">
<title>SSL_CTX_new ()</title>
<indexterm zone="SSL-CTX-new"><primary>SSL_CTX_new</primary></indexterm>
<programlisting><link linkend="SSL-CTX:CAPS"><returnvalue>SSL_CTX</returnvalue></link> *           SSL_CTX_new                         (<parameter><link linkend="SSL-METHOD:CAPS"><type>SSL_METHOD</type></link> *method</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>method</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-CTX-free" role="function">
<title>SSL_CTX_free ()</title>
<indexterm zone="SSL-CTX-free"><primary>SSL_CTX_free</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                SSL_CTX_free                        (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-CTX-set-default-verify-paths" role="function">
<title>SSL_CTX_set_default_verify_paths ()</title>
<indexterm zone="SSL-CTX-set-default-verify-paths"><primary>SSL_CTX_set_default_verify_paths</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 SSL_CTX_set_default_verify_paths    (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-CTX-use-certificate-file" role="function">
<title>SSL_CTX_use_certificate_file ()</title>
<indexterm zone="SSL-CTX-use-certificate-file"><primary>SSL_CTX_use_certificate_file</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 SSL_CTX_use_certificate_file        (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *certfile</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> type</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>certfile</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-CTX-use-PrivateKey-file" role="function">
<title>SSL_CTX_use_PrivateKey_file ()</title>
<indexterm zone="SSL-CTX-use-PrivateKey-file"><primary>SSL_CTX_use_PrivateKey_file</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 SSL_CTX_use_PrivateKey_file         (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *keyfile</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> type</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyfile</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-CTX-set-verify" role="function">
<title>SSL_CTX_set_verify ()</title>
<indexterm zone="SSL-CTX-set-verify"><primary>SSL_CTX_set_verify</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                SSL_CTX_set_verify                  (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> verify_mode</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> (verify_callbackint, X509_STORE_CTX *) ()</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>verify_mode</parameter>&#160;:</term>
<listitem><simpara>
<parameter>int</parameter>, X509_STORE_CTX *:
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-CTX-set-options" role="function">
<title>SSL_CTX_set_options ()</title>
<indexterm zone="SSL-CTX-set-options"><primary>SSL_CTX_set_options</primary></indexterm>
<programlisting>unsigned <link linkend="long"><returnvalue>long</returnvalue></link>       SSL_CTX_set_options                 (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>,
                                                         <parameter><type>unsigned long </type> options</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>options</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-CTX-set-mode" role="function">
<title>SSL_CTX_set_mode ()</title>
<indexterm zone="SSL-CTX-set-mode"><primary>SSL_CTX_set_mode</primary></indexterm>
<programlisting><link linkend="long"><returnvalue>long</returnvalue></link>                SSL_CTX_set_mode                    (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>,
                                                         <parameter>long <link linkend="mode"><type>mode</type></link> Param2</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param2</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-CTX-set-cipher-list" role="function">
<title>SSL_CTX_set_cipher_list ()</title>
<indexterm zone="SSL-CTX-set-cipher-list"><primary>SSL_CTX_set_cipher_list</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 SSL_CTX_set_cipher_list             (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *list</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-CTX-sess-number" role="function">
<title>SSL_CTX_sess_number ()</title>
<indexterm zone="SSL-CTX-sess-number"><primary>SSL_CTX_sess_number</primary></indexterm>
<programlisting><link linkend="long"><returnvalue>long</returnvalue></link>                SSL_CTX_sess_number                 (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-CTX-sess-connect" role="function">
<title>SSL_CTX_sess_connect ()</title>
<indexterm zone="SSL-CTX-sess-connect"><primary>SSL_CTX_sess_connect</primary></indexterm>
<programlisting><link linkend="long"><returnvalue>long</returnvalue></link>                SSL_CTX_sess_connect                (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-CTX-sess-connect-good" role="function">
<title>SSL_CTX_sess_connect_good ()</title>
<indexterm zone="SSL-CTX-sess-connect-good"><primary>SSL_CTX_sess_connect_good</primary></indexterm>
<programlisting><link linkend="long"><returnvalue>long</returnvalue></link>                SSL_CTX_sess_connect_good           (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-CTX-sess-connect-renegotiate" role="function">
<title>SSL_CTX_sess_connect_renegotiate ()</title>
<indexterm zone="SSL-CTX-sess-connect-renegotiate"><primary>SSL_CTX_sess_connect_renegotiate</primary></indexterm>
<programlisting><link linkend="long"><returnvalue>long</returnvalue></link>                SSL_CTX_sess_connect_renegotiate    (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-CTX-sess-accept" role="function">
<title>SSL_CTX_sess_accept ()</title>
<indexterm zone="SSL-CTX-sess-accept"><primary>SSL_CTX_sess_accept</primary></indexterm>
<programlisting><link linkend="long"><returnvalue>long</returnvalue></link>                SSL_CTX_sess_accept                 (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-CTX-sess-accept-good" role="function">
<title>SSL_CTX_sess_accept_good ()</title>
<indexterm zone="SSL-CTX-sess-accept-good"><primary>SSL_CTX_sess_accept_good</primary></indexterm>
<programlisting><link linkend="long"><returnvalue>long</returnvalue></link>                SSL_CTX_sess_accept_good            (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-CTX-sess-accept-renegotiate" role="function">
<title>SSL_CTX_sess_accept_renegotiate ()</title>
<indexterm zone="SSL-CTX-sess-accept-renegotiate"><primary>SSL_CTX_sess_accept_renegotiate</primary></indexterm>
<programlisting><link linkend="long"><returnvalue>long</returnvalue></link>                SSL_CTX_sess_accept_renegotiate     (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-CTX-sess-hits" role="function">
<title>SSL_CTX_sess_hits ()</title>
<indexterm zone="SSL-CTX-sess-hits"><primary>SSL_CTX_sess_hits</primary></indexterm>
<programlisting><link linkend="long"><returnvalue>long</returnvalue></link>                SSL_CTX_sess_hits                   (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-CTX-sess-misses" role="function">
<title>SSL_CTX_sess_misses ()</title>
<indexterm zone="SSL-CTX-sess-misses"><primary>SSL_CTX_sess_misses</primary></indexterm>
<programlisting><link linkend="long"><returnvalue>long</returnvalue></link>                SSL_CTX_sess_misses                 (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-CTX-sess-timeouts" role="function">
<title>SSL_CTX_sess_timeouts ()</title>
<indexterm zone="SSL-CTX-sess-timeouts"><primary>SSL_CTX_sess_timeouts</primary></indexterm>
<programlisting><link linkend="long"><returnvalue>long</returnvalue></link>                SSL_CTX_sess_timeouts               (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-new" role="function">
<title>SSL_new ()</title>
<indexterm zone="SSL-new"><primary>SSL_new</primary></indexterm>
<programlisting><link linkend="SSL:CAPS"><returnvalue>SSL</returnvalue></link> *               SSL_new                             (<parameter><link linkend="SSL-CTX:CAPS"><type>SSL_CTX</type></link> *ctx</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-free" role="function">
<title>SSL_free ()</title>
<indexterm zone="SSL-free"><primary>SSL_free</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                SSL_free                            (<parameter><link linkend="SSL:CAPS"><type>SSL</type></link> *ssl</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ssl</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-load-error-strings" role="function">
<title>SSL_load_error_strings ()</title>
<indexterm zone="SSL-load-error-strings"><primary>SSL_load_error_strings</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                SSL_load_error_strings              (<parameter><type>void</type></parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="SSL-get-error" role="function">
<title>SSL_get_error ()</title>
<indexterm zone="SSL-get-error"><primary>SSL_get_error</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 SSL_get_error                       (<parameter><link linkend="SSL:CAPS"><type>SSL</type></link> *ssl</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> ret</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ssl</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-set-fd" role="function">
<title>SSL_set_fd ()</title>
<indexterm zone="SSL-set-fd"><primary>SSL_set_fd</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 SSL_set_fd                          (<parameter><link linkend="SSL:CAPS"><type>SSL</type></link> *ssl</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> fd</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ssl</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fd</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-set-rfd" role="function">
<title>SSL_set_rfd ()</title>
<indexterm zone="SSL-set-rfd"><primary>SSL_set_rfd</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 SSL_set_rfd                         (<parameter><link linkend="SSL:CAPS"><type>SSL</type></link> *ssl</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> fd</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ssl</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fd</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-set-wfd" role="function">
<title>SSL_set_wfd ()</title>
<indexterm zone="SSL-set-wfd"><primary>SSL_set_wfd</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 SSL_set_wfd                         (<parameter><link linkend="SSL:CAPS"><type>SSL</type></link> *ssl</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> fd</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ssl</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fd</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-set-bio" role="function">
<title>SSL_set_bio ()</title>
<indexterm zone="SSL-set-bio"><primary>SSL_set_bio</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                SSL_set_bio                         (<parameter><link linkend="SSL:CAPS"><type>SSL</type></link> *ssl</parameter>,
                                                         <parameter><link linkend="BIO:CAPS"><type>BIO</type></link> *rbio</parameter>,
                                                         <parameter><link linkend="BIO:CAPS"><type>BIO</type></link> *wbio</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ssl</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rbio</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>wbio</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-set-connect-state" role="function">
<title>SSL_set_connect_state ()</title>
<indexterm zone="SSL-set-connect-state"><primary>SSL_set_connect_state</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                SSL_set_connect_state               (<parameter><link linkend="SSL:CAPS"><type>SSL</type></link> *ssl</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ssl</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-pending" role="function">
<title>SSL_pending ()</title>
<indexterm zone="SSL-pending"><primary>SSL_pending</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 SSL_pending                         (<parameter><link linkend="SSL:CAPS"><type>SSL</type></link> *ssl</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ssl</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-set-verify" role="function">
<title>SSL_set_verify ()</title>
<indexterm zone="SSL-set-verify"><primary>SSL_set_verify</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                SSL_set_verify                      (<parameter><link linkend="SSL:CAPS"><type>SSL</type></link> *ssl</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> verify_mode</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> (verify_callbackint, X509_STORE_CTX *) ()</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ssl</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>verify_mode</parameter>&#160;:</term>
<listitem><simpara>
<parameter>int</parameter>, X509_STORE_CTX *:
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-get-peer-certificate" role="function">
<title>SSL_get_peer_certificate ()</title>
<indexterm zone="SSL-get-peer-certificate"><primary>SSL_get_peer_certificate</primary></indexterm>
<programlisting>const <link linkend="X509:CAPS"><returnvalue>X509</returnvalue></link> *        SSL_get_peer_certificate            (<parameter><link linkend="SSL:CAPS"><type>SSL</type></link> *ssl</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ssl</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-connect" role="function">
<title>SSL_connect ()</title>
<indexterm zone="SSL-connect"><primary>SSL_connect</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 SSL_connect                         (<parameter><link linkend="SSL:CAPS"><type>SSL</type></link> *ssl</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ssl</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-accept" role="function">
<title>SSL_accept ()</title>
<indexterm zone="SSL-accept"><primary>SSL_accept</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 SSL_accept                          (<parameter><link linkend="SSL:CAPS"><type>SSL</type></link> *ssl</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ssl</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-shutdown" role="function">
<title>SSL_shutdown ()</title>
<indexterm zone="SSL-shutdown"><primary>SSL_shutdown</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 SSL_shutdown                        (<parameter><link linkend="SSL:CAPS"><type>SSL</type></link> *ssl</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ssl</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-read" role="function">
<title>SSL_read ()</title>
<indexterm zone="SSL-read"><primary>SSL_read</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 SSL_read                            (<parameter><link linkend="SSL:CAPS"><type>SSL</type></link> *ssl</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *buf</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> len</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ssl</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-write" role="function">
<title>SSL_write ()</title>
<indexterm zone="SSL-write"><primary>SSL_write</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 SSL_write                           (<parameter><link linkend="SSL:CAPS"><type>SSL</type></link> *ssl</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *buf</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> len</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ssl</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-want" role="function">
<title>SSL_want ()</title>
<indexterm zone="SSL-want"><primary>SSL_want</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 SSL_want                            (<parameter><link linkend="SSL:CAPS"><type>SSL</type></link> *ssl</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ssl</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-NOTHING:CAPS" role="macro">
<title>SSL_NOTHING</title>
<indexterm zone="SSL-NOTHING:CAPS"><primary>SSL_NOTHING</primary></indexterm>
<programlisting>#define SSL_NOTHING (1)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SSL-WRITING:CAPS" role="macro">
<title>SSL_WRITING</title>
<indexterm zone="SSL-WRITING:CAPS"><primary>SSL_WRITING</primary></indexterm>
<programlisting>#define SSL_WRITING (2)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SSL-READING:CAPS" role="macro">
<title>SSL_READING</title>
<indexterm zone="SSL-READING:CAPS"><primary>SSL_READING</primary></indexterm>
<programlisting>#define SSL_READING (3)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SSL-X509-LOOKUP:CAPS" role="macro">
<title>SSL_X509_LOOKUP</title>
<indexterm zone="SSL-X509-LOOKUP:CAPS"><primary>SSL_X509_LOOKUP</primary></indexterm>
<programlisting>#define SSL_X509_LOOKUP (4)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="SSL-want-nothing" role="macro">
<title>SSL_want_nothing()</title>
<indexterm zone="SSL-want-nothing"><primary>SSL_want_nothing</primary></indexterm>
<programlisting>#define SSL_want_nothing(s) (SSL_want(s) == SSL_NOTHING)
</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-want-read" role="macro">
<title>SSL_want_read()</title>
<indexterm zone="SSL-want-read"><primary>SSL_want_read</primary></indexterm>
<programlisting>#define SSL_want_read(s) (SSL_want(s) == SSL_READING)
</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-want-write" role="macro">
<title>SSL_want_write()</title>
<indexterm zone="SSL-want-write"><primary>SSL_want_write</primary></indexterm>
<programlisting>#define SSL_want_write(s) (SSL_want(s) == SSL_WRITING)
</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-want-x509-lookup" role="macro">
<title>SSL_want_x509_lookup()</title>
<indexterm zone="SSL-want-x509-lookup"><primary>SSL_want_x509_lookup</primary></indexterm>
<programlisting>#define SSL_want_x509_lookup(s) (SSL_want(s) == SSL_X509_LOOKUP)
</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSLv23-client-method" role="function">
<title>SSLv23_client_method ()</title>
<indexterm zone="SSLv23-client-method"><primary>SSLv23_client_method</primary></indexterm>
<programlisting><link linkend="SSL-METHOD:CAPS"><returnvalue>SSL_METHOD</returnvalue></link> *        SSLv23_client_method                (<parameter><type>void</type></parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSLv23-server-method" role="function">
<title>SSLv23_server_method ()</title>
<indexterm zone="SSLv23-server-method"><primary>SSLv23_server_method</primary></indexterm>
<programlisting><link linkend="SSL-METHOD:CAPS"><returnvalue>SSL_METHOD</returnvalue></link> *        SSLv23_server_method                (<parameter><type>void</type></parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSLv3-client-method" role="function">
<title>SSLv3_client_method ()</title>
<indexterm zone="SSLv3-client-method"><primary>SSLv3_client_method</primary></indexterm>
<programlisting><link linkend="SSL-METHOD:CAPS"><returnvalue>SSL_METHOD</returnvalue></link> *        SSLv3_client_method                 (<parameter><type>void</type></parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSLv3-server-method" role="function">
<title>SSLv3_server_method ()</title>
<indexterm zone="SSLv3-server-method"><primary>SSLv3_server_method</primary></indexterm>
<programlisting><link linkend="SSL-METHOD:CAPS"><returnvalue>SSL_METHOD</returnvalue></link> *        SSLv3_server_method                 (<parameter><type>void</type></parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="TLSv1-client-method" role="function">
<title>TLSv1_client_method ()</title>
<indexterm zone="TLSv1-client-method"><primary>TLSv1_client_method</primary></indexterm>
<programlisting><link linkend="SSL-METHOD:CAPS"><returnvalue>SSL_METHOD</returnvalue></link> *        TLSv1_client_method                 (<parameter><type>void</type></parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="TLSv1-server-method" role="function">
<title>TLSv1_server_method ()</title>
<indexterm zone="TLSv1-server-method"><primary>TLSv1_server_method</primary></indexterm>
<programlisting><link linkend="SSL-METHOD:CAPS"><returnvalue>SSL_METHOD</returnvalue></link> *        TLSv1_server_method                 (<parameter><type>void</type></parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-get-current-cipher" role="function">
<title>SSL_get_current_cipher ()</title>
<indexterm zone="SSL-get-current-cipher"><primary>SSL_get_current_cipher</primary></indexterm>
<programlisting><link linkend="SSL-CIPHER:CAPS"><returnvalue>SSL_CIPHER</returnvalue></link> *        SSL_get_current_cipher              (<parameter><link linkend="SSL:CAPS"><type>SSL</type></link> *ssl</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ssl</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-CIPHER-get-name" role="function">
<title>SSL_CIPHER_get_name ()</title>
<indexterm zone="SSL-CIPHER-get-name"><primary>SSL_CIPHER_get_name</primary></indexterm>
<programlisting>const <link linkend="char"><returnvalue>char</returnvalue></link> *        SSL_CIPHER_get_name                 (<parameter><link linkend="SSL-CIPHER:CAPS"><type>SSL_CIPHER</type></link> *cipher</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cipher</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-CIPHER-get-bits" role="function">
<title>SSL_CIPHER_get_bits ()</title>
<indexterm zone="SSL-CIPHER-get-bits"><primary>SSL_CIPHER_get_bits</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 SSL_CIPHER_get_bits                 (<parameter><link linkend="SSL-CIPHER:CAPS"><type>SSL_CIPHER</type></link> *cipher</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> *bits</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cipher</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bits</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-CIPHER-get-version" role="function">
<title>SSL_CIPHER_get_version ()</title>
<indexterm zone="SSL-CIPHER-get-version"><primary>SSL_CIPHER_get_version</primary></indexterm>
<programlisting>const <link linkend="char"><returnvalue>char</returnvalue></link> *        SSL_CIPHER_get_version              (<parameter><link linkend="SSL-CIPHER:CAPS"><type>SSL_CIPHER</type></link> *cipher</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cipher</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="SSL-CIPHER-description" role="function">
<title>SSL_CIPHER_description ()</title>
<indexterm zone="SSL-CIPHER-description"><primary>SSL_CIPHER_description</primary></indexterm>
<programlisting><link linkend="char"><returnvalue>char</returnvalue></link> *              SSL_CIPHER_description              (<parameter><link linkend="SSL-CIPHER:CAPS"><type>SSL_CIPHER</type></link> *cipher</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *buf</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> size</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cipher</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="X509-get-subject-name" role="function">
<title>X509_get_subject_name ()</title>
<indexterm zone="X509-get-subject-name"><primary>X509_get_subject_name</primary></indexterm>
<programlisting><link linkend="X509-NAME:CAPS"><returnvalue>X509_NAME</returnvalue></link> *         X509_get_subject_name               (<parameter>const <link linkend="X509:CAPS"><type>X509</type></link> *cert</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="X509-get-issuer-name" role="function">
<title>X509_get_issuer_name ()</title>
<indexterm zone="X509-get-issuer-name"><primary>X509_get_issuer_name</primary></indexterm>
<programlisting><link linkend="X509-NAME:CAPS"><returnvalue>X509_NAME</returnvalue></link> *         X509_get_issuer_name                (<parameter>const <link linkend="X509:CAPS"><type>X509</type></link> *cert</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="X509-NAME-oneline" role="function">
<title>X509_NAME_oneline ()</title>
<indexterm zone="X509-NAME-oneline"><primary>X509_NAME_oneline</primary></indexterm>
<programlisting><link linkend="char"><returnvalue>char</returnvalue></link> *              X509_NAME_oneline                   (<parameter><link linkend="gnutls-x509-dn"><type>gnutls_x509_dn</type></link> *name</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *buf</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> len</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="X509-free" role="function">
<title>X509_free ()</title>
<indexterm zone="X509-free"><primary>X509_free</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                X509_free                           (<parameter>const <link linkend="X509:CAPS"><type>X509</type></link> *cert</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BIO-get-fd" role="function">
<title>BIO_get_fd ()</title>
<indexterm zone="BIO-get-fd"><primary>BIO_get_fd</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                BIO_get_fd                          (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> gnutls_state</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> *fd</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>gnutls_state</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fd</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BIO-new-socket" role="function">
<title>BIO_new_socket ()</title>
<indexterm zone="BIO-new-socket"><primary>BIO_new_socket</primary></indexterm>
<programlisting><link linkend="BIO:CAPS"><returnvalue>BIO</returnvalue></link> *               BIO_new_socket                      (<parameter><link linkend="int"><type>int</type></link> sock</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> close_flag</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>sock</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>close_flag</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="ERR-get-error" role="function">
<title>ERR_get_error ()</title>
<indexterm zone="ERR-get-error"><primary>ERR_get_error</primary></indexterm>
<programlisting>unsigned <link linkend="long"><returnvalue>long</returnvalue></link>       ERR_get_error                       (<parameter><type>void</type></parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="ERR-error-string" role="function">
<title>ERR_error_string ()</title>
<indexterm zone="ERR-error-string"><primary>ERR_error_string</primary></indexterm>
<programlisting>const <link linkend="char"><returnvalue>char</returnvalue></link> *        ERR_error_string                    (<parameter><type>unsigned long </type> e</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *buf</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>e</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="RAND-status" role="function">
<title>RAND_status ()</title>
<indexterm zone="RAND-status"><primary>RAND_status</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 RAND_status                         (<parameter><type>void</type></parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="RAND-seed" role="function">
<title>RAND_seed ()</title>
<indexterm zone="RAND-seed"><primary>RAND_seed</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                RAND_seed                           (<parameter>const <link linkend="void"><type>void</type></link> *buf</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> num</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>num</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="RAND-bytes" role="function">
<title>RAND_bytes ()</title>
<indexterm zone="RAND-bytes"><primary>RAND_bytes</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 RAND_bytes                          (<parameter>unsigned <link linkend="char"><type>char</type></link> *buf</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> num</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>num</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="RAND-pseudo-bytes" role="function">
<title>RAND_pseudo_bytes ()</title>
<indexterm zone="RAND-pseudo-bytes"><primary>RAND_pseudo_bytes</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 RAND_pseudo_bytes                   (<parameter>unsigned <link linkend="char"><type>char</type></link> *buf</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> num</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>num</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="RAND-file-name" role="function">
<title>RAND_file_name ()</title>
<indexterm zone="RAND-file-name"><primary>RAND_file_name</primary></indexterm>
<programlisting>const <link linkend="char"><returnvalue>char</returnvalue></link> *        RAND_file_name                      (<parameter><link linkend="char"><type>char</type></link> *buf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> len</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="RAND-load-file" role="function">
<title>RAND_load_file ()</title>
<indexterm zone="RAND-load-file"><primary>RAND_load_file</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 RAND_load_file                      (<parameter>const <link linkend="char"><type>char</type></link> *name</parameter>,
                                                         <parameter>long <link linkend="maxbytes"><type>maxbytes</type></link> Param2</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>Param2</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="RAND-write-file" role="function">
<title>RAND_write_file ()</title>
<indexterm zone="RAND-write-file"><primary>RAND_write_file</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 RAND_write_file                     (<parameter>const <link linkend="char"><type>char</type></link> *name</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="RAND-egd-bytes" role="function">
<title>RAND_egd_bytes ()</title>
<indexterm zone="RAND-egd-bytes"><primary>RAND_egd_bytes</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 RAND_egd_bytes                      (<parameter>const <link linkend="char"><type>char</type></link> *path</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> bytes</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bytes</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="RAND-egd" role="macro">
<title>RAND_egd()</title>
<indexterm zone="RAND-egd"><primary>RAND_egd</primary></indexterm>
<programlisting>#define RAND_egd(p) RAND_egd_bytes((p), 255)
</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>p</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="MD5-DIGEST-LENGTH:CAPS" role="macro">
<title>MD5_DIGEST_LENGTH</title>
<indexterm zone="MD5-DIGEST-LENGTH:CAPS"><primary>MD5_DIGEST_LENGTH</primary></indexterm>
<programlisting>#define MD5_DIGEST_LENGTH 16
</programlisting>
<para>
</para></refsect2>
<refsect2 id="MD5-Init" role="function">
<title>MD5_Init ()</title>
<indexterm zone="MD5-Init"><primary>MD5_Init</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                MD5_Init                            (<parameter><link linkend="MD5-CTX:CAPS"><type>MD5_CTX</type></link> *ctx</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="MD5-Update" role="function">
<title>MD5_Update ()</title>
<indexterm zone="MD5-Update"><primary>MD5_Update</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                MD5_Update                          (<parameter><link linkend="MD5-CTX:CAPS"><type>MD5_CTX</type></link> *ctx</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *buf</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> len</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="MD5-Final" role="function">
<title>MD5_Final ()</title>
<indexterm zone="MD5-Final"><primary>MD5_Final</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                MD5_Final                           (<parameter>unsigned <link linkend="char"><type>char</type></link> *md</parameter>,
                                                         <parameter><link linkend="MD5-CTX:CAPS"><type>MD5_CTX</type></link> *ctx</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>md</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="MD5:CAPS" role="function">
<title>MD5 ()</title>
<indexterm zone="MD5:CAPS"><primary>MD5</primary></indexterm>
<programlisting>unsigned <link linkend="char"><returnvalue>char</returnvalue></link> *     MD5                                 (<parameter>unsigned <link linkend="char"><type>char</type></link> *buf</parameter>,
                                                         <parameter><type>unsigned long </type> len</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> *md</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>md</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="RIPEMD160-Init" role="function">
<title>RIPEMD160_Init ()</title>
<indexterm zone="RIPEMD160-Init"><primary>RIPEMD160_Init</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                RIPEMD160_Init                      (<parameter><link linkend="RIPEMD160-CTX:CAPS"><type>RIPEMD160_CTX</type></link> *ctx</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="RIPEMD160-Update" role="function">
<title>RIPEMD160_Update ()</title>
<indexterm zone="RIPEMD160-Update"><primary>RIPEMD160_Update</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                RIPEMD160_Update                    (<parameter><link linkend="RIPEMD160-CTX:CAPS"><type>RIPEMD160_CTX</type></link> *ctx</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *buf</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> len</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="RIPEMD160-Final" role="function">
<title>RIPEMD160_Final ()</title>
<indexterm zone="RIPEMD160-Final"><primary>RIPEMD160_Final</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                RIPEMD160_Final                     (<parameter>unsigned <link linkend="char"><type>char</type></link> *md</parameter>,
                                                         <parameter><link linkend="RIPEMD160-CTX:CAPS"><type>RIPEMD160_CTX</type></link> *ctx</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>md</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="RIPEMD160:CAPS" role="function">
<title>RIPEMD160 ()</title>
<indexterm zone="RIPEMD160:CAPS"><primary>RIPEMD160</primary></indexterm>
<programlisting>unsigned <link linkend="char"><returnvalue>char</returnvalue></link> *     RIPEMD160                           (<parameter>unsigned <link linkend="char"><type>char</type></link> *buf</parameter>,
                                                         <parameter><type>unsigned long </type> len</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> *md</parameter>);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>md</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

</refentry>
